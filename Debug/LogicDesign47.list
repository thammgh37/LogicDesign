
LogicDesign47.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080028dc  080028dc  000128dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002900  08002900  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002900  08002900  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002900  08002900  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002900  08002900  00012900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002904  08002904  00012904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000002c  08002934  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002934  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2db  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b42  00000000  00000000  0002a330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002be78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002c8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d5c  00000000  00000000  0002d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad9d  00000000  00000000  00043f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008468f  00000000  00000000  0004ecf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3380  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b4  00000000  00000000  000d33d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028c4 	.word	0x080028c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	080028c4 	.word	0x080028c4

0800014c <display7SEG>:
#include "display.h"
#include "main.h"

int idx = 0;

void display7SEG(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 819e 	bhi.w	8000498 <display7SEG+0x34c>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001db 	.word	0x080001db
 800016c:	08000229 	.word	0x08000229
 8000170:	08000277 	.word	0x08000277
 8000174:	080002c5 	.word	0x080002c5
 8000178:	08000313 	.word	0x08000313
 800017c:	08000361 	.word	0x08000361
 8000180:	080003af 	.word	0x080003af
 8000184:	080003fd 	.word	0x080003fd
 8000188:	0800044b 	.word	0x0800044b
	switch (num){
	case 0:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 800018c:	2200      	movs	r2, #0
 800018e:	2104      	movs	r1, #4
 8000190:	48c3      	ldr	r0, [pc, #780]	; (80004a0 <display7SEG+0x354>)
 8000192:	f001 fb60 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 8000196:	2200      	movs	r2, #0
 8000198:	2108      	movs	r1, #8
 800019a:	48c2      	ldr	r0, [pc, #776]	; (80004a4 <display7SEG+0x358>)
 800019c:	f001 fb5b 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 80001a0:	2200      	movs	r2, #0
 80001a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001a6:	48bf      	ldr	r0, [pc, #764]	; (80004a4 <display7SEG+0x358>)
 80001a8:	f001 fb55 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 0);
 80001ac:	2200      	movs	r2, #0
 80001ae:	2110      	movs	r1, #16
 80001b0:	48bc      	ldr	r0, [pc, #752]	; (80004a4 <display7SEG+0x358>)
 80001b2:	f001 fb50 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 80001b6:	2200      	movs	r2, #0
 80001b8:	2120      	movs	r1, #32
 80001ba:	48ba      	ldr	r0, [pc, #744]	; (80004a4 <display7SEG+0x358>)
 80001bc:	f001 fb4b 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 0);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c6:	48b6      	ldr	r0, [pc, #728]	; (80004a0 <display7SEG+0x354>)
 80001c8:	f001 fb45 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 1);
 80001cc:	2201      	movs	r2, #1
 80001ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d2:	48b3      	ldr	r0, [pc, #716]	; (80004a0 <display7SEG+0x354>)
 80001d4:	f001 fb3f 	bl	8001856 <HAL_GPIO_WritePin>
		break;
 80001d8:	e15e      	b.n	8000498 <display7SEG+0x34c>
	case 1:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 1);
 80001da:	2201      	movs	r2, #1
 80001dc:	2104      	movs	r1, #4
 80001de:	48b0      	ldr	r0, [pc, #704]	; (80004a0 <display7SEG+0x354>)
 80001e0:	f001 fb39 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2108      	movs	r1, #8
 80001e8:	48ae      	ldr	r0, [pc, #696]	; (80004a4 <display7SEG+0x358>)
 80001ea:	f001 fb34 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001f4:	48ab      	ldr	r0, [pc, #684]	; (80004a4 <display7SEG+0x358>)
 80001f6:	f001 fb2e 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 1);
 80001fa:	2201      	movs	r2, #1
 80001fc:	2110      	movs	r1, #16
 80001fe:	48a9      	ldr	r0, [pc, #676]	; (80004a4 <display7SEG+0x358>)
 8000200:	f001 fb29 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 1);
 8000204:	2201      	movs	r2, #1
 8000206:	2120      	movs	r1, #32
 8000208:	48a6      	ldr	r0, [pc, #664]	; (80004a4 <display7SEG+0x358>)
 800020a:	f001 fb24 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 1);
 800020e:	2201      	movs	r2, #1
 8000210:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000214:	48a2      	ldr	r0, [pc, #648]	; (80004a0 <display7SEG+0x354>)
 8000216:	f001 fb1e 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 1);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000220:	489f      	ldr	r0, [pc, #636]	; (80004a0 <display7SEG+0x354>)
 8000222:	f001 fb18 	bl	8001856 <HAL_GPIO_WritePin>
		break;
 8000226:	e137      	b.n	8000498 <display7SEG+0x34c>
	case 2:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 8000228:	2200      	movs	r2, #0
 800022a:	2104      	movs	r1, #4
 800022c:	489c      	ldr	r0, [pc, #624]	; (80004a0 <display7SEG+0x354>)
 800022e:	f001 fb12 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 8000232:	2200      	movs	r2, #0
 8000234:	2108      	movs	r1, #8
 8000236:	489b      	ldr	r0, [pc, #620]	; (80004a4 <display7SEG+0x358>)
 8000238:	f001 fb0d 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 1);
 800023c:	2201      	movs	r2, #1
 800023e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000242:	4898      	ldr	r0, [pc, #608]	; (80004a4 <display7SEG+0x358>)
 8000244:	f001 fb07 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 0);
 8000248:	2200      	movs	r2, #0
 800024a:	2110      	movs	r1, #16
 800024c:	4895      	ldr	r0, [pc, #596]	; (80004a4 <display7SEG+0x358>)
 800024e:	f001 fb02 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	2120      	movs	r1, #32
 8000256:	4893      	ldr	r0, [pc, #588]	; (80004a4 <display7SEG+0x358>)
 8000258:	f001 fafd 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 1);
 800025c:	2201      	movs	r2, #1
 800025e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000262:	488f      	ldr	r0, [pc, #572]	; (80004a0 <display7SEG+0x354>)
 8000264:	f001 faf7 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 0);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800026e:	488c      	ldr	r0, [pc, #560]	; (80004a0 <display7SEG+0x354>)
 8000270:	f001 faf1 	bl	8001856 <HAL_GPIO_WritePin>
		break;
 8000274:	e110      	b.n	8000498 <display7SEG+0x34c>
	case 3:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 8000276:	2200      	movs	r2, #0
 8000278:	2104      	movs	r1, #4
 800027a:	4889      	ldr	r0, [pc, #548]	; (80004a0 <display7SEG+0x354>)
 800027c:	f001 faeb 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 8000280:	2200      	movs	r2, #0
 8000282:	2108      	movs	r1, #8
 8000284:	4887      	ldr	r0, [pc, #540]	; (80004a4 <display7SEG+0x358>)
 8000286:	f001 fae6 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 800028a:	2200      	movs	r2, #0
 800028c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000290:	4884      	ldr	r0, [pc, #528]	; (80004a4 <display7SEG+0x358>)
 8000292:	f001 fae0 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 0);
 8000296:	2200      	movs	r2, #0
 8000298:	2110      	movs	r1, #16
 800029a:	4882      	ldr	r0, [pc, #520]	; (80004a4 <display7SEG+0x358>)
 800029c:	f001 fadb 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 1);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2120      	movs	r1, #32
 80002a4:	487f      	ldr	r0, [pc, #508]	; (80004a4 <display7SEG+0x358>)
 80002a6:	f001 fad6 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 1);
 80002aa:	2201      	movs	r2, #1
 80002ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b0:	487b      	ldr	r0, [pc, #492]	; (80004a0 <display7SEG+0x354>)
 80002b2:	f001 fad0 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002bc:	4878      	ldr	r0, [pc, #480]	; (80004a0 <display7SEG+0x354>)
 80002be:	f001 faca 	bl	8001856 <HAL_GPIO_WritePin>
		break;
 80002c2:	e0e9      	b.n	8000498 <display7SEG+0x34c>
	case 4:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 1);
 80002c4:	2201      	movs	r2, #1
 80002c6:	2104      	movs	r1, #4
 80002c8:	4875      	ldr	r0, [pc, #468]	; (80004a0 <display7SEG+0x354>)
 80002ca:	f001 fac4 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2108      	movs	r1, #8
 80002d2:	4874      	ldr	r0, [pc, #464]	; (80004a4 <display7SEG+0x358>)
 80002d4:	f001 fabf 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 80002d8:	2200      	movs	r2, #0
 80002da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002de:	4871      	ldr	r0, [pc, #452]	; (80004a4 <display7SEG+0x358>)
 80002e0:	f001 fab9 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 1);
 80002e4:	2201      	movs	r2, #1
 80002e6:	2110      	movs	r1, #16
 80002e8:	486e      	ldr	r0, [pc, #440]	; (80004a4 <display7SEG+0x358>)
 80002ea:	f001 fab4 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 1);
 80002ee:	2201      	movs	r2, #1
 80002f0:	2120      	movs	r1, #32
 80002f2:	486c      	ldr	r0, [pc, #432]	; (80004a4 <display7SEG+0x358>)
 80002f4:	f001 faaf 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 0);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002fe:	4868      	ldr	r0, [pc, #416]	; (80004a0 <display7SEG+0x354>)
 8000300:	f001 faa9 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 0);
 8000304:	2200      	movs	r2, #0
 8000306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800030a:	4865      	ldr	r0, [pc, #404]	; (80004a0 <display7SEG+0x354>)
 800030c:	f001 faa3 	bl	8001856 <HAL_GPIO_WritePin>
		break;
 8000310:	e0c2      	b.n	8000498 <display7SEG+0x34c>
	case 5:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	2104      	movs	r1, #4
 8000316:	4862      	ldr	r0, [pc, #392]	; (80004a0 <display7SEG+0x354>)
 8000318:	f001 fa9d 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 1);
 800031c:	2201      	movs	r2, #1
 800031e:	2108      	movs	r1, #8
 8000320:	4860      	ldr	r0, [pc, #384]	; (80004a4 <display7SEG+0x358>)
 8000322:	f001 fa98 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032c:	485d      	ldr	r0, [pc, #372]	; (80004a4 <display7SEG+0x358>)
 800032e:	f001 fa92 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 0);
 8000332:	2200      	movs	r2, #0
 8000334:	2110      	movs	r1, #16
 8000336:	485b      	ldr	r0, [pc, #364]	; (80004a4 <display7SEG+0x358>)
 8000338:	f001 fa8d 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 1);
 800033c:	2201      	movs	r2, #1
 800033e:	2120      	movs	r1, #32
 8000340:	4858      	ldr	r0, [pc, #352]	; (80004a4 <display7SEG+0x358>)
 8000342:	f001 fa88 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 0);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800034c:	4854      	ldr	r0, [pc, #336]	; (80004a0 <display7SEG+0x354>)
 800034e:	f001 fa82 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 0);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000358:	4851      	ldr	r0, [pc, #324]	; (80004a0 <display7SEG+0x354>)
 800035a:	f001 fa7c 	bl	8001856 <HAL_GPIO_WritePin>
		break;
 800035e:	e09b      	b.n	8000498 <display7SEG+0x34c>
	case 6:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 8000360:	2200      	movs	r2, #0
 8000362:	2104      	movs	r1, #4
 8000364:	484e      	ldr	r0, [pc, #312]	; (80004a0 <display7SEG+0x354>)
 8000366:	f001 fa76 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 1);
 800036a:	2201      	movs	r2, #1
 800036c:	2108      	movs	r1, #8
 800036e:	484d      	ldr	r0, [pc, #308]	; (80004a4 <display7SEG+0x358>)
 8000370:	f001 fa71 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800037a:	484a      	ldr	r0, [pc, #296]	; (80004a4 <display7SEG+0x358>)
 800037c:	f001 fa6b 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 0);
 8000380:	2200      	movs	r2, #0
 8000382:	2110      	movs	r1, #16
 8000384:	4847      	ldr	r0, [pc, #284]	; (80004a4 <display7SEG+0x358>)
 8000386:	f001 fa66 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	2120      	movs	r1, #32
 800038e:	4845      	ldr	r0, [pc, #276]	; (80004a4 <display7SEG+0x358>)
 8000390:	f001 fa61 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 0);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800039a:	4841      	ldr	r0, [pc, #260]	; (80004a0 <display7SEG+0x354>)
 800039c:	f001 fa5b 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 0);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a6:	483e      	ldr	r0, [pc, #248]	; (80004a0 <display7SEG+0x354>)
 80003a8:	f001 fa55 	bl	8001856 <HAL_GPIO_WritePin>
		break;
 80003ac:	e074      	b.n	8000498 <display7SEG+0x34c>
	case 7:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2104      	movs	r1, #4
 80003b2:	483b      	ldr	r0, [pc, #236]	; (80004a0 <display7SEG+0x354>)
 80003b4:	f001 fa4f 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2108      	movs	r1, #8
 80003bc:	4839      	ldr	r0, [pc, #228]	; (80004a4 <display7SEG+0x358>)
 80003be:	f001 fa4a 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c8:	4836      	ldr	r0, [pc, #216]	; (80004a4 <display7SEG+0x358>)
 80003ca:	f001 fa44 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 1);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2110      	movs	r1, #16
 80003d2:	4834      	ldr	r0, [pc, #208]	; (80004a4 <display7SEG+0x358>)
 80003d4:	f001 fa3f 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 1);
 80003d8:	2201      	movs	r2, #1
 80003da:	2120      	movs	r1, #32
 80003dc:	4831      	ldr	r0, [pc, #196]	; (80004a4 <display7SEG+0x358>)
 80003de:	f001 fa3a 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 1);
 80003e2:	2201      	movs	r2, #1
 80003e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e8:	482d      	ldr	r0, [pc, #180]	; (80004a0 <display7SEG+0x354>)
 80003ea:	f001 fa34 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 1);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f4:	482a      	ldr	r0, [pc, #168]	; (80004a0 <display7SEG+0x354>)
 80003f6:	f001 fa2e 	bl	8001856 <HAL_GPIO_WritePin>
		break;
 80003fa:	e04d      	b.n	8000498 <display7SEG+0x34c>
	case 8:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2104      	movs	r1, #4
 8000400:	4827      	ldr	r0, [pc, #156]	; (80004a0 <display7SEG+0x354>)
 8000402:	f001 fa28 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 8000406:	2200      	movs	r2, #0
 8000408:	2108      	movs	r1, #8
 800040a:	4826      	ldr	r0, [pc, #152]	; (80004a4 <display7SEG+0x358>)
 800040c:	f001 fa23 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 8000410:	2200      	movs	r2, #0
 8000412:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000416:	4823      	ldr	r0, [pc, #140]	; (80004a4 <display7SEG+0x358>)
 8000418:	f001 fa1d 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	2110      	movs	r1, #16
 8000420:	4820      	ldr	r0, [pc, #128]	; (80004a4 <display7SEG+0x358>)
 8000422:	f001 fa18 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 0);
 8000426:	2200      	movs	r2, #0
 8000428:	2120      	movs	r1, #32
 800042a:	481e      	ldr	r0, [pc, #120]	; (80004a4 <display7SEG+0x358>)
 800042c:	f001 fa13 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 0);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000436:	481a      	ldr	r0, [pc, #104]	; (80004a0 <display7SEG+0x354>)
 8000438:	f001 fa0d 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 0);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000442:	4817      	ldr	r0, [pc, #92]	; (80004a0 <display7SEG+0x354>)
 8000444:	f001 fa07 	bl	8001856 <HAL_GPIO_WritePin>
		break;
 8000448:	e026      	b.n	8000498 <display7SEG+0x34c>
	case 9:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, 0);
 800044a:	2200      	movs	r2, #0
 800044c:	2104      	movs	r1, #4
 800044e:	4814      	ldr	r0, [pc, #80]	; (80004a0 <display7SEG+0x354>)
 8000450:	f001 fa01 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, 0);
 8000454:	2200      	movs	r2, #0
 8000456:	2108      	movs	r1, #8
 8000458:	4812      	ldr	r0, [pc, #72]	; (80004a4 <display7SEG+0x358>)
 800045a:	f001 f9fc 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000464:	480f      	ldr	r0, [pc, #60]	; (80004a4 <display7SEG+0x358>)
 8000466:	f001 f9f6 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2110      	movs	r1, #16
 800046e:	480d      	ldr	r0, [pc, #52]	; (80004a4 <display7SEG+0x358>)
 8000470:	f001 f9f1 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, 1);
 8000474:	2201      	movs	r2, #1
 8000476:	2120      	movs	r1, #32
 8000478:	480a      	ldr	r0, [pc, #40]	; (80004a4 <display7SEG+0x358>)
 800047a:	f001 f9ec 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000484:	4806      	ldr	r0, [pc, #24]	; (80004a0 <display7SEG+0x354>)
 8000486:	f001 f9e6 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000490:	4803      	ldr	r0, [pc, #12]	; (80004a0 <display7SEG+0x354>)
 8000492:	f001 f9e0 	bl	8001856 <HAL_GPIO_WritePin>
		break;
 8000496:	bf00      	nop
	}
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40010800 	.word	0x40010800
 80004a4:	40010c00 	.word	0x40010c00

080004a8 <setLedMode>:

void setLedMode(int mode){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	switch (mode) {
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	d029      	beq.n	800050a <setLedMode+0x62>
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2b04      	cmp	r3, #4
 80004ba:	dc36      	bgt.n	800052a <setLedMode+0x82>
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2b02      	cmp	r3, #2
 80004c0:	d003      	beq.n	80004ca <setLedMode+0x22>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2b03      	cmp	r3, #3
 80004c6:	d010      	beq.n	80004ea <setLedMode+0x42>
			HAL_GPIO_WritePin(MODE1_GPIO_Port, MODE1_Pin, SET);
			HAL_GPIO_WritePin(MODE2_GPIO_Port, MODE2_Pin, SET);
			HAL_GPIO_WritePin(MODE3_GPIO_Port, MODE3_Pin, RESET);
			break;
		default:
			break;
 80004c8:	e02f      	b.n	800052a <setLedMode+0x82>
			HAL_GPIO_WritePin(MODE1_GPIO_Port, MODE1_Pin, RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2101      	movs	r1, #1
 80004ce:	4819      	ldr	r0, [pc, #100]	; (8000534 <setLedMode+0x8c>)
 80004d0:	f001 f9c1 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE2_GPIO_Port, MODE2_Pin, SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2102      	movs	r1, #2
 80004d8:	4817      	ldr	r0, [pc, #92]	; (8000538 <setLedMode+0x90>)
 80004da:	f001 f9bc 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE3_GPIO_Port, MODE3_Pin, SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	2101      	movs	r1, #1
 80004e2:	4815      	ldr	r0, [pc, #84]	; (8000538 <setLedMode+0x90>)
 80004e4:	f001 f9b7 	bl	8001856 <HAL_GPIO_WritePin>
			break;
 80004e8:	e020      	b.n	800052c <setLedMode+0x84>
			HAL_GPIO_WritePin(MODE1_GPIO_Port, MODE1_Pin, SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2101      	movs	r1, #1
 80004ee:	4811      	ldr	r0, [pc, #68]	; (8000534 <setLedMode+0x8c>)
 80004f0:	f001 f9b1 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE2_GPIO_Port, MODE2_Pin, RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2102      	movs	r1, #2
 80004f8:	480f      	ldr	r0, [pc, #60]	; (8000538 <setLedMode+0x90>)
 80004fa:	f001 f9ac 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE3_GPIO_Port, MODE3_Pin, SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	2101      	movs	r1, #1
 8000502:	480d      	ldr	r0, [pc, #52]	; (8000538 <setLedMode+0x90>)
 8000504:	f001 f9a7 	bl	8001856 <HAL_GPIO_WritePin>
			break;
 8000508:	e010      	b.n	800052c <setLedMode+0x84>
			HAL_GPIO_WritePin(MODE1_GPIO_Port, MODE1_Pin, SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2101      	movs	r1, #1
 800050e:	4809      	ldr	r0, [pc, #36]	; (8000534 <setLedMode+0x8c>)
 8000510:	f001 f9a1 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE2_GPIO_Port, MODE2_Pin, SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2102      	movs	r1, #2
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <setLedMode+0x90>)
 800051a:	f001 f99c 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE3_GPIO_Port, MODE3_Pin, RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2101      	movs	r1, #1
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <setLedMode+0x90>)
 8000524:	f001 f997 	bl	8001856 <HAL_GPIO_WritePin>
			break;
 8000528:	e000      	b.n	800052c <setLedMode+0x84>
			break;
 800052a:	bf00      	nop
	}
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40010c00 	.word	0x40010c00
 8000538:	40011000 	.word	0x40011000

0800053c <update7SEG>:

void update7SEG(int index){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b03      	cmp	r3, #3
 8000548:	d866      	bhi.n	8000618 <update7SEG+0xdc>
 800054a:	a201      	add	r2, pc, #4	; (adr r2, 8000550 <update7SEG+0x14>)
 800054c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000550:	08000561 	.word	0x08000561
 8000554:	0800058f 	.word	0x0800058f
 8000558:	080005bd 	.word	0x080005bd
 800055c:	080005eb 	.word	0x080005eb
	switch (index){
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000560:	2200      	movs	r2, #0
 8000562:	2140      	movs	r1, #64	; 0x40
 8000564:	4832      	ldr	r0, [pc, #200]	; (8000630 <update7SEG+0xf4>)
 8000566:	f001 f976 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 800056a:	2201      	movs	r2, #1
 800056c:	2120      	movs	r1, #32
 800056e:	4830      	ldr	r0, [pc, #192]	; (8000630 <update7SEG+0xf4>)
 8000570:	f001 f971 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057a:	482e      	ldr	r0, [pc, #184]	; (8000634 <update7SEG+0xf8>)
 800057c:	f001 f96b 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000586:	482b      	ldr	r0, [pc, #172]	; (8000634 <update7SEG+0xf8>)
 8000588:	f001 f965 	bl	8001856 <HAL_GPIO_WritePin>
		break;
 800058c:	e045      	b.n	800061a <update7SEG+0xde>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 800058e:	2201      	movs	r2, #1
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	4827      	ldr	r0, [pc, #156]	; (8000630 <update7SEG+0xf4>)
 8000594:	f001 f95f 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2120      	movs	r1, #32
 800059c:	4824      	ldr	r0, [pc, #144]	; (8000630 <update7SEG+0xf4>)
 800059e:	f001 f95a 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a8:	4822      	ldr	r0, [pc, #136]	; (8000634 <update7SEG+0xf8>)
 80005aa:	f001 f954 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b4:	481f      	ldr	r0, [pc, #124]	; (8000634 <update7SEG+0xf8>)
 80005b6:	f001 f94e 	bl	8001856 <HAL_GPIO_WritePin>
		break;
 80005ba:	e02e      	b.n	800061a <update7SEG+0xde>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80005bc:	2201      	movs	r2, #1
 80005be:	2140      	movs	r1, #64	; 0x40
 80005c0:	481b      	ldr	r0, [pc, #108]	; (8000630 <update7SEG+0xf4>)
 80005c2:	f001 f948 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2120      	movs	r1, #32
 80005ca:	4819      	ldr	r0, [pc, #100]	; (8000630 <update7SEG+0xf4>)
 80005cc:	f001 f943 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d6:	4817      	ldr	r0, [pc, #92]	; (8000634 <update7SEG+0xf8>)
 80005d8:	f001 f93d 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e2:	4814      	ldr	r0, [pc, #80]	; (8000634 <update7SEG+0xf8>)
 80005e4:	f001 f937 	bl	8001856 <HAL_GPIO_WritePin>
		break;
 80005e8:	e017      	b.n	800061a <update7SEG+0xde>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2140      	movs	r1, #64	; 0x40
 80005ee:	4810      	ldr	r0, [pc, #64]	; (8000630 <update7SEG+0xf4>)
 80005f0:	f001 f931 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2120      	movs	r1, #32
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <update7SEG+0xf4>)
 80005fa:	f001 f92c 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80005fe:	2201      	movs	r2, #1
 8000600:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000604:	480b      	ldr	r0, [pc, #44]	; (8000634 <update7SEG+0xf8>)
 8000606:	f001 f926 	bl	8001856 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000610:	4808      	ldr	r0, [pc, #32]	; (8000634 <update7SEG+0xf8>)
 8000612:	f001 f920 	bl	8001856 <HAL_GPIO_WritePin>
		break;
 8000616:	e000      	b.n	800061a <update7SEG+0xde>
	default:
		break;
 8000618:	bf00      	nop
	}
	display7SEG(led_buffer[index]);
 800061a:	4a07      	ldr	r2, [pc, #28]	; (8000638 <update7SEG+0xfc>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fd92 	bl	800014c <display7SEG>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40010800 	.word	0x40010800
 8000634:	40010c00 	.word	0x40010c00
 8000638:	20000010 	.word	0x20000010

0800063c <displayClock>:

void displayClock(){
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	if (timer2_flag == 1){
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <displayClock+0x34>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d111      	bne.n	800066c <displayClock+0x30>
		setTimer2(10);
 8000648:	200a      	movs	r0, #10
 800064a:	f000 fce7 	bl	800101c <setTimer2>
		if (idx > 3){
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <displayClock+0x38>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b03      	cmp	r3, #3
 8000654:	dd02      	ble.n	800065c <displayClock+0x20>
		  idx = 0 ;
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <displayClock+0x38>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
		}
		update7SEG(idx++);
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <displayClock+0x38>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	1c5a      	adds	r2, r3, #1
 8000662:	4904      	ldr	r1, [pc, #16]	; (8000674 <displayClock+0x38>)
 8000664:	600a      	str	r2, [r1, #0]
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ff68 	bl	800053c <update7SEG>
	}
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000100 	.word	0x20000100
 8000674:	20000048 	.word	0x20000048

08000678 <saveHourSet>:
 */
#include "main.h"

int state = INIT;

void saveHourSet(){
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	hour = led_buffer[0]* 10 + led_buffer[1];
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <saveHourSet+0x24>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4613      	mov	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	461a      	mov	r2, r3
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <saveHourSet+0x24>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	4413      	add	r3, r2
 8000690:	4a03      	ldr	r2, [pc, #12]	; (80006a0 <saveHourSet+0x28>)
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	20000010 	.word	0x20000010
 80006a0:	20000004 	.word	0x20000004

080006a4 <saveMinuteSet>:

void saveMinuteSet(){
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
	minute = led_buffer[2]* 10 + led_buffer[3];
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <saveMinuteSet+0x24>)
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	4613      	mov	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <saveMinuteSet+0x24>)
 80006b8:	68db      	ldr	r3, [r3, #12]
 80006ba:	4413      	add	r3, r2
 80006bc:	4a03      	ldr	r2, [pc, #12]	; (80006cc <saveMinuteSet+0x28>)
 80006be:	6013      	str	r3, [r2, #0]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	20000010 	.word	0x20000010
 80006cc:	20000008 	.word	0x20000008

080006d0 <plusHourOnDisplay>:

void plusHourOnDisplay(){
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
	int tmpHour = led_buffer[0] * 10 + led_buffer[1];
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <plusHourOnDisplay+0x64>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4613      	mov	r3, r2
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4413      	add	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <plusHourOnDisplay+0x64>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	607b      	str	r3, [r7, #4]
	tmpHour++;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3301      	adds	r3, #1
 80006f0:	607b      	str	r3, [r7, #4]
	if (tmpHour >= 24){
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b17      	cmp	r3, #23
 80006f6:	dd01      	ble.n	80006fc <plusHourOnDisplay+0x2c>
		tmpHour = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
	}
	led_buffer[0] = tmpHour/10;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <plusHourOnDisplay+0x68>)
 8000700:	fb82 1203 	smull	r1, r2, r2, r3
 8000704:	1092      	asrs	r2, r2, #2
 8000706:	17db      	asrs	r3, r3, #31
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <plusHourOnDisplay+0x64>)
 800070c:	6013      	str	r3, [r2, #0]
	led_buffer[1] = tmpHour%10;
 800070e:	6879      	ldr	r1, [r7, #4]
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <plusHourOnDisplay+0x68>)
 8000712:	fb83 2301 	smull	r2, r3, r3, r1
 8000716:	109a      	asrs	r2, r3, #2
 8000718:	17cb      	asrs	r3, r1, #31
 800071a:	1ad2      	subs	r2, r2, r3
 800071c:	4613      	mov	r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4413      	add	r3, r2
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	1aca      	subs	r2, r1, r3
 8000726:	4b03      	ldr	r3, [pc, #12]	; (8000734 <plusHourOnDisplay+0x64>)
 8000728:	605a      	str	r2, [r3, #4]
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	20000010 	.word	0x20000010
 8000738:	66666667 	.word	0x66666667

0800073c <plusMinuteOnDisplay>:

void plusMinuteOnDisplay(){
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
	int tmpMinute = led_buffer[2] * 10 + led_buffer[3];
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <plusMinuteOnDisplay+0x64>)
 8000744:	689a      	ldr	r2, [r3, #8]
 8000746:	4613      	mov	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	461a      	mov	r2, r3
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <plusMinuteOnDisplay+0x64>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	4413      	add	r3, r2
 8000756:	607b      	str	r3, [r7, #4]
	tmpMinute++;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3301      	adds	r3, #1
 800075c:	607b      	str	r3, [r7, #4]
	if (tmpMinute >= 60){
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b3b      	cmp	r3, #59	; 0x3b
 8000762:	dd01      	ble.n	8000768 <plusMinuteOnDisplay+0x2c>
		tmpMinute = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
	}
	led_buffer[2] = tmpMinute/10;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <plusMinuteOnDisplay+0x68>)
 800076c:	fb82 1203 	smull	r1, r2, r2, r3
 8000770:	1092      	asrs	r2, r2, #2
 8000772:	17db      	asrs	r3, r3, #31
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <plusMinuteOnDisplay+0x64>)
 8000778:	6093      	str	r3, [r2, #8]
	led_buffer[3] = tmpMinute%10;
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <plusMinuteOnDisplay+0x68>)
 800077e:	fb83 2301 	smull	r2, r3, r3, r1
 8000782:	109a      	asrs	r2, r3, #2
 8000784:	17cb      	asrs	r3, r1, #31
 8000786:	1ad2      	subs	r2, r2, r3
 8000788:	4613      	mov	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4413      	add	r3, r2
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	1aca      	subs	r2, r1, r3
 8000792:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <plusMinuteOnDisplay+0x64>)
 8000794:	60da      	str	r2, [r3, #12]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	20000010 	.word	0x20000010
 80007a4:	66666667 	.word	0x66666667

080007a8 <updateBuffer>:

void updateBuffer(){
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
	led_buffer[0] = hour/10;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <updateBuffer+0x70>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a1a      	ldr	r2, [pc, #104]	; (800081c <updateBuffer+0x74>)
 80007b2:	fb82 1203 	smull	r1, r2, r2, r3
 80007b6:	1092      	asrs	r2, r2, #2
 80007b8:	17db      	asrs	r3, r3, #31
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	4a18      	ldr	r2, [pc, #96]	; (8000820 <updateBuffer+0x78>)
 80007be:	6013      	str	r3, [r2, #0]
	led_buffer[1] = hour%10;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <updateBuffer+0x70>)
 80007c2:	6819      	ldr	r1, [r3, #0]
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <updateBuffer+0x74>)
 80007c6:	fb83 2301 	smull	r2, r3, r3, r1
 80007ca:	109a      	asrs	r2, r3, #2
 80007cc:	17cb      	asrs	r3, r1, #31
 80007ce:	1ad2      	subs	r2, r2, r3
 80007d0:	4613      	mov	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4413      	add	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	1aca      	subs	r2, r1, r3
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <updateBuffer+0x78>)
 80007dc:	605a      	str	r2, [r3, #4]
	led_buffer[2] = minute/10;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <updateBuffer+0x7c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a0e      	ldr	r2, [pc, #56]	; (800081c <updateBuffer+0x74>)
 80007e4:	fb82 1203 	smull	r1, r2, r2, r3
 80007e8:	1092      	asrs	r2, r2, #2
 80007ea:	17db      	asrs	r3, r3, #31
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <updateBuffer+0x78>)
 80007f0:	6093      	str	r3, [r2, #8]
	led_buffer[3] = minute%10;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <updateBuffer+0x7c>)
 80007f4:	6819      	ldr	r1, [r3, #0]
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <updateBuffer+0x74>)
 80007f8:	fb83 2301 	smull	r2, r3, r3, r1
 80007fc:	109a      	asrs	r2, r3, #2
 80007fe:	17cb      	asrs	r3, r1, #31
 8000800:	1ad2      	subs	r2, r2, r3
 8000802:	4613      	mov	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4413      	add	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	1aca      	subs	r2, r1, r3
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <updateBuffer+0x78>)
 800080e:	60da      	str	r2, [r3, #12]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000004 	.word	0x20000004
 800081c:	66666667 	.word	0x66666667
 8000820:	20000010 	.word	0x20000010
 8000824:	20000008 	.word	0x20000008

08000828 <secondPlus>:
void secondPlus(){
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	second ++;
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <secondPlus+0x54>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <secondPlus+0x54>)
 8000834:	6013      	str	r3, [r2, #0]
	if (second >= 60){
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <secondPlus+0x54>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b3b      	cmp	r3, #59	; 0x3b
 800083c:	dd07      	ble.n	800084e <secondPlus+0x26>
		minute ++;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <secondPlus+0x58>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <secondPlus+0x58>)
 8000846:	6013      	str	r3, [r2, #0]
		second = 0;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <secondPlus+0x54>)
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
	}
	if (minute >= 60){
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <secondPlus+0x58>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b3b      	cmp	r3, #59	; 0x3b
 8000854:	dd07      	ble.n	8000866 <secondPlus+0x3e>
		hour ++;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <secondPlus+0x5c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	4a09      	ldr	r2, [pc, #36]	; (8000884 <secondPlus+0x5c>)
 800085e:	6013      	str	r3, [r2, #0]
		minute =0;
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <secondPlus+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
	}
	if (hour >= 24){
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <secondPlus+0x5c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b17      	cmp	r3, #23
 800086c:	dd02      	ble.n	8000874 <secondPlus+0x4c>
		hour = 0;
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <secondPlus+0x5c>)
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
	}
	updateBuffer();
 8000874:	f7ff ff98 	bl	80007a8 <updateBuffer>
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2000000c 	.word	0x2000000c
 8000880:	20000008 	.word	0x20000008
 8000884:	20000004 	.word	0x20000004

08000888 <fsmSystemRun>:

void fsmSystemRun(){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	switch (state) {
 800088c:	4b6f      	ldr	r3, [pc, #444]	; (8000a4c <fsmSystemRun+0x1c4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3b01      	subs	r3, #1
 8000892:	2b03      	cmp	r3, #3
 8000894:	f200 80d1 	bhi.w	8000a3a <fsmSystemRun+0x1b2>
 8000898:	a201      	add	r2, pc, #4	; (adr r2, 80008a0 <fsmSystemRun+0x18>)
 800089a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800089e:	bf00      	nop
 80008a0:	080008b1 	.word	0x080008b1
 80008a4:	080008c5 	.word	0x080008c5
 80008a8:	080008ff 	.word	0x080008ff
 80008ac:	0800099d 	.word	0x0800099d
		case INIT:
			state = NORMAL;
 80008b0:	4b66      	ldr	r3, [pc, #408]	; (8000a4c <fsmSystemRun+0x1c4>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	601a      	str	r2, [r3, #0]
			setTimer2(10);
 80008b6:	200a      	movs	r0, #10
 80008b8:	f000 fbb0 	bl	800101c <setTimer2>
			setTimer3(100);
 80008bc:	2064      	movs	r0, #100	; 0x64
 80008be:	f000 fbc1 	bl	8001044 <setTimer3>
			break;
 80008c2:	e0c1      	b.n	8000a48 <fsmSystemRun+0x1c0>
		case NORMAL:
			setLedMode(state);
 80008c4:	4b61      	ldr	r3, [pc, #388]	; (8000a4c <fsmSystemRun+0x1c4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fded 	bl	80004a8 <setLedMode>
			if (isButtonPressLong(0) == 1){
 80008ce:	2000      	movs	r0, #0
 80008d0:	f000 f928 	bl	8000b24 <isButtonPressLong>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d106      	bne.n	80008e8 <fsmSystemRun+0x60>
				state = HOURSET;
 80008da:	4b5c      	ldr	r3, [pc, #368]	; (8000a4c <fsmSystemRun+0x1c4>)
 80008dc:	2203      	movs	r2, #3
 80008de:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 80008e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e4:	f000 fb86 	bl	8000ff4 <setTimer1>
			}
			if (timer3_flag == 1){
 80008e8:	4b59      	ldr	r3, [pc, #356]	; (8000a50 <fsmSystemRun+0x1c8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	f040 80a6 	bne.w	8000a3e <fsmSystemRun+0x1b6>
				setTimer3(100);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f000 fba6 	bl	8001044 <setTimer3>
				secondPlus();
 80008f8:	f7ff ff96 	bl	8000828 <secondPlus>
			}
			break;
 80008fc:	e09f      	b.n	8000a3e <fsmSystemRun+0x1b6>
		case HOURSET:
			setLedMode(state);
 80008fe:	4b53      	ldr	r3, [pc, #332]	; (8000a4c <fsmSystemRun+0x1c4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fdd0 	bl	80004a8 <setLedMode>
			if (timer1_flag == 1){
 8000908:	4b52      	ldr	r3, [pc, #328]	; (8000a54 <fsmSystemRun+0x1cc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d104      	bne.n	800091a <fsmSystemRun+0x92>
				updateBuffer();
 8000910:	f7ff ff4a 	bl	80007a8 <updateBuffer>
				state = NORMAL;
 8000914:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <fsmSystemRun+0x1c4>)
 8000916:	2202      	movs	r2, #2
 8000918:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressLong(0) == 1){
 800091a:	2000      	movs	r0, #0
 800091c:	f000 f902 	bl	8000b24 <isButtonPressLong>
 8000920:	4603      	mov	r3, r0
 8000922:	2b01      	cmp	r3, #1
 8000924:	d104      	bne.n	8000930 <fsmSystemRun+0xa8>
				updateBuffer();
 8000926:	f7ff ff3f 	bl	80007a8 <updateBuffer>
				state = NORMAL;
 800092a:	4b48      	ldr	r3, [pc, #288]	; (8000a4c <fsmSystemRun+0x1c4>)
 800092c:	2202      	movs	r2, #2
 800092e:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPress(1) == 1){
 8000930:	2001      	movs	r0, #1
 8000932:	f000 f8dd 	bl	8000af0 <isButtonPress>
 8000936:	4603      	mov	r3, r0
 8000938:	2b01      	cmp	r3, #1
 800093a:	d109      	bne.n	8000950 <fsmSystemRun+0xc8>
				setTimer1(1000);
 800093c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000940:	f000 fb58 	bl	8000ff4 <setTimer1>
				plusHourOnDisplay();
 8000944:	f7ff fec4 	bl	80006d0 <plusHourOnDisplay>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000948:	2108      	movs	r1, #8
 800094a:	4843      	ldr	r0, [pc, #268]	; (8000a58 <fsmSystemRun+0x1d0>)
 800094c:	f000 ff9b 	bl	8001886 <HAL_GPIO_TogglePin>
			}
			if (isButtonPress(2) == 1){
 8000950:	2002      	movs	r0, #2
 8000952:	f000 f8cd 	bl	8000af0 <isButtonPress>
 8000956:	4603      	mov	r3, r0
 8000958:	2b01      	cmp	r3, #1
 800095a:	d10b      	bne.n	8000974 <fsmSystemRun+0xec>
				setTimer1(1000);
 800095c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000960:	f000 fb48 	bl	8000ff4 <setTimer1>
				saveHourSet();
 8000964:	f7ff fe88 	bl	8000678 <saveHourSet>
				updateBuffer();
 8000968:	f7ff ff1e 	bl	80007a8 <updateBuffer>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800096c:	2108      	movs	r1, #8
 800096e:	483a      	ldr	r0, [pc, #232]	; (8000a58 <fsmSystemRun+0x1d0>)
 8000970:	f000 ff89 	bl	8001886 <HAL_GPIO_TogglePin>
			}
			if (isButtonPress(0) == 1){
 8000974:	2000      	movs	r0, #0
 8000976:	f000 f8bb 	bl	8000af0 <isButtonPress>
 800097a:	4603      	mov	r3, r0
 800097c:	2b01      	cmp	r3, #1
 800097e:	d160      	bne.n	8000a42 <fsmSystemRun+0x1ba>
				updateBuffer();
 8000980:	f7ff ff12 	bl	80007a8 <updateBuffer>
				setTimer1(1000);
 8000984:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000988:	f000 fb34 	bl	8000ff4 <setTimer1>
				state = MINUTESET;
 800098c:	4b2f      	ldr	r3, [pc, #188]	; (8000a4c <fsmSystemRun+0x1c4>)
 800098e:	2204      	movs	r2, #4
 8000990:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000992:	2108      	movs	r1, #8
 8000994:	4830      	ldr	r0, [pc, #192]	; (8000a58 <fsmSystemRun+0x1d0>)
 8000996:	f000 ff76 	bl	8001886 <HAL_GPIO_TogglePin>
			}
			break;
 800099a:	e052      	b.n	8000a42 <fsmSystemRun+0x1ba>
		case MINUTESET:
			setLedMode(state);
 800099c:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <fsmSystemRun+0x1c4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fd81 	bl	80004a8 <setLedMode>
			if (timer1_flag == 1){
 80009a6:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <fsmSystemRun+0x1cc>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d104      	bne.n	80009b8 <fsmSystemRun+0x130>
				updateBuffer();
 80009ae:	f7ff fefb 	bl	80007a8 <updateBuffer>
				state = NORMAL;
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <fsmSystemRun+0x1c4>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressLong(0) == 1){
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 f8b3 	bl	8000b24 <isButtonPressLong>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d104      	bne.n	80009ce <fsmSystemRun+0x146>
				updateBuffer();
 80009c4:	f7ff fef0 	bl	80007a8 <updateBuffer>
				state = NORMAL;
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <fsmSystemRun+0x1c4>)
 80009ca:	2202      	movs	r2, #2
 80009cc:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPress(1) == 1){
 80009ce:	2001      	movs	r0, #1
 80009d0:	f000 f88e 	bl	8000af0 <isButtonPress>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d109      	bne.n	80009ee <fsmSystemRun+0x166>
				setTimer1(1000);
 80009da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009de:	f000 fb09 	bl	8000ff4 <setTimer1>
				plusMinuteOnDisplay();
 80009e2:	f7ff feab 	bl	800073c <plusMinuteOnDisplay>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80009e6:	2108      	movs	r1, #8
 80009e8:	481b      	ldr	r0, [pc, #108]	; (8000a58 <fsmSystemRun+0x1d0>)
 80009ea:	f000 ff4c 	bl	8001886 <HAL_GPIO_TogglePin>
			}
			if (isButtonPress(2) == 1){
 80009ee:	2002      	movs	r0, #2
 80009f0:	f000 f87e 	bl	8000af0 <isButtonPress>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d10b      	bne.n	8000a12 <fsmSystemRun+0x18a>
				setTimer1(1000);
 80009fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fe:	f000 faf9 	bl	8000ff4 <setTimer1>
				saveMinuteSet();
 8000a02:	f7ff fe4f 	bl	80006a4 <saveMinuteSet>
				updateBuffer();
 8000a06:	f7ff fecf 	bl	80007a8 <updateBuffer>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	4812      	ldr	r0, [pc, #72]	; (8000a58 <fsmSystemRun+0x1d0>)
 8000a0e:	f000 ff3a 	bl	8001886 <HAL_GPIO_TogglePin>
			}
			if (isButtonPress(0) == 1){
 8000a12:	2000      	movs	r0, #0
 8000a14:	f000 f86c 	bl	8000af0 <isButtonPress>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d113      	bne.n	8000a46 <fsmSystemRun+0x1be>
				updateBuffer();
 8000a1e:	f7ff fec3 	bl	80007a8 <updateBuffer>
				setTimer1(1000);
 8000a22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a26:	f000 fae5 	bl	8000ff4 <setTimer1>
				state = HOURSET;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <fsmSystemRun+0x1c4>)
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a30:	2108      	movs	r1, #8
 8000a32:	4809      	ldr	r0, [pc, #36]	; (8000a58 <fsmSystemRun+0x1d0>)
 8000a34:	f000 ff27 	bl	8001886 <HAL_GPIO_TogglePin>
			}
			break;
 8000a38:	e005      	b.n	8000a46 <fsmSystemRun+0x1be>
		default:
			break;
 8000a3a:	bf00      	nop
 8000a3c:	e004      	b.n	8000a48 <fsmSystemRun+0x1c0>
			break;
 8000a3e:	bf00      	nop
 8000a40:	e002      	b.n	8000a48 <fsmSystemRun+0x1c0>
			break;
 8000a42:	bf00      	nop
 8000a44:	e000      	b.n	8000a48 <fsmSystemRun+0x1c0>
			break;
 8000a46:	bf00      	nop
	}
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	200000f8 	.word	0x200000f8
 8000a54:	200000f4 	.word	0x200000f4
 8000a58:	40010800 	.word	0x40010800

08000a5c <initButton>:
static int currentStateButton[NUM_BUTTON];
int countLongPress[NUM_BUTTON];
static int shortPressFlag[NUM_BUTTON];
static int longPressFlag[NUM_BUTTON];

void initButton(){
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTON;i++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	e02a      	b.n	8000abe <initButton+0x62>
		keyread0[i] = BUTTON_IS_RELEASED;
 8000a68:	4a19      	ldr	r2, [pc, #100]	; (8000ad0 <initButton+0x74>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		keyread1[i] = BUTTON_IS_RELEASED;
 8000a72:	4a18      	ldr	r2, [pc, #96]	; (8000ad4 <initButton+0x78>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2101      	movs	r1, #1
 8000a78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		keyread2[i] = BUTTON_IS_RELEASED;
 8000a7c:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <initButton+0x7c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2101      	movs	r1, #1
 8000a82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		saveStateButton[i] = BUTTON_IS_RELEASED;
 8000a86:	4a15      	ldr	r2, [pc, #84]	; (8000adc <initButton+0x80>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		currentStateButton[i] = BUTTON_IS_RELEASED;
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <initButton+0x84>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2101      	movs	r1, #1
 8000a96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		countLongPress[i] = 0;
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <initButton+0x88>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		shortPressFlag[i] = 0;
 8000aa4:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <initButton+0x8c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		longPressFlag[i] = 0;
 8000aae:	4a0f      	ldr	r2, [pc, #60]	; (8000aec <initButton+0x90>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTON;i++) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3301      	adds	r3, #1
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	ddd1      	ble.n	8000a68 <initButton+0xc>
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	2000004c 	.word	0x2000004c
 8000ad4:	20000058 	.word	0x20000058
 8000ad8:	20000064 	.word	0x20000064
 8000adc:	20000070 	.word	0x20000070
 8000ae0:	2000007c 	.word	0x2000007c
 8000ae4:	200000a0 	.word	0x200000a0
 8000ae8:	20000088 	.word	0x20000088
 8000aec:	20000094 	.word	0x20000094

08000af0 <isButtonPress>:
int isButtonPress(int i){
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	if (shortPressFlag[i] == 1){
 8000af8:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <isButtonPress+0x30>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d106      	bne.n	8000b12 <isButtonPress+0x22>
		shortPressFlag[i] = 0;
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <isButtonPress+0x30>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2100      	movs	r1, #0
 8000b0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <isButtonPress+0x24>
	}
	return 0;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000088 	.word	0x20000088

08000b24 <isButtonPressLong>:
int isButtonPressLong(int i){
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	if (longPressFlag[i] == 1){
 8000b2c:	4a09      	ldr	r2, [pc, #36]	; (8000b54 <isButtonPressLong+0x30>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d106      	bne.n	8000b46 <isButtonPressLong+0x22>
		longPressFlag[i] = 0;
 8000b38:	4a06      	ldr	r2, [pc, #24]	; (8000b54 <isButtonPressLong+0x30>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e000      	b.n	8000b48 <isButtonPressLong+0x24>
	}
    return 0;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000094 	.word	0x20000094

08000b58 <readPin>:
void readPin(){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
	for (int i = 0;i < NUM_BUTTON ;i++){
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	e0dd      	b.n	8000d20 <readPin+0x1c8>
		keyread0[i] = keyread1[i];
 8000b64:	4a73      	ldr	r2, [pc, #460]	; (8000d34 <readPin+0x1dc>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b6c:	4972      	ldr	r1, [pc, #456]	; (8000d38 <readPin+0x1e0>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyread1[i] = keyread2[i];
 8000b74:	4a71      	ldr	r2, [pc, #452]	; (8000d3c <readPin+0x1e4>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b7c:	496d      	ldr	r1, [pc, #436]	; (8000d34 <readPin+0x1dc>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		switch (i)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d01f      	beq.n	8000bca <readPin+0x72>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	dc27      	bgt.n	8000be0 <readPin+0x88>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d003      	beq.n	8000b9e <readPin+0x46>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d00b      	beq.n	8000bb4 <readPin+0x5c>
			break;
		case 2:
			keyread2[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port,BUTTON3_Pin);
			break;
		default:
			break;
 8000b9c:	e020      	b.n	8000be0 <readPin+0x88>
			keyread2[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port,BUTTON1_Pin);
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4867      	ldr	r0, [pc, #412]	; (8000d40 <readPin+0x1e8>)
 8000ba2:	f000 fe41 	bl	8001828 <HAL_GPIO_ReadPin>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4a64      	ldr	r2, [pc, #400]	; (8000d3c <readPin+0x1e4>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000bb2:	e016      	b.n	8000be2 <readPin+0x8a>
			keyread2[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port,BUTTON2_Pin);
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	4862      	ldr	r0, [pc, #392]	; (8000d40 <readPin+0x1e8>)
 8000bb8:	f000 fe36 	bl	8001828 <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4a5e      	ldr	r2, [pc, #376]	; (8000d3c <readPin+0x1e4>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000bc8:	e00b      	b.n	8000be2 <readPin+0x8a>
			keyread2[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port,BUTTON3_Pin);
 8000bca:	2110      	movs	r1, #16
 8000bcc:	485c      	ldr	r0, [pc, #368]	; (8000d40 <readPin+0x1e8>)
 8000bce:	f000 fe2b 	bl	8001828 <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4a59      	ldr	r2, [pc, #356]	; (8000d3c <readPin+0x1e4>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000bde:	e000      	b.n	8000be2 <readPin+0x8a>
			break;
 8000be0:	bf00      	nop
		}
		if ((keyread1[i] == keyread0[i]) && (keyread1[i] == keyread2[i])){
 8000be2:	4a54      	ldr	r2, [pc, #336]	; (8000d34 <readPin+0x1dc>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bea:	4953      	ldr	r1, [pc, #332]	; (8000d38 <readPin+0x1e0>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	f040 8088 	bne.w	8000d08 <readPin+0x1b0>
 8000bf8:	4a4e      	ldr	r2, [pc, #312]	; (8000d34 <readPin+0x1dc>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c00:	494e      	ldr	r1, [pc, #312]	; (8000d3c <readPin+0x1e4>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d17d      	bne.n	8000d08 <readPin+0x1b0>
			currentStateButton[i] = keyread2[i];
 8000c0c:	4a4b      	ldr	r2, [pc, #300]	; (8000d3c <readPin+0x1e4>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c14:	494b      	ldr	r1, [pc, #300]	; (8000d44 <readPin+0x1ec>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			switch (saveStateButton[i])
 8000c1c:	4a4a      	ldr	r2, [pc, #296]	; (8000d48 <readPin+0x1f0>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d045      	beq.n	8000cb4 <readPin+0x15c>
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	dc6f      	bgt.n	8000d0c <readPin+0x1b4>
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00d      	beq.n	8000c4c <readPin+0xf4>
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d16b      	bne.n	8000d0c <readPin+0x1b4>
			{
			case BUTTON_IS_RELEASED:
				if (currentStateButton[i] == BUTTON_IS_PRESSED ){
 8000c34:	4a43      	ldr	r2, [pc, #268]	; (8000d44 <readPin+0x1ec>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d167      	bne.n	8000d10 <readPin+0x1b8>
					saveStateButton[i] = BUTTON_IS_PRESSED;
 8000c40:	4a41      	ldr	r2, [pc, #260]	; (8000d48 <readPin+0x1f0>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2100      	movs	r1, #0
 8000c46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				break;
 8000c4a:	e061      	b.n	8000d10 <readPin+0x1b8>

			case BUTTON_IS_PRESSED:
				countLongPress[i] ++;
 8000c4c:	4a3f      	ldr	r2, [pc, #252]	; (8000d4c <readPin+0x1f4>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c54:	1c5a      	adds	r2, r3, #1
 8000c56:	493d      	ldr	r1, [pc, #244]	; (8000d4c <readPin+0x1f4>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (currentStateButton[i] == BUTTON_IS_RELEASED ){
 8000c5e:	4a39      	ldr	r2, [pc, #228]	; (8000d44 <readPin+0x1ec>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d10e      	bne.n	8000c88 <readPin+0x130>
					shortPressFlag[i] = 1;
 8000c6a:	4a39      	ldr	r2, [pc, #228]	; (8000d50 <readPin+0x1f8>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2101      	movs	r1, #1
 8000c70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					saveStateButton[i] = BUTTON_IS_RELEASED;
 8000c74:	4a34      	ldr	r2, [pc, #208]	; (8000d48 <readPin+0x1f0>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2101      	movs	r1, #1
 8000c7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					countLongPress[i] = 0;
 8000c7e:	4a33      	ldr	r2, [pc, #204]	; (8000d4c <readPin+0x1f4>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2100      	movs	r1, #0
 8000c84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}

				if (countLongPress[i] >= 200){
 8000c88:	4a30      	ldr	r2, [pc, #192]	; (8000d4c <readPin+0x1f4>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c90:	2bc7      	cmp	r3, #199	; 0xc7
 8000c92:	dd3f      	ble.n	8000d14 <readPin+0x1bc>
					// todo
					longPressFlag[i] = 1;
 8000c94:	4a2f      	ldr	r2, [pc, #188]	; (8000d54 <readPin+0x1fc>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2101      	movs	r1, #1
 8000c9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					saveStateButton[i] = BUTTON_IS_LONG_PRESSED;
 8000c9e:	4a2a      	ldr	r2, [pc, #168]	; (8000d48 <readPin+0x1f0>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					countLongPress[i] = 0;
 8000ca8:	4a28      	ldr	r2, [pc, #160]	; (8000d4c <readPin+0x1f4>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2100      	movs	r1, #0
 8000cae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				break;
 8000cb2:	e02f      	b.n	8000d14 <readPin+0x1bc>

			case BUTTON_IS_LONG_PRESSED:
				countLongPress[i]++;
 8000cb4:	4a25      	ldr	r2, [pc, #148]	; (8000d4c <readPin+0x1f4>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	4923      	ldr	r1, [pc, #140]	; (8000d4c <readPin+0x1f4>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (countLongPress[i] >= 200 ){
 8000cc6:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <readPin+0x1f4>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cce:	2bc7      	cmp	r3, #199	; 0xc7
 8000cd0:	dd09      	ble.n	8000ce6 <readPin+0x18e>
					longPressFlag[i] = 1;
 8000cd2:	4a20      	ldr	r2, [pc, #128]	; (8000d54 <readPin+0x1fc>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					countLongPress[i] = 0;
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <readPin+0x1f4>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				if( currentStateButton[i] == BUTTON_IS_RELEASED){
 8000ce6:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <readPin+0x1ec>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d112      	bne.n	8000d18 <readPin+0x1c0>
					countLongPress[i] = 0;
 8000cf2:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <readPin+0x1f4>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					saveStateButton[i] = BUTTON_IS_RELEASED;
 8000cfc:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <readPin+0x1f0>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2101      	movs	r1, #1
 8000d02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				break;
 8000d06:	e007      	b.n	8000d18 <readPin+0x1c0>

			default:
				break;
			}
		}
 8000d08:	bf00      	nop
 8000d0a:	e006      	b.n	8000d1a <readPin+0x1c2>
				break;
 8000d0c:	bf00      	nop
 8000d0e:	e004      	b.n	8000d1a <readPin+0x1c2>
				break;
 8000d10:	bf00      	nop
 8000d12:	e002      	b.n	8000d1a <readPin+0x1c2>
				break;
 8000d14:	bf00      	nop
 8000d16:	e000      	b.n	8000d1a <readPin+0x1c2>
				break;
 8000d18:	bf00      	nop
	for (int i = 0;i < NUM_BUTTON ;i++){
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	f77f af1e 	ble.w	8000b64 <readPin+0xc>
	}
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000058 	.word	0x20000058
 8000d38:	2000004c 	.word	0x2000004c
 8000d3c:	20000064 	.word	0x20000064
 8000d40:	40010800 	.word	0x40010800
 8000d44:	2000007c 	.word	0x2000007c
 8000d48:	20000070 	.word	0x20000070
 8000d4c:	200000a0 	.word	0x200000a0
 8000d50:	20000088 	.word	0x20000088
 8000d54:	20000094 	.word	0x20000094

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5c:	f000 fa70 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d60:	f000 f82a 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d64:	f000 f8b0 	bl	8000ec8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d68:	f000 f862 	bl	8000e30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <main+0x54>)
 8000d6e:	f001 f9cf 	bl	8002110 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2140      	movs	r1, #64	; 0x40
 8000d76:	480e      	ldr	r0, [pc, #56]	; (8000db0 <main+0x58>)
 8000d78:	f000 fd6d 	bl	8001856 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,1);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2120      	movs	r1, #32
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <main+0x58>)
 8000d82:	f000 fd68 	bl	8001856 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8c:	4809      	ldr	r0, [pc, #36]	; (8000db4 <main+0x5c>)
 8000d8e:	f000 fd62 	bl	8001856 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,1);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d98:	4806      	ldr	r0, [pc, #24]	; (8000db4 <main+0x5c>)
 8000d9a:	f000 fd5c 	bl	8001856 <HAL_GPIO_WritePin>
  initButton();
 8000d9e:	f7ff fe5d 	bl	8000a5c <initButton>
  while (1)
  {
	  fsmSystemRun();
 8000da2:	f7ff fd71 	bl	8000888 <fsmSystemRun>
	  displayClock();
 8000da6:	f7ff fc49 	bl	800063c <displayClock>
	  fsmSystemRun();
 8000daa:	e7fa      	b.n	8000da2 <main+0x4a>
 8000dac:	200000ac 	.word	0x200000ac
 8000db0:	40010800 	.word	0x40010800
 8000db4:	40010c00 	.word	0x40010c00

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b090      	sub	sp, #64	; 0x40
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	2228      	movs	r2, #40	; 0x28
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 fd74 	bl	80028b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dde:	2301      	movs	r3, #1
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de2:	2310      	movs	r3, #16
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dea:	f107 0318 	add.w	r3, r7, #24
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fd62 	bl	80018b8 <HAL_RCC_OscConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dfa:	f000 f8f5 	bl	8000fe8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfe:	230f      	movs	r3, #15
 8000e00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 ffce 	bl	8001db8 <HAL_RCC_ClockConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e22:	f000 f8e1 	bl	8000fe8 <Error_Handler>
  }
}
 8000e26:	bf00      	nop
 8000e28:	3740      	adds	r7, #64	; 0x40
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e56:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e64:	2209      	movs	r2, #9
 8000e66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e74:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e76:	f001 f8fb 	bl	8002070 <HAL_TIM_Base_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e80:	f000 f8b2 	bl	8000fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e92:	f001 fa97 	bl	80023c4 <HAL_TIM_ConfigClockSource>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e9c:	f000 f8a4 	bl	8000fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000eae:	f001 fc6d 	bl	800278c <HAL_TIMEx_MasterConfigSynchronization>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000eb8:	f000 f896 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200000ac 	.word	0x200000ac

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000edc:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <MX_GPIO_Init+0xf8>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a37      	ldr	r2, [pc, #220]	; (8000fc0 <MX_GPIO_Init+0xf8>)
 8000ee2:	f043 0308 	orr.w	r3, r3, #8
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <MX_GPIO_Init+0xf8>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0308 	and.w	r3, r3, #8
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <MX_GPIO_Init+0xf8>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a31      	ldr	r2, [pc, #196]	; (8000fc0 <MX_GPIO_Init+0xf8>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <MX_GPIO_Init+0xf8>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <MX_GPIO_Init+0xf8>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a2b      	ldr	r2, [pc, #172]	; (8000fc0 <MX_GPIO_Init+0xf8>)
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <MX_GPIO_Init+0xf8>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0310 	and.w	r3, r3, #16
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN2_Pin|D_Pin|B_Pin|EN3_Pin
 8000f24:	2200      	movs	r2, #0
 8000f26:	f240 7139 	movw	r1, #1849	; 0x739
 8000f2a:	4826      	ldr	r0, [pc, #152]	; (8000fc4 <MX_GPIO_Init+0xfc>)
 8000f2c:	f000 fc93 	bl	8001856 <HAL_GPIO_WritePin>
                          |E_Pin|MODE1_Pin|C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, F_Pin|G_Pin|A_Pin|EN1_Pin
 8000f30:	2200      	movs	r2, #0
 8000f32:	f240 516c 	movw	r1, #1388	; 0x56c
 8000f36:	4824      	ldr	r0, [pc, #144]	; (8000fc8 <MX_GPIO_Init+0x100>)
 8000f38:	f000 fc8d 	bl	8001856 <HAL_GPIO_WritePin>
                          |LED_Pin|EN0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MODE2_Pin|MODE3_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2103      	movs	r1, #3
 8000f40:	4822      	ldr	r0, [pc, #136]	; (8000fcc <MX_GPIO_Init+0x104>)
 8000f42:	f000 fc88 	bl	8001856 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN2_Pin D_Pin B_Pin EN3_Pin
                           E_Pin MODE1_Pin C_Pin */
  GPIO_InitStruct.Pin = EN2_Pin|D_Pin|B_Pin|EN3_Pin
 8000f46:	f240 7339 	movw	r3, #1849	; 0x739
 8000f4a:	613b      	str	r3, [r7, #16]
                          |E_Pin|MODE1_Pin|C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4819      	ldr	r0, [pc, #100]	; (8000fc4 <MX_GPIO_Init+0xfc>)
 8000f60:	f000 fade 	bl	8001520 <HAL_GPIO_Init>

  /*Configure GPIO pins : F_Pin G_Pin A_Pin EN1_Pin
                           LED_Pin EN0_Pin */
  GPIO_InitStruct.Pin = F_Pin|G_Pin|A_Pin|EN1_Pin
 8000f64:	f240 536c 	movw	r3, #1388	; 0x56c
 8000f68:	613b      	str	r3, [r7, #16]
                          |LED_Pin|EN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4812      	ldr	r0, [pc, #72]	; (8000fc8 <MX_GPIO_Init+0x100>)
 8000f7e:	f000 facf 	bl	8001520 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE2_Pin MODE3_Pin */
  GPIO_InitStruct.Pin = MODE2_Pin|MODE3_Pin;
 8000f82:	2303      	movs	r3, #3
 8000f84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	4619      	mov	r1, r3
 8000f98:	480c      	ldr	r0, [pc, #48]	; (8000fcc <MX_GPIO_Init+0x104>)
 8000f9a:	f000 fac1 	bl	8001520 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000f9e:	2313      	movs	r3, #19
 8000fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_GPIO_Init+0x100>)
 8000fb2:	f000 fab5 	bl	8001520 <HAL_GPIO_Init>

}
 8000fb6:	bf00      	nop
 8000fb8:	3720      	adds	r7, #32
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010c00 	.word	0x40010c00
 8000fc8:	40010800 	.word	0x40010800
 8000fcc:	40011000 	.word	0x40011000

08000fd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	readPin();
 8000fd8:	f7ff fdbe 	bl	8000b58 <readPin>
	timerRun();
 8000fdc:	f000 f846 	bl	800106c <timerRun>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <Error_Handler+0x8>
	...

08000ff4 <setTimer1>:
int timer2_flag;
int timer3_flag;
int timer1_count;
int timer2_count;
int timer3_count;
void setTimer1(int duration){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	timer1_count = duration;
 8000ffc:	4a05      	ldr	r2, [pc, #20]	; (8001014 <setTimer1+0x20>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001002:	4b05      	ldr	r3, [pc, #20]	; (8001018 <setTimer1+0x24>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000104 	.word	0x20000104
 8001018:	200000f4 	.word	0x200000f4

0800101c <setTimer2>:
void setTimer2(int duration){
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	timer2_count = duration;
 8001024:	4a05      	ldr	r2, [pc, #20]	; (800103c <setTimer2+0x20>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <setTimer2+0x24>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000108 	.word	0x20000108
 8001040:	20000100 	.word	0x20000100

08001044 <setTimer3>:
void setTimer3(int duration){
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	timer3_count = duration;
 800104c:	4a05      	ldr	r2, [pc, #20]	; (8001064 <setTimer3+0x20>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <setTimer3+0x24>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200000fc 	.word	0x200000fc
 8001068:	200000f8 	.word	0x200000f8

0800106c <timerRun>:

void timerRun(){
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	timer1_count--;
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <timerRun+0x54>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3b01      	subs	r3, #1
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <timerRun+0x54>)
 8001078:	6013      	str	r3, [r2, #0]
	if (timer1_count <=0){
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <timerRun+0x54>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	dc02      	bgt.n	8001088 <timerRun+0x1c>
		timer1_flag = 1;
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <timerRun+0x58>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]
	}

	timer2_count--;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <timerRun+0x5c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3b01      	subs	r3, #1
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <timerRun+0x5c>)
 8001090:	6013      	str	r3, [r2, #0]
	if (timer2_count <=0){
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <timerRun+0x5c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	dc02      	bgt.n	80010a0 <timerRun+0x34>
		timer2_flag = 1;
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <timerRun+0x60>)
 800109c:	2201      	movs	r2, #1
 800109e:	601a      	str	r2, [r3, #0]
	}

	timer3_count--;
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <timerRun+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <timerRun+0x64>)
 80010a8:	6013      	str	r3, [r2, #0]
	if (timer3_count <=0){
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <timerRun+0x64>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	dc02      	bgt.n	80010b8 <timerRun+0x4c>
		timer3_flag = 1;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <timerRun+0x68>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
	}
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	20000104 	.word	0x20000104
 80010c4:	200000f4 	.word	0x200000f4
 80010c8:	20000108 	.word	0x20000108
 80010cc:	20000100 	.word	0x20000100
 80010d0:	200000fc 	.word	0x200000fc
 80010d4:	200000f8 	.word	0x200000f8

080010d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_MspInit+0x5c>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	4a14      	ldr	r2, [pc, #80]	; (8001134 <HAL_MspInit+0x5c>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6193      	str	r3, [r2, #24]
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_MspInit+0x5c>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_MspInit+0x5c>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <HAL_MspInit+0x5c>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	61d3      	str	r3, [r2, #28]
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_MspInit+0x5c>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_MspInit+0x60>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_MspInit+0x60>)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	40021000 	.word	0x40021000
 8001138:	40010000 	.word	0x40010000

0800113c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800114c:	d113      	bne.n	8001176 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_TIM_Base_MspInit+0x44>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <HAL_TIM_Base_MspInit+0x44>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_TIM_Base_MspInit+0x44>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	201c      	movs	r0, #28
 800116c:	f000 f9a1 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001170:	201c      	movs	r0, #28
 8001172:	f000 f9ba 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <NMI_Handler+0x4>

0800118a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <MemManage_Handler+0x4>

08001196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ca:	f000 f87f 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <TIM2_IRQHandler+0x10>)
 80011da:	f000 ffeb 	bl	80021b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000ac 	.word	0x200000ac

080011e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f4:	f7ff fff8 	bl	80011e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f8:	480b      	ldr	r0, [pc, #44]	; (8001228 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011fa:	490c      	ldr	r1, [pc, #48]	; (800122c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011fc:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a09      	ldr	r2, [pc, #36]	; (8001234 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001210:	4c09      	ldr	r4, [pc, #36]	; (8001238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121e:	f001 fb25 	bl	800286c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001222:	f7ff fd99 	bl	8000d58 <main>
  bx lr
 8001226:	4770      	bx	lr
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001230:	08002908 	.word	0x08002908
  ldr r2, =_sbss
 8001234:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001238:	20000110 	.word	0x20000110

0800123c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC1_2_IRQHandler>
	...

08001240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_Init+0x28>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_Init+0x28>)
 800124a:	f043 0310 	orr.w	r3, r3, #16
 800124e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f923 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	200f      	movs	r0, #15
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff ff3c 	bl	80010d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40022000 	.word	0x40022000

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f93b 	bl	8001506 <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 f903 	bl	80014b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000020 	.word	0x20000020
 80012c4:	20000028 	.word	0x20000028
 80012c8:	20000024 	.word	0x20000024

080012cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_IncTick+0x1c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_IncTick+0x20>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a03      	ldr	r2, [pc, #12]	; (80012ec <HAL_IncTick+0x20>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	20000028 	.word	0x20000028
 80012ec:	2000010c 	.word	0x2000010c

080012f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b02      	ldr	r3, [pc, #8]	; (8001300 <HAL_GetTick+0x10>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	2000010c 	.word	0x2000010c

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4906      	ldr	r1, [pc, #24]	; (800139c <__NVIC_EnableIRQ+0x34>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	; (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001468:	d301      	bcc.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e00f      	b.n	800148e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <SysTick_Config+0x40>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f7ff ff90 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <SysTick_Config+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SysTick_Config+0x40>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff2d 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c4:	f7ff ff42 	bl	800134c <__NVIC_GetPriorityGrouping>
 80014c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff90 	bl	80013f4 <NVIC_EncodePriority>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5f 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff35 	bl	8001368 <__NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffa2 	bl	8001458 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001520:	b480      	push	{r7}
 8001522:	b08b      	sub	sp, #44	; 0x2c
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001532:	e169      	b.n	8001808 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001534:	2201      	movs	r2, #1
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	429a      	cmp	r2, r3
 800154e:	f040 8158 	bne.w	8001802 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4a9a      	ldr	r2, [pc, #616]	; (80017c0 <HAL_GPIO_Init+0x2a0>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d05e      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 800155c:	4a98      	ldr	r2, [pc, #608]	; (80017c0 <HAL_GPIO_Init+0x2a0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d875      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 8001562:	4a98      	ldr	r2, [pc, #608]	; (80017c4 <HAL_GPIO_Init+0x2a4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d058      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 8001568:	4a96      	ldr	r2, [pc, #600]	; (80017c4 <HAL_GPIO_Init+0x2a4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d86f      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 800156e:	4a96      	ldr	r2, [pc, #600]	; (80017c8 <HAL_GPIO_Init+0x2a8>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d052      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 8001574:	4a94      	ldr	r2, [pc, #592]	; (80017c8 <HAL_GPIO_Init+0x2a8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d869      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 800157a:	4a94      	ldr	r2, [pc, #592]	; (80017cc <HAL_GPIO_Init+0x2ac>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d04c      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 8001580:	4a92      	ldr	r2, [pc, #584]	; (80017cc <HAL_GPIO_Init+0x2ac>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d863      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 8001586:	4a92      	ldr	r2, [pc, #584]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d046      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 800158c:	4a90      	ldr	r2, [pc, #576]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d85d      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 8001592:	2b12      	cmp	r3, #18
 8001594:	d82a      	bhi.n	80015ec <HAL_GPIO_Init+0xcc>
 8001596:	2b12      	cmp	r3, #18
 8001598:	d859      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 800159a:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <HAL_GPIO_Init+0x80>)
 800159c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a0:	0800161b 	.word	0x0800161b
 80015a4:	080015f5 	.word	0x080015f5
 80015a8:	08001607 	.word	0x08001607
 80015ac:	08001649 	.word	0x08001649
 80015b0:	0800164f 	.word	0x0800164f
 80015b4:	0800164f 	.word	0x0800164f
 80015b8:	0800164f 	.word	0x0800164f
 80015bc:	0800164f 	.word	0x0800164f
 80015c0:	0800164f 	.word	0x0800164f
 80015c4:	0800164f 	.word	0x0800164f
 80015c8:	0800164f 	.word	0x0800164f
 80015cc:	0800164f 	.word	0x0800164f
 80015d0:	0800164f 	.word	0x0800164f
 80015d4:	0800164f 	.word	0x0800164f
 80015d8:	0800164f 	.word	0x0800164f
 80015dc:	0800164f 	.word	0x0800164f
 80015e0:	0800164f 	.word	0x0800164f
 80015e4:	080015fd 	.word	0x080015fd
 80015e8:	08001611 	.word	0x08001611
 80015ec:	4a79      	ldr	r2, [pc, #484]	; (80017d4 <HAL_GPIO_Init+0x2b4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015f2:	e02c      	b.n	800164e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	623b      	str	r3, [r7, #32]
          break;
 80015fa:	e029      	b.n	8001650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	3304      	adds	r3, #4
 8001602:	623b      	str	r3, [r7, #32]
          break;
 8001604:	e024      	b.n	8001650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	3308      	adds	r3, #8
 800160c:	623b      	str	r3, [r7, #32]
          break;
 800160e:	e01f      	b.n	8001650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	330c      	adds	r3, #12
 8001616:	623b      	str	r3, [r7, #32]
          break;
 8001618:	e01a      	b.n	8001650 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001622:	2304      	movs	r3, #4
 8001624:	623b      	str	r3, [r7, #32]
          break;
 8001626:	e013      	b.n	8001650 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001630:	2308      	movs	r3, #8
 8001632:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	611a      	str	r2, [r3, #16]
          break;
 800163a:	e009      	b.n	8001650 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800163c:	2308      	movs	r3, #8
 800163e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	615a      	str	r2, [r3, #20]
          break;
 8001646:	e003      	b.n	8001650 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
          break;
 800164c:	e000      	b.n	8001650 <HAL_GPIO_Init+0x130>
          break;
 800164e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2bff      	cmp	r3, #255	; 0xff
 8001654:	d801      	bhi.n	800165a <HAL_GPIO_Init+0x13a>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	e001      	b.n	800165e <HAL_GPIO_Init+0x13e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3304      	adds	r3, #4
 800165e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2bff      	cmp	r3, #255	; 0xff
 8001664:	d802      	bhi.n	800166c <HAL_GPIO_Init+0x14c>
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	e002      	b.n	8001672 <HAL_GPIO_Init+0x152>
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	3b08      	subs	r3, #8
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	210f      	movs	r1, #15
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	401a      	ands	r2, r3
 8001684:	6a39      	ldr	r1, [r7, #32]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	fa01 f303 	lsl.w	r3, r1, r3
 800168c:	431a      	orrs	r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 80b1 	beq.w	8001802 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016a0:	4b4d      	ldr	r3, [pc, #308]	; (80017d8 <HAL_GPIO_Init+0x2b8>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a4c      	ldr	r2, [pc, #304]	; (80017d8 <HAL_GPIO_Init+0x2b8>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b4a      	ldr	r3, [pc, #296]	; (80017d8 <HAL_GPIO_Init+0x2b8>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016b8:	4a48      	ldr	r2, [pc, #288]	; (80017dc <HAL_GPIO_Init+0x2bc>)
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a40      	ldr	r2, [pc, #256]	; (80017e0 <HAL_GPIO_Init+0x2c0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d013      	beq.n	800170c <HAL_GPIO_Init+0x1ec>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a3f      	ldr	r2, [pc, #252]	; (80017e4 <HAL_GPIO_Init+0x2c4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d00d      	beq.n	8001708 <HAL_GPIO_Init+0x1e8>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a3e      	ldr	r2, [pc, #248]	; (80017e8 <HAL_GPIO_Init+0x2c8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d007      	beq.n	8001704 <HAL_GPIO_Init+0x1e4>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a3d      	ldr	r2, [pc, #244]	; (80017ec <HAL_GPIO_Init+0x2cc>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d101      	bne.n	8001700 <HAL_GPIO_Init+0x1e0>
 80016fc:	2303      	movs	r3, #3
 80016fe:	e006      	b.n	800170e <HAL_GPIO_Init+0x1ee>
 8001700:	2304      	movs	r3, #4
 8001702:	e004      	b.n	800170e <HAL_GPIO_Init+0x1ee>
 8001704:	2302      	movs	r3, #2
 8001706:	e002      	b.n	800170e <HAL_GPIO_Init+0x1ee>
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <HAL_GPIO_Init+0x1ee>
 800170c:	2300      	movs	r3, #0
 800170e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001710:	f002 0203 	and.w	r2, r2, #3
 8001714:	0092      	lsls	r2, r2, #2
 8001716:	4093      	lsls	r3, r2
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	4313      	orrs	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800171e:	492f      	ldr	r1, [pc, #188]	; (80017dc <HAL_GPIO_Init+0x2bc>)
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	3302      	adds	r3, #2
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	492c      	ldr	r1, [pc, #176]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	608b      	str	r3, [r1, #8]
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001746:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	43db      	mvns	r3, r3
 800174e:	4928      	ldr	r1, [pc, #160]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001750:	4013      	ands	r3, r2
 8001752:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d006      	beq.n	800176e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	4922      	ldr	r1, [pc, #136]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
 800176c:	e006      	b.n	800177c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	43db      	mvns	r3, r3
 8001776:	491e      	ldr	r1, [pc, #120]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001778:	4013      	ands	r3, r2
 800177a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d006      	beq.n	8001796 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	4918      	ldr	r1, [pc, #96]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
 8001794:	e006      	b.n	80017a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	43db      	mvns	r3, r3
 800179e:	4914      	ldr	r1, [pc, #80]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d021      	beq.n	80017f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	490e      	ldr	r1, [pc, #56]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]
 80017bc:	e021      	b.n	8001802 <HAL_GPIO_Init+0x2e2>
 80017be:	bf00      	nop
 80017c0:	10320000 	.word	0x10320000
 80017c4:	10310000 	.word	0x10310000
 80017c8:	10220000 	.word	0x10220000
 80017cc:	10210000 	.word	0x10210000
 80017d0:	10120000 	.word	0x10120000
 80017d4:	10110000 	.word	0x10110000
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000
 80017e0:	40010800 	.word	0x40010800
 80017e4:	40010c00 	.word	0x40010c00
 80017e8:	40011000 	.word	0x40011000
 80017ec:	40011400 	.word	0x40011400
 80017f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_GPIO_Init+0x304>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	4909      	ldr	r1, [pc, #36]	; (8001824 <HAL_GPIO_Init+0x304>)
 80017fe:	4013      	ands	r3, r2
 8001800:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	3301      	adds	r3, #1
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	fa22 f303 	lsr.w	r3, r2, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	f47f ae8e 	bne.w	8001534 <HAL_GPIO_Init+0x14>
  }
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	372c      	adds	r7, #44	; 0x2c
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	40010400 	.word	0x40010400

08001828 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	887b      	ldrh	r3, [r7, #2]
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d002      	beq.n	8001846 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
 8001844:	e001      	b.n	800184a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	460b      	mov	r3, r1
 8001860:	807b      	strh	r3, [r7, #2]
 8001862:	4613      	mov	r3, r2
 8001864:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001866:	787b      	ldrb	r3, [r7, #1]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186c:	887a      	ldrh	r2, [r7, #2]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001872:	e003      	b.n	800187c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001874:	887b      	ldrh	r3, [r7, #2]
 8001876:	041a      	lsls	r2, r3, #16
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	611a      	str	r2, [r3, #16]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001886:	b480      	push	{r7}
 8001888:	b085      	sub	sp, #20
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001898:	887a      	ldrh	r2, [r7, #2]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4013      	ands	r3, r2
 800189e:	041a      	lsls	r2, r3, #16
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	400b      	ands	r3, r1
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	611a      	str	r2, [r3, #16]
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e26c      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8087 	beq.w	80019e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018d8:	4b92      	ldr	r3, [pc, #584]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d00c      	beq.n	80018fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e4:	4b8f      	ldr	r3, [pc, #572]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d112      	bne.n	8001916 <HAL_RCC_OscConfig+0x5e>
 80018f0:	4b8c      	ldr	r3, [pc, #560]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fc:	d10b      	bne.n	8001916 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fe:	4b89      	ldr	r3, [pc, #548]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d06c      	beq.n	80019e4 <HAL_RCC_OscConfig+0x12c>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d168      	bne.n	80019e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e246      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x76>
 8001920:	4b80      	ldr	r3, [pc, #512]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a7f      	ldr	r2, [pc, #508]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	e02e      	b.n	800198c <HAL_RCC_OscConfig+0xd4>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x98>
 8001936:	4b7b      	ldr	r3, [pc, #492]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a7a      	ldr	r2, [pc, #488]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 800193c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b78      	ldr	r3, [pc, #480]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a77      	ldr	r2, [pc, #476]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001948:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e01d      	b.n	800198c <HAL_RCC_OscConfig+0xd4>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0xbc>
 800195a:	4b72      	ldr	r3, [pc, #456]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a71      	ldr	r2, [pc, #452]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b6f      	ldr	r3, [pc, #444]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a6e      	ldr	r2, [pc, #440]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 800196c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e00b      	b.n	800198c <HAL_RCC_OscConfig+0xd4>
 8001974:	4b6b      	ldr	r3, [pc, #428]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a6a      	ldr	r2, [pc, #424]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 800197a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b68      	ldr	r3, [pc, #416]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a67      	ldr	r2, [pc, #412]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d013      	beq.n	80019bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fcac 	bl	80012f0 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff fca8 	bl	80012f0 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e1fa      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b5d      	ldr	r3, [pc, #372]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0xe4>
 80019ba:	e014      	b.n	80019e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff fc98 	bl	80012f0 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff fc94 	bl	80012f0 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e1e6      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d6:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x10c>
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d063      	beq.n	8001aba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019f2:	4b4c      	ldr	r3, [pc, #304]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019fe:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d11c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x18c>
 8001a0a:	4b46      	ldr	r3, [pc, #280]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d116      	bne.n	8001a44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a16:	4b43      	ldr	r3, [pc, #268]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <HAL_RCC_OscConfig+0x176>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e1ba      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4939      	ldr	r1, [pc, #228]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a42:	e03a      	b.n	8001aba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d020      	beq.n	8001a8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a4c:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a52:	f7ff fc4d 	bl	80012f0 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5a:	f7ff fc49 	bl	80012f0 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e19b      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4927      	ldr	r1, [pc, #156]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	600b      	str	r3, [r1, #0]
 8001a8c:	e015      	b.n	8001aba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8e:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff fc2c 	bl	80012f0 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fc28 	bl	80012f0 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e17a      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d03a      	beq.n	8001b3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d019      	beq.n	8001b02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad4:	f7ff fc0c 	bl	80012f0 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001adc:	f7ff fc08 	bl	80012f0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e15a      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001afa:	2001      	movs	r0, #1
 8001afc:	f000 fa9a 	bl	8002034 <RCC_Delay>
 8001b00:	e01c      	b.n	8001b3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b08:	f7ff fbf2 	bl	80012f0 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0e:	e00f      	b.n	8001b30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b10:	f7ff fbee 	bl	80012f0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d908      	bls.n	8001b30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e140      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
 8001b28:	42420000 	.word	0x42420000
 8001b2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b30:	4b9e      	ldr	r3, [pc, #632]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1e9      	bne.n	8001b10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80a6 	beq.w	8001c96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4e:	4b97      	ldr	r3, [pc, #604]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10d      	bne.n	8001b76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	4b94      	ldr	r3, [pc, #592]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4a93      	ldr	r2, [pc, #588]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	61d3      	str	r3, [r2, #28]
 8001b66:	4b91      	ldr	r3, [pc, #580]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b72:	2301      	movs	r3, #1
 8001b74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b76:	4b8e      	ldr	r3, [pc, #568]	; (8001db0 <HAL_RCC_OscConfig+0x4f8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d118      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b82:	4b8b      	ldr	r3, [pc, #556]	; (8001db0 <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a8a      	ldr	r2, [pc, #552]	; (8001db0 <HAL_RCC_OscConfig+0x4f8>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fbaf 	bl	80012f0 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b96:	f7ff fbab 	bl	80012f0 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b64      	cmp	r3, #100	; 0x64
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e0fd      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	4b81      	ldr	r3, [pc, #516]	; (8001db0 <HAL_RCC_OscConfig+0x4f8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d106      	bne.n	8001bca <HAL_RCC_OscConfig+0x312>
 8001bbc:	4b7b      	ldr	r3, [pc, #492]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4a7a      	ldr	r2, [pc, #488]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6213      	str	r3, [r2, #32]
 8001bc8:	e02d      	b.n	8001c26 <HAL_RCC_OscConfig+0x36e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0x334>
 8001bd2:	4b76      	ldr	r3, [pc, #472]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4a75      	ldr	r2, [pc, #468]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	6213      	str	r3, [r2, #32]
 8001bde:	4b73      	ldr	r3, [pc, #460]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4a72      	ldr	r2, [pc, #456]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	6213      	str	r3, [r2, #32]
 8001bea:	e01c      	b.n	8001c26 <HAL_RCC_OscConfig+0x36e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d10c      	bne.n	8001c0e <HAL_RCC_OscConfig+0x356>
 8001bf4:	4b6d      	ldr	r3, [pc, #436]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4a6c      	ldr	r2, [pc, #432]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	6213      	str	r3, [r2, #32]
 8001c00:	4b6a      	ldr	r3, [pc, #424]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a69      	ldr	r2, [pc, #420]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6213      	str	r3, [r2, #32]
 8001c0c:	e00b      	b.n	8001c26 <HAL_RCC_OscConfig+0x36e>
 8001c0e:	4b67      	ldr	r3, [pc, #412]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	4a66      	ldr	r2, [pc, #408]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	6213      	str	r3, [r2, #32]
 8001c1a:	4b64      	ldr	r3, [pc, #400]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4a63      	ldr	r2, [pc, #396]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	f023 0304 	bic.w	r3, r3, #4
 8001c24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d015      	beq.n	8001c5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff fb5f 	bl	80012f0 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c34:	e00a      	b.n	8001c4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7ff fb5b 	bl	80012f0 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0ab      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4c:	4b57      	ldr	r3, [pc, #348]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0ee      	beq.n	8001c36 <HAL_RCC_OscConfig+0x37e>
 8001c58:	e014      	b.n	8001c84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5a:	f7ff fb49 	bl	80012f0 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c60:	e00a      	b.n	8001c78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c62:	f7ff fb45 	bl	80012f0 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e095      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c78:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1ee      	bne.n	8001c62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d105      	bne.n	8001c96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c8a:	4b48      	ldr	r3, [pc, #288]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4a47      	ldr	r2, [pc, #284]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8081 	beq.w	8001da2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca0:	4b42      	ldr	r3, [pc, #264]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d061      	beq.n	8001d70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d146      	bne.n	8001d42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb4:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <HAL_RCC_OscConfig+0x4fc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff fb19 	bl	80012f0 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7ff fb15 	bl	80012f0 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e067      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd4:	4b35      	ldr	r3, [pc, #212]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce8:	d108      	bne.n	8001cfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cea:	4b30      	ldr	r3, [pc, #192]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	492d      	ldr	r1, [pc, #180]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a19      	ldr	r1, [r3, #32]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	4927      	ldr	r1, [pc, #156]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <HAL_RCC_OscConfig+0x4fc>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7ff fae9 	bl	80012f0 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d22:	f7ff fae5 	bl	80012f0 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e037      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x46a>
 8001d40:	e02f      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d42:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <HAL_RCC_OscConfig+0x4fc>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff fad2 	bl	80012f0 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d50:	f7ff face 	bl	80012f0 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e020      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x498>
 8001d6e:	e018      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e013      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d106      	bne.n	8001d9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40007000 	.word	0x40007000
 8001db4:	42420060 	.word	0x42420060

08001db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0d0      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d910      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 0207 	bic.w	r2, r3, #7
 8001de2:	4965      	ldr	r1, [pc, #404]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0b8      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e14:	4b59      	ldr	r3, [pc, #356]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	494d      	ldr	r1, [pc, #308]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d040      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d115      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e07f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e76:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e073      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e06b      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	4b39      	ldr	r3, [pc, #228]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4936      	ldr	r1, [pc, #216]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea8:	f7ff fa22 	bl	80012f0 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7ff fa1e 	bl	80012f0 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e053      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 020c 	and.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1eb      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d210      	bcs.n	8001f08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 0207 	bic.w	r2, r3, #7
 8001eee:	4922      	ldr	r1, [pc, #136]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e032      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4916      	ldr	r1, [pc, #88]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	490e      	ldr	r1, [pc, #56]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f46:	f000 f821 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	490a      	ldr	r1, [pc, #40]	; (8001f80 <HAL_RCC_ClockConfig+0x1c8>)
 8001f58:	5ccb      	ldrb	r3, [r1, r3]
 8001f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1cc>)
 8001f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_ClockConfig+0x1d0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff f980 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40022000 	.word	0x40022000
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	080028dc 	.word	0x080028dc
 8001f84:	20000020 	.word	0x20000020
 8001f88:	20000024 	.word	0x20000024

08001f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d002      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x30>
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d003      	beq.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001fba:	e027      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fbe:	613b      	str	r3, [r7, #16]
      break;
 8001fc0:	e027      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	0c9b      	lsrs	r3, r3, #18
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	4a17      	ldr	r2, [pc, #92]	; (8002028 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fcc:	5cd3      	ldrb	r3, [r2, r3]
 8001fce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d010      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	0c5b      	lsrs	r3, r3, #17
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	4a11      	ldr	r2, [pc, #68]	; (800202c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fee:	fb02 f203 	mul.w	r2, r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e004      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0c      	ldr	r2, [pc, #48]	; (8002030 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002000:	fb02 f303 	mul.w	r3, r2, r3
 8002004:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	613b      	str	r3, [r7, #16]
      break;
 800200a:	e002      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_RCC_GetSysClockFreq+0x98>)
 800200e:	613b      	str	r3, [r7, #16]
      break;
 8002010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002012:	693b      	ldr	r3, [r7, #16]
}
 8002014:	4618      	mov	r0, r3
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	007a1200 	.word	0x007a1200
 8002028:	080028ec 	.word	0x080028ec
 800202c:	080028fc 	.word	0x080028fc
 8002030:	003d0900 	.word	0x003d0900

08002034 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800203c:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <RCC_Delay+0x34>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0a      	ldr	r2, [pc, #40]	; (800206c <RCC_Delay+0x38>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	0a5b      	lsrs	r3, r3, #9
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002050:	bf00      	nop
  }
  while (Delay --);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1e5a      	subs	r2, r3, #1
 8002056:	60fa      	str	r2, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f9      	bne.n	8002050 <RCC_Delay+0x1c>
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	20000020 	.word	0x20000020
 800206c:	10624dd3 	.word	0x10624dd3

08002070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e041      	b.n	8002106 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d106      	bne.n	800209c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff f850 	bl	800113c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3304      	adds	r3, #4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4610      	mov	r0, r2
 80020b0:	f000 fa74 	bl	800259c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d001      	beq.n	8002128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e03a      	b.n	800219e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <HAL_TIM_Base_Start_IT+0x98>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00e      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x58>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002152:	d009      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x58>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <HAL_TIM_Base_Start_IT+0x9c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d004      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x58>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d111      	bne.n	800218c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b06      	cmp	r3, #6
 8002178:	d010      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 0201 	orr.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218a:	e007      	b.n	800219c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	40012c00 	.word	0x40012c00
 80021ac:	40000400 	.word	0x40000400
 80021b0:	40000800 	.word	0x40000800

080021b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d122      	bne.n	8002210 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d11b      	bne.n	8002210 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0202 	mvn.w	r2, #2
 80021e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f9b4 	bl	8002564 <HAL_TIM_IC_CaptureCallback>
 80021fc:	e005      	b.n	800220a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f9a7 	bl	8002552 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f9b6 	bl	8002576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	2b04      	cmp	r3, #4
 800221c:	d122      	bne.n	8002264 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b04      	cmp	r3, #4
 800222a:	d11b      	bne.n	8002264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0204 	mvn.w	r2, #4
 8002234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2202      	movs	r2, #2
 800223a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f98a 	bl	8002564 <HAL_TIM_IC_CaptureCallback>
 8002250:	e005      	b.n	800225e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f97d 	bl	8002552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f98c 	bl	8002576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b08      	cmp	r3, #8
 8002270:	d122      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b08      	cmp	r3, #8
 800227e:	d11b      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0208 	mvn.w	r2, #8
 8002288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2204      	movs	r2, #4
 800228e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f960 	bl	8002564 <HAL_TIM_IC_CaptureCallback>
 80022a4:	e005      	b.n	80022b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f953 	bl	8002552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f962 	bl	8002576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d122      	bne.n	800230c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d11b      	bne.n	800230c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0210 	mvn.w	r2, #16
 80022dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2208      	movs	r2, #8
 80022e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f936 	bl	8002564 <HAL_TIM_IC_CaptureCallback>
 80022f8:	e005      	b.n	8002306 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f929 	bl	8002552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f938 	bl	8002576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b01      	cmp	r3, #1
 8002318:	d10e      	bne.n	8002338 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d107      	bne.n	8002338 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0201 	mvn.w	r2, #1
 8002330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fe fe4c 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002342:	2b80      	cmp	r3, #128	; 0x80
 8002344:	d10e      	bne.n	8002364 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002350:	2b80      	cmp	r3, #128	; 0x80
 8002352:	d107      	bne.n	8002364 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800235c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fa7b 	bl	800285a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236e:	2b40      	cmp	r3, #64	; 0x40
 8002370:	d10e      	bne.n	8002390 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	d107      	bne.n	8002390 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f8fc 	bl	8002588 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b20      	cmp	r3, #32
 800239c:	d10e      	bne.n	80023bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d107      	bne.n	80023bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0220 	mvn.w	r2, #32
 80023b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fa46 	bl	8002848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_TIM_ConfigClockSource+0x1c>
 80023dc:	2302      	movs	r3, #2
 80023de:	e0b4      	b.n	800254a <HAL_TIM_ConfigClockSource+0x186>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002406:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002418:	d03e      	beq.n	8002498 <HAL_TIM_ConfigClockSource+0xd4>
 800241a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241e:	f200 8087 	bhi.w	8002530 <HAL_TIM_ConfigClockSource+0x16c>
 8002422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002426:	f000 8086 	beq.w	8002536 <HAL_TIM_ConfigClockSource+0x172>
 800242a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800242e:	d87f      	bhi.n	8002530 <HAL_TIM_ConfigClockSource+0x16c>
 8002430:	2b70      	cmp	r3, #112	; 0x70
 8002432:	d01a      	beq.n	800246a <HAL_TIM_ConfigClockSource+0xa6>
 8002434:	2b70      	cmp	r3, #112	; 0x70
 8002436:	d87b      	bhi.n	8002530 <HAL_TIM_ConfigClockSource+0x16c>
 8002438:	2b60      	cmp	r3, #96	; 0x60
 800243a:	d050      	beq.n	80024de <HAL_TIM_ConfigClockSource+0x11a>
 800243c:	2b60      	cmp	r3, #96	; 0x60
 800243e:	d877      	bhi.n	8002530 <HAL_TIM_ConfigClockSource+0x16c>
 8002440:	2b50      	cmp	r3, #80	; 0x50
 8002442:	d03c      	beq.n	80024be <HAL_TIM_ConfigClockSource+0xfa>
 8002444:	2b50      	cmp	r3, #80	; 0x50
 8002446:	d873      	bhi.n	8002530 <HAL_TIM_ConfigClockSource+0x16c>
 8002448:	2b40      	cmp	r3, #64	; 0x40
 800244a:	d058      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x13a>
 800244c:	2b40      	cmp	r3, #64	; 0x40
 800244e:	d86f      	bhi.n	8002530 <HAL_TIM_ConfigClockSource+0x16c>
 8002450:	2b30      	cmp	r3, #48	; 0x30
 8002452:	d064      	beq.n	800251e <HAL_TIM_ConfigClockSource+0x15a>
 8002454:	2b30      	cmp	r3, #48	; 0x30
 8002456:	d86b      	bhi.n	8002530 <HAL_TIM_ConfigClockSource+0x16c>
 8002458:	2b20      	cmp	r3, #32
 800245a:	d060      	beq.n	800251e <HAL_TIM_ConfigClockSource+0x15a>
 800245c:	2b20      	cmp	r3, #32
 800245e:	d867      	bhi.n	8002530 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b00      	cmp	r3, #0
 8002462:	d05c      	beq.n	800251e <HAL_TIM_ConfigClockSource+0x15a>
 8002464:	2b10      	cmp	r3, #16
 8002466:	d05a      	beq.n	800251e <HAL_TIM_ConfigClockSource+0x15a>
 8002468:	e062      	b.n	8002530 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6899      	ldr	r1, [r3, #8]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f000 f968 	bl	800274e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800248c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	609a      	str	r2, [r3, #8]
      break;
 8002496:	e04f      	b.n	8002538 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	6899      	ldr	r1, [r3, #8]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f000 f951 	bl	800274e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ba:	609a      	str	r2, [r3, #8]
      break;
 80024bc:	e03c      	b.n	8002538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6859      	ldr	r1, [r3, #4]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	461a      	mov	r2, r3
 80024cc:	f000 f8c8 	bl	8002660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2150      	movs	r1, #80	; 0x50
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 f91f 	bl	800271a <TIM_ITRx_SetConfig>
      break;
 80024dc:	e02c      	b.n	8002538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	461a      	mov	r2, r3
 80024ec:	f000 f8e6 	bl	80026bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2160      	movs	r1, #96	; 0x60
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f90f 	bl	800271a <TIM_ITRx_SetConfig>
      break;
 80024fc:	e01c      	b.n	8002538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6859      	ldr	r1, [r3, #4]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	461a      	mov	r2, r3
 800250c:	f000 f8a8 	bl	8002660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2140      	movs	r1, #64	; 0x40
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f8ff 	bl	800271a <TIM_ITRx_SetConfig>
      break;
 800251c:	e00c      	b.n	8002538 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4619      	mov	r1, r3
 8002528:	4610      	mov	r0, r2
 800252a:	f000 f8f6 	bl	800271a <TIM_ITRx_SetConfig>
      break;
 800252e:	e003      	b.n	8002538 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
      break;
 8002534:	e000      	b.n	8002538 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002536:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002548:	7bfb      	ldrb	r3, [r7, #15]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
	...

0800259c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a29      	ldr	r2, [pc, #164]	; (8002654 <TIM_Base_SetConfig+0xb8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d00b      	beq.n	80025cc <TIM_Base_SetConfig+0x30>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ba:	d007      	beq.n	80025cc <TIM_Base_SetConfig+0x30>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a26      	ldr	r2, [pc, #152]	; (8002658 <TIM_Base_SetConfig+0xbc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d003      	beq.n	80025cc <TIM_Base_SetConfig+0x30>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a25      	ldr	r2, [pc, #148]	; (800265c <TIM_Base_SetConfig+0xc0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d108      	bne.n	80025de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a1c      	ldr	r2, [pc, #112]	; (8002654 <TIM_Base_SetConfig+0xb8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00b      	beq.n	80025fe <TIM_Base_SetConfig+0x62>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ec:	d007      	beq.n	80025fe <TIM_Base_SetConfig+0x62>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a19      	ldr	r2, [pc, #100]	; (8002658 <TIM_Base_SetConfig+0xbc>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d003      	beq.n	80025fe <TIM_Base_SetConfig+0x62>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a18      	ldr	r2, [pc, #96]	; (800265c <TIM_Base_SetConfig+0xc0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d108      	bne.n	8002610 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a07      	ldr	r2, [pc, #28]	; (8002654 <TIM_Base_SetConfig+0xb8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d103      	bne.n	8002644 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	615a      	str	r2, [r3, #20]
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	40012c00 	.word	0x40012c00
 8002658:	40000400 	.word	0x40000400
 800265c:	40000800 	.word	0x40000800

08002660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	f023 0201 	bic.w	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800268a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f023 030a 	bic.w	r3, r3, #10
 800269c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	621a      	str	r2, [r3, #32]
}
 80026b2:	bf00      	nop
 80026b4:	371c      	adds	r7, #28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	f023 0210 	bic.w	r2, r3, #16
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	031b      	lsls	r3, r3, #12
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	621a      	str	r2, [r3, #32]
}
 8002710:	bf00      	nop
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800271a:	b480      	push	{r7}
 800271c:	b085      	sub	sp, #20
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	f043 0307 	orr.w	r3, r3, #7
 800273c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	609a      	str	r2, [r3, #8]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800274e:	b480      	push	{r7}
 8002750:	b087      	sub	sp, #28
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002768:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	021a      	lsls	r2, r3, #8
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	431a      	orrs	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	4313      	orrs	r3, r2
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	609a      	str	r2, [r3, #8]
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e046      	b.n	8002832 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a16      	ldr	r2, [pc, #88]	; (800283c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d00e      	beq.n	8002806 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f0:	d009      	beq.n	8002806 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a12      	ldr	r2, [pc, #72]	; (8002840 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d004      	beq.n	8002806 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a10      	ldr	r2, [pc, #64]	; (8002844 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d10c      	bne.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800280c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	4313      	orrs	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	40012c00 	.word	0x40012c00
 8002840:	40000400 	.word	0x40000400
 8002844:	40000800 	.word	0x40000800

08002848 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <__libc_init_array>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	2600      	movs	r6, #0
 8002870:	4d0c      	ldr	r5, [pc, #48]	; (80028a4 <__libc_init_array+0x38>)
 8002872:	4c0d      	ldr	r4, [pc, #52]	; (80028a8 <__libc_init_array+0x3c>)
 8002874:	1b64      	subs	r4, r4, r5
 8002876:	10a4      	asrs	r4, r4, #2
 8002878:	42a6      	cmp	r6, r4
 800287a:	d109      	bne.n	8002890 <__libc_init_array+0x24>
 800287c:	f000 f822 	bl	80028c4 <_init>
 8002880:	2600      	movs	r6, #0
 8002882:	4d0a      	ldr	r5, [pc, #40]	; (80028ac <__libc_init_array+0x40>)
 8002884:	4c0a      	ldr	r4, [pc, #40]	; (80028b0 <__libc_init_array+0x44>)
 8002886:	1b64      	subs	r4, r4, r5
 8002888:	10a4      	asrs	r4, r4, #2
 800288a:	42a6      	cmp	r6, r4
 800288c:	d105      	bne.n	800289a <__libc_init_array+0x2e>
 800288e:	bd70      	pop	{r4, r5, r6, pc}
 8002890:	f855 3b04 	ldr.w	r3, [r5], #4
 8002894:	4798      	blx	r3
 8002896:	3601      	adds	r6, #1
 8002898:	e7ee      	b.n	8002878 <__libc_init_array+0xc>
 800289a:	f855 3b04 	ldr.w	r3, [r5], #4
 800289e:	4798      	blx	r3
 80028a0:	3601      	adds	r6, #1
 80028a2:	e7f2      	b.n	800288a <__libc_init_array+0x1e>
 80028a4:	08002900 	.word	0x08002900
 80028a8:	08002900 	.word	0x08002900
 80028ac:	08002900 	.word	0x08002900
 80028b0:	08002904 	.word	0x08002904

080028b4 <memset>:
 80028b4:	4603      	mov	r3, r0
 80028b6:	4402      	add	r2, r0
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d100      	bne.n	80028be <memset+0xa>
 80028bc:	4770      	bx	lr
 80028be:	f803 1b01 	strb.w	r1, [r3], #1
 80028c2:	e7f9      	b.n	80028b8 <memset+0x4>

080028c4 <_init>:
 80028c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c6:	bf00      	nop
 80028c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ca:	bc08      	pop	{r3}
 80028cc:	469e      	mov	lr, r3
 80028ce:	4770      	bx	lr

080028d0 <_fini>:
 80028d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d2:	bf00      	nop
 80028d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d6:	bc08      	pop	{r3}
 80028d8:	469e      	mov	lr, r3
 80028da:	4770      	bx	lr
