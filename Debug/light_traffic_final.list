
light_traffic_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002cdc  08002cdc  00012cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d00  08002d00  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d00  08002d00  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d00  08002d00  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d00  08002d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d04  08002d04  00012d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000006c  08002d74  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002d74  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096a4  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b09  00000000  00000000  00029739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002b248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002bcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017114  00000000  00000000  0002c678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc96  00000000  00000000  0004378c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000848de  00000000  00000000  0004f422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3d00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002988  00000000  00000000  000d3d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cc4 	.word	0x08002cc4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08002cc4 	.word	0x08002cc4

0800014c <reset_all_button>:
int keyReg2[num_buttons] =  	{NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int keyReg3[num_buttons] =  	{NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int time_for_key_press[num_buttons] = {2000, 2000, 2000};

void reset_all_button(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for(int i=0; i< num_buttons; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e00c      	b.n	8000172 <reset_all_button+0x26>
		button_flag_pressed_once[i] = 0;
 8000158:	4a0a      	ldr	r2, [pc, #40]	; (8000184 <reset_all_button+0x38>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2100      	movs	r1, #0
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		button_flag_pressed_hold[i] = 0;
 8000162:	4a09      	ldr	r2, [pc, #36]	; (8000188 <reset_all_button+0x3c>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2100      	movs	r1, #0
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i< num_buttons; i++){
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	3301      	adds	r3, #1
 8000170:	607b      	str	r3, [r7, #4]
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2b02      	cmp	r3, #2
 8000176:	ddef      	ble.n	8000158 <reset_all_button+0xc>
	}
}
 8000178:	bf00      	nop
 800017a:	bf00      	nop
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	20000088 	.word	0x20000088
 8000188:	20000094 	.word	0x20000094

0800018c <key_n_process_pressed_once>:

void key_n_process_pressed_once(int n){
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	button_flag_pressed_once[n] = 1;
 8000194:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <key_n_process_pressed_once+0x1c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2101      	movs	r1, #1
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800019e:	bf00      	nop
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000088 	.word	0x20000088

080001ac <key_n_process_pressed_hold>:
void key_n_process_pressed_hold(int n){
 80001ac:	b480      	push	{r7}
 80001ae:	b083      	sub	sp, #12
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	button_flag_pressed_hold[n] = 1;
 80001b4:	4a04      	ldr	r2, [pc, #16]	; (80001c8 <key_n_process_pressed_hold+0x1c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2101      	movs	r1, #1
 80001ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001be:	bf00      	nop
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	20000094 	.word	0x20000094

080001cc <is_button_pressed_once>:

int is_button_pressed_once(int n){
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	if(button_flag_pressed_once[n] == 1){
 80001d4:	4a09      	ldr	r2, [pc, #36]	; (80001fc <is_button_pressed_once+0x30>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d106      	bne.n	80001ee <is_button_pressed_once+0x22>
		button_flag_pressed_once[n] = 0;
 80001e0:	4a06      	ldr	r2, [pc, #24]	; (80001fc <is_button_pressed_once+0x30>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2100      	movs	r1, #0
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001ea:	2301      	movs	r3, #1
 80001ec:	e000      	b.n	80001f0 <is_button_pressed_once+0x24>
	}
	else {
		return 0;
 80001ee:	2300      	movs	r3, #0
	}
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000088 	.word	0x20000088

08000200 <is_button_pressed_hold>:
int is_button_pressed_hold(int n){
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	if(button_flag_pressed_hold[n] == 1){
 8000208:	4a09      	ldr	r2, [pc, #36]	; (8000230 <is_button_pressed_hold+0x30>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000210:	2b01      	cmp	r3, #1
 8000212:	d106      	bne.n	8000222 <is_button_pressed_hold+0x22>
		button_flag_pressed_hold[n] = 0;
 8000214:	4a06      	ldr	r2, [pc, #24]	; (8000230 <is_button_pressed_hold+0x30>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2100      	movs	r1, #0
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800021e:	2301      	movs	r3, #1
 8000220:	e000      	b.n	8000224 <is_button_pressed_hold+0x24>
	}
	else {
		return 0;
 8000222:	2300      	movs	r3, #0
	}
}
 8000224:	4618      	mov	r0, r3
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000094 	.word	0x20000094

08000234 <get_key_input>:



void get_key_input(int n){
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	keyReg0[n] = keyReg1[n];
 800023c:	4a54      	ldr	r2, [pc, #336]	; (8000390 <get_key_input+0x15c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000244:	4953      	ldr	r1, [pc, #332]	; (8000394 <get_key_input+0x160>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[n] = keyReg2[n];
 800024c:	4a52      	ldr	r2, [pc, #328]	; (8000398 <get_key_input+0x164>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	494e      	ldr	r1, [pc, #312]	; (8000390 <get_key_input+0x15c>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// set up button n here
	switch(n){
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b02      	cmp	r3, #2
 8000260:	d01b      	beq.n	800029a <get_key_input+0x66>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b02      	cmp	r3, #2
 8000266:	dc21      	bgt.n	80002ac <get_key_input+0x78>
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d003      	beq.n	8000276 <get_key_input+0x42>
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d009      	beq.n	8000288 <get_key_input+0x54>
		break;
	case 2:
		 keyReg2[2] = HAL_GPIO_ReadPin(BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin);
		break;
	default:
		break;
 8000274:	e01a      	b.n	80002ac <get_key_input+0x78>
		 keyReg2[0] = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, BUTTON_MODE_Pin);
 8000276:	2140      	movs	r1, #64	; 0x40
 8000278:	4848      	ldr	r0, [pc, #288]	; (800039c <get_key_input+0x168>)
 800027a:	f001 fcd5 	bl	8001c28 <HAL_GPIO_ReadPin>
 800027e:	4603      	mov	r3, r0
 8000280:	461a      	mov	r2, r3
 8000282:	4b45      	ldr	r3, [pc, #276]	; (8000398 <get_key_input+0x164>)
 8000284:	601a      	str	r2, [r3, #0]
		break;
 8000286:	e012      	b.n	80002ae <get_key_input+0x7a>
		 keyReg2[1] = HAL_GPIO_ReadPin(BUTTON_UP_GPIO_Port, BUTTON_UP_Pin);
 8000288:	2180      	movs	r1, #128	; 0x80
 800028a:	4845      	ldr	r0, [pc, #276]	; (80003a0 <get_key_input+0x16c>)
 800028c:	f001 fccc 	bl	8001c28 <HAL_GPIO_ReadPin>
 8000290:	4603      	mov	r3, r0
 8000292:	461a      	mov	r2, r3
 8000294:	4b40      	ldr	r3, [pc, #256]	; (8000398 <get_key_input+0x164>)
 8000296:	605a      	str	r2, [r3, #4]
		break;
 8000298:	e009      	b.n	80002ae <get_key_input+0x7a>
		 keyReg2[2] = HAL_GPIO_ReadPin(BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin);
 800029a:	2140      	movs	r1, #64	; 0x40
 800029c:	4840      	ldr	r0, [pc, #256]	; (80003a0 <get_key_input+0x16c>)
 800029e:	f001 fcc3 	bl	8001c28 <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	461a      	mov	r2, r3
 80002a6:	4b3c      	ldr	r3, [pc, #240]	; (8000398 <get_key_input+0x164>)
 80002a8:	609a      	str	r2, [r3, #8]
		break;
 80002aa:	e000      	b.n	80002ae <get_key_input+0x7a>
		break;
 80002ac:	bf00      	nop
	}
	/////////
	if((keyReg0[n] == keyReg1[n]) && (keyReg1[n] == keyReg2[n]) ){
 80002ae:	4a39      	ldr	r2, [pc, #228]	; (8000394 <get_key_input+0x160>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b6:	4936      	ldr	r1, [pc, #216]	; (8000390 <get_key_input+0x15c>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d162      	bne.n	8000388 <get_key_input+0x154>
 80002c2:	4a33      	ldr	r2, [pc, #204]	; (8000390 <get_key_input+0x15c>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ca:	4933      	ldr	r1, [pc, #204]	; (8000398 <get_key_input+0x164>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d158      	bne.n	8000388 <get_key_input+0x154>
		if(keyReg2[n] != keyReg3[n]){
 80002d6:	4a30      	ldr	r2, [pc, #192]	; (8000398 <get_key_input+0x164>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002de:	4931      	ldr	r1, [pc, #196]	; (80003a4 <get_key_input+0x170>)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d02c      	beq.n	8000344 <get_key_input+0x110>
			keyReg3[n] = keyReg2[n];
 80002ea:	4a2b      	ldr	r2, [pc, #172]	; (8000398 <get_key_input+0x164>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f2:	492c      	ldr	r1, [pc, #176]	; (80003a4 <get_key_input+0x170>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[n] == NORMAL_STATE && en_pressed_once[n] == 1){
 80002fa:	4a27      	ldr	r2, [pc, #156]	; (8000398 <get_key_input+0x164>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d10d      	bne.n	8000322 <get_key_input+0xee>
 8000306:	4a28      	ldr	r2, [pc, #160]	; (80003a8 <get_key_input+0x174>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d107      	bne.n	8000322 <get_key_input+0xee>
				//TODO when pressed once
				en_pressed_once[n] = 0;
 8000312:	4a25      	ldr	r2, [pc, #148]	; (80003a8 <get_key_input+0x174>)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2100      	movs	r1, #0
 8000318:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				key_n_process_pressed_once(n);
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f7ff ff35 	bl	800018c <key_n_process_pressed_once>
			}
			if(keyReg2[n] == PRESSED_STATE){
 8000322:	4a1d      	ldr	r2, [pc, #116]	; (8000398 <get_key_input+0x164>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d104      	bne.n	8000338 <get_key_input+0x104>
				en_pressed_once[n] = 1;
 800032e:	4a1e      	ldr	r2, [pc, #120]	; (80003a8 <get_key_input+0x174>)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2101      	movs	r1, #1
 8000334:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			time_for_key_press[n] = 200;
 8000338:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <get_key_input+0x178>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	21c8      	movs	r1, #200	; 0xc8
 800033e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				time_for_key_press[n] = 200;
			}
		}
	}
}
 8000342:	e021      	b.n	8000388 <get_key_input+0x154>
			time_for_key_press[n]--;
 8000344:	4a19      	ldr	r2, [pc, #100]	; (80003ac <get_key_input+0x178>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800034c:	1e5a      	subs	r2, r3, #1
 800034e:	4917      	ldr	r1, [pc, #92]	; (80003ac <get_key_input+0x178>)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(time_for_key_press[n] == 0){
 8000356:	4a15      	ldr	r2, [pc, #84]	; (80003ac <get_key_input+0x178>)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d112      	bne.n	8000388 <get_key_input+0x154>
				if(keyReg2[n] == PRESSED_STATE){
 8000362:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <get_key_input+0x164>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d107      	bne.n	800037e <get_key_input+0x14a>
					en_pressed_once[n] = 0;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <get_key_input+0x174>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2100      	movs	r1, #0
 8000374:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					key_n_process_pressed_hold(n);
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f7ff ff17 	bl	80001ac <key_n_process_pressed_hold>
				time_for_key_press[n] = 200;
 800037e:	4a0b      	ldr	r2, [pc, #44]	; (80003ac <get_key_input+0x178>)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	21c8      	movs	r1, #200	; 0xc8
 8000384:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	2000000c 	.word	0x2000000c
 8000394:	20000000 	.word	0x20000000
 8000398:	20000018 	.word	0x20000018
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	40010800 	.word	0x40010800
 80003a4:	20000024 	.word	0x20000024
 80003a8:	200000a0 	.word	0x200000a0
 80003ac:	20000030 	.word	0x20000030

080003b0 <get_key_input_all>:

void get_key_input_all(){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0


	for(int i = 0; i < num_buttons ;i++){
 80003b6:	2300      	movs	r3, #0
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	e005      	b.n	80003c8 <get_key_input_all+0x18>
		get_key_input(i);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff39 	bl	8000234 <get_key_input>
	for(int i = 0; i < num_buttons ;i++){
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3301      	adds	r3, #1
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	ddf6      	ble.n	80003bc <get_key_input_all+0xc>
	}
}
 80003ce:	bf00      	nop
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <display_red1_green2>:
 *      Author: ASUS TUF GAMING
 */

#include "driver.h"

void display_red1_green2(){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2101      	movs	r1, #1
 80003e0:	480e      	ldr	r0, [pc, #56]	; (800041c <display_red1_green2+0x44>)
 80003e2:	f001 fc38 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2102      	movs	r1, #2
 80003ea:	480c      	ldr	r0, [pc, #48]	; (800041c <display_red1_green2+0x44>)
 80003ec:	f001 fc33 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2110      	movs	r1, #16
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <display_red1_green2+0x44>)
 80003f6:	f001 fc2e 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2101      	movs	r1, #1
 80003fe:	4808      	ldr	r0, [pc, #32]	; (8000420 <display_red1_green2+0x48>)
 8000400:	f001 fc29 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 8000404:	2201      	movs	r2, #1
 8000406:	2102      	movs	r1, #2
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <display_red1_green2+0x4c>)
 800040a:	f001 fc24 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2101      	movs	r1, #1
 8000412:	4804      	ldr	r0, [pc, #16]	; (8000424 <display_red1_green2+0x4c>)
 8000414:	f001 fc1f 	bl	8001c56 <HAL_GPIO_WritePin>
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40010800 	.word	0x40010800
 8000420:	40010c00 	.word	0x40010c00
 8000424:	40011000 	.word	0x40011000

08000428 <display_red1_yellow2>:
void display_red1_yellow2(){
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2101      	movs	r1, #1
 8000430:	480e      	ldr	r0, [pc, #56]	; (800046c <display_red1_yellow2+0x44>)
 8000432:	f001 fc10 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 8000436:	2201      	movs	r2, #1
 8000438:	2102      	movs	r1, #2
 800043a:	480c      	ldr	r0, [pc, #48]	; (800046c <display_red1_yellow2+0x44>)
 800043c:	f001 fc0b 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 8000440:	2201      	movs	r2, #1
 8000442:	2110      	movs	r1, #16
 8000444:	4809      	ldr	r0, [pc, #36]	; (800046c <display_red1_yellow2+0x44>)
 8000446:	f001 fc06 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 800044a:	2201      	movs	r2, #1
 800044c:	2101      	movs	r1, #1
 800044e:	4808      	ldr	r0, [pc, #32]	; (8000470 <display_red1_yellow2+0x48>)
 8000450:	f001 fc01 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2102      	movs	r1, #2
 8000458:	4806      	ldr	r0, [pc, #24]	; (8000474 <display_red1_yellow2+0x4c>)
 800045a:	f001 fbfc 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 800045e:	2201      	movs	r2, #1
 8000460:	2101      	movs	r1, #1
 8000462:	4804      	ldr	r0, [pc, #16]	; (8000474 <display_red1_yellow2+0x4c>)
 8000464:	f001 fbf7 	bl	8001c56 <HAL_GPIO_WritePin>
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010800 	.word	0x40010800
 8000470:	40010c00 	.word	0x40010c00
 8000474:	40011000 	.word	0x40011000

08000478 <display_green1_red2>:
void display_green1_red2(){
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 800047c:	2201      	movs	r2, #1
 800047e:	2101      	movs	r1, #1
 8000480:	480e      	ldr	r0, [pc, #56]	; (80004bc <display_green1_red2+0x44>)
 8000482:	f001 fbe8 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 8000486:	2201      	movs	r2, #1
 8000488:	2102      	movs	r1, #2
 800048a:	480c      	ldr	r0, [pc, #48]	; (80004bc <display_green1_red2+0x44>)
 800048c:	f001 fbe3 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2110      	movs	r1, #16
 8000494:	4809      	ldr	r0, [pc, #36]	; (80004bc <display_green1_red2+0x44>)
 8000496:	f001 fbde 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2101      	movs	r1, #1
 800049e:	4808      	ldr	r0, [pc, #32]	; (80004c0 <display_green1_red2+0x48>)
 80004a0:	f001 fbd9 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2102      	movs	r1, #2
 80004a8:	4806      	ldr	r0, [pc, #24]	; (80004c4 <display_green1_red2+0x4c>)
 80004aa:	f001 fbd4 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2101      	movs	r1, #1
 80004b2:	4804      	ldr	r0, [pc, #16]	; (80004c4 <display_green1_red2+0x4c>)
 80004b4:	f001 fbcf 	bl	8001c56 <HAL_GPIO_WritePin>
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40010800 	.word	0x40010800
 80004c0:	40010c00 	.word	0x40010c00
 80004c4:	40011000 	.word	0x40011000

080004c8 <display_yellow1_red2>:
void display_yellow1_red2(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2101      	movs	r1, #1
 80004d0:	480e      	ldr	r0, [pc, #56]	; (800050c <display_yellow1_red2+0x44>)
 80004d2:	f001 fbc0 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2102      	movs	r1, #2
 80004da:	480c      	ldr	r0, [pc, #48]	; (800050c <display_yellow1_red2+0x44>)
 80004dc:	f001 fbbb 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2110      	movs	r1, #16
 80004e4:	4809      	ldr	r0, [pc, #36]	; (800050c <display_yellow1_red2+0x44>)
 80004e6:	f001 fbb6 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2101      	movs	r1, #1
 80004ee:	4808      	ldr	r0, [pc, #32]	; (8000510 <display_yellow1_red2+0x48>)
 80004f0:	f001 fbb1 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2102      	movs	r1, #2
 80004f8:	4806      	ldr	r0, [pc, #24]	; (8000514 <display_yellow1_red2+0x4c>)
 80004fa:	f001 fbac 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	2101      	movs	r1, #1
 8000502:	4804      	ldr	r0, [pc, #16]	; (8000514 <display_yellow1_red2+0x4c>)
 8000504:	f001 fba7 	bl	8001c56 <HAL_GPIO_WritePin>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40010800 	.word	0x40010800
 8000510:	40010c00 	.word	0x40010c00
 8000514:	40011000 	.word	0x40011000

08000518 <blink_yellow>:
void blink_yellow(){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2101      	movs	r1, #1
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <blink_yellow+0x40>)
 8000522:	f001 fb98 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin);
 8000526:	2102      	movs	r1, #2
 8000528:	480b      	ldr	r0, [pc, #44]	; (8000558 <blink_yellow+0x40>)
 800052a:	f001 fbac 	bl	8001c86 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2110      	movs	r1, #16
 8000532:	4809      	ldr	r0, [pc, #36]	; (8000558 <blink_yellow+0x40>)
 8000534:	f001 fb8f 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2101      	movs	r1, #1
 800053c:	4807      	ldr	r0, [pc, #28]	; (800055c <blink_yellow+0x44>)
 800053e:	f001 fb8a 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin);
 8000542:	2102      	movs	r1, #2
 8000544:	4806      	ldr	r0, [pc, #24]	; (8000560 <blink_yellow+0x48>)
 8000546:	f001 fb9e 	bl	8001c86 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2101      	movs	r1, #1
 800054e:	4804      	ldr	r0, [pc, #16]	; (8000560 <blink_yellow+0x48>)
 8000550:	f001 fb81 	bl	8001c56 <HAL_GPIO_WritePin>
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40010800 	.word	0x40010800
 800055c:	40010c00 	.word	0x40010c00
 8000560:	40011000 	.word	0x40011000

08000564 <turn_on_yellow>:
void turn_on_yellow(){
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2101      	movs	r1, #1
 800056c:	480e      	ldr	r0, [pc, #56]	; (80005a8 <turn_on_yellow+0x44>)
 800056e:	f001 fb72 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2102      	movs	r1, #2
 8000576:	480c      	ldr	r0, [pc, #48]	; (80005a8 <turn_on_yellow+0x44>)
 8000578:	f001 fb6d 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2110      	movs	r1, #16
 8000580:	4809      	ldr	r0, [pc, #36]	; (80005a8 <turn_on_yellow+0x44>)
 8000582:	f001 fb68 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 8000586:	2201      	movs	r2, #1
 8000588:	2101      	movs	r1, #1
 800058a:	4808      	ldr	r0, [pc, #32]	; (80005ac <turn_on_yellow+0x48>)
 800058c:	f001 fb63 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2102      	movs	r1, #2
 8000594:	4806      	ldr	r0, [pc, #24]	; (80005b0 <turn_on_yellow+0x4c>)
 8000596:	f001 fb5e 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 800059a:	2201      	movs	r2, #1
 800059c:	2101      	movs	r1, #1
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <turn_on_yellow+0x4c>)
 80005a0:	f001 fb59 	bl	8001c56 <HAL_GPIO_WritePin>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40010800 	.word	0x40010800
 80005ac:	40010c00 	.word	0x40010c00
 80005b0:	40011000 	.word	0x40011000

080005b4 <blink_red1_green2>:
void blink_red1_green2(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_RED_GPIO_Port, LED1_RED_Pin);
 80005b8:	2101      	movs	r1, #1
 80005ba:	480e      	ldr	r0, [pc, #56]	; (80005f4 <blink_red1_green2+0x40>)
 80005bc:	f001 fb63 	bl	8001c86 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2102      	movs	r1, #2
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <blink_red1_green2+0x40>)
 80005c6:	f001 fb46 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2110      	movs	r1, #16
 80005ce:	4809      	ldr	r0, [pc, #36]	; (80005f4 <blink_red1_green2+0x40>)
 80005d0:	f001 fb41 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2101      	movs	r1, #1
 80005d8:	4807      	ldr	r0, [pc, #28]	; (80005f8 <blink_red1_green2+0x44>)
 80005da:	f001 fb3c 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	2102      	movs	r1, #2
 80005e2:	4806      	ldr	r0, [pc, #24]	; (80005fc <blink_red1_green2+0x48>)
 80005e4:	f001 fb37 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin);
 80005e8:	2101      	movs	r1, #1
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <blink_red1_green2+0x48>)
 80005ec:	f001 fb4b 	bl	8001c86 <HAL_GPIO_TogglePin>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40010800 	.word	0x40010800
 80005f8:	40010c00 	.word	0x40010c00
 80005fc:	40011000 	.word	0x40011000

08000600 <blink_green1_red2>:
void blink_green1_red2(){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2101      	movs	r1, #1
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <blink_green1_red2+0x40>)
 800060a:	f001 fb24 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 800060e:	2201      	movs	r2, #1
 8000610:	2102      	movs	r1, #2
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <blink_green1_red2+0x40>)
 8000614:	f001 fb1f 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 8000618:	2110      	movs	r1, #16
 800061a:	4809      	ldr	r0, [pc, #36]	; (8000640 <blink_green1_red2+0x40>)
 800061c:	f001 fb33 	bl	8001c86 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_RED_GPIO_Port, LED2_RED_Pin);
 8000620:	2101      	movs	r1, #1
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <blink_green1_red2+0x44>)
 8000624:	f001 fb2f 	bl	8001c86 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2102      	movs	r1, #2
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <blink_green1_red2+0x48>)
 800062e:	f001 fb12 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2101      	movs	r1, #1
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <blink_green1_red2+0x48>)
 8000638:	f001 fb0d 	bl	8001c56 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40010800 	.word	0x40010800
 8000644:	40010c00 	.word	0x40010c00
 8000648:	40011000 	.word	0x40011000

0800064c <display_led_7seg>:
void display_led_7seg(int num){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b09      	cmp	r3, #9
 8000658:	f200 8194 	bhi.w	8000984 <display_led_7seg+0x338>
 800065c:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <display_led_7seg+0x18>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	0800068d 	.word	0x0800068d
 8000668:	080006d9 	.word	0x080006d9
 800066c:	08000725 	.word	0x08000725
 8000670:	08000771 	.word	0x08000771
 8000674:	080007bd 	.word	0x080007bd
 8000678:	08000809 	.word	0x08000809
 800067c:	08000855 	.word	0x08000855
 8000680:	080008a1 	.word	0x080008a1
 8000684:	080008ed 	.word	0x080008ed
 8000688:	08000939 	.word	0x08000939
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2108      	movs	r1, #8
 8000690:	48bf      	ldr	r0, [pc, #764]	; (8000990 <display_led_7seg+0x344>)
 8000692:	f001 fae0 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2104      	movs	r1, #4
 800069a:	48bd      	ldr	r0, [pc, #756]	; (8000990 <display_led_7seg+0x344>)
 800069c:	f001 fadb 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a6:	48ba      	ldr	r0, [pc, #744]	; (8000990 <display_led_7seg+0x344>)
 80006a8:	f001 fad5 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2108      	movs	r1, #8
 80006b0:	48b8      	ldr	r0, [pc, #736]	; (8000994 <display_led_7seg+0x348>)
 80006b2:	f001 fad0 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	48b6      	ldr	r0, [pc, #728]	; (8000994 <display_led_7seg+0x348>)
 80006bc:	f001 facb 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2110      	movs	r1, #16
 80006c4:	48b3      	ldr	r0, [pc, #716]	; (8000994 <display_led_7seg+0x348>)
 80006c6:	f001 fac6 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d0:	48b0      	ldr	r0, [pc, #704]	; (8000994 <display_led_7seg+0x348>)
 80006d2:	f001 fac0 	bl	8001c56 <HAL_GPIO_WritePin>
		break;
 80006d6:	e156      	b.n	8000986 <display_led_7seg+0x33a>
	case 1:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2108      	movs	r1, #8
 80006dc:	48ac      	ldr	r0, [pc, #688]	; (8000990 <display_led_7seg+0x344>)
 80006de:	f001 faba 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2104      	movs	r1, #4
 80006e6:	48aa      	ldr	r0, [pc, #680]	; (8000990 <display_led_7seg+0x344>)
 80006e8:	f001 fab5 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f2:	48a7      	ldr	r0, [pc, #668]	; (8000990 <display_led_7seg+0x344>)
 80006f4:	f001 faaf 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2108      	movs	r1, #8
 80006fc:	48a5      	ldr	r0, [pc, #660]	; (8000994 <display_led_7seg+0x348>)
 80006fe:	f001 faaa 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 8000702:	2201      	movs	r2, #1
 8000704:	2120      	movs	r1, #32
 8000706:	48a3      	ldr	r0, [pc, #652]	; (8000994 <display_led_7seg+0x348>)
 8000708:	f001 faa5 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2110      	movs	r1, #16
 8000710:	48a0      	ldr	r0, [pc, #640]	; (8000994 <display_led_7seg+0x348>)
 8000712:	f001 faa0 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071c:	489d      	ldr	r0, [pc, #628]	; (8000994 <display_led_7seg+0x348>)
 800071e:	f001 fa9a 	bl	8001c56 <HAL_GPIO_WritePin>
		break;
 8000722:	e130      	b.n	8000986 <display_led_7seg+0x33a>
	case 2:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2108      	movs	r1, #8
 8000728:	4899      	ldr	r0, [pc, #612]	; (8000990 <display_led_7seg+0x344>)
 800072a:	f001 fa94 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2104      	movs	r1, #4
 8000732:	4897      	ldr	r0, [pc, #604]	; (8000990 <display_led_7seg+0x344>)
 8000734:	f001 fa8f 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073e:	4894      	ldr	r0, [pc, #592]	; (8000990 <display_led_7seg+0x344>)
 8000740:	f001 fa89 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2108      	movs	r1, #8
 8000748:	4892      	ldr	r0, [pc, #584]	; (8000994 <display_led_7seg+0x348>)
 800074a:	f001 fa84 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2120      	movs	r1, #32
 8000752:	4890      	ldr	r0, [pc, #576]	; (8000994 <display_led_7seg+0x348>)
 8000754:	f001 fa7f 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2110      	movs	r1, #16
 800075c:	488d      	ldr	r0, [pc, #564]	; (8000994 <display_led_7seg+0x348>)
 800075e:	f001 fa7a 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000768:	488a      	ldr	r0, [pc, #552]	; (8000994 <display_led_7seg+0x348>)
 800076a:	f001 fa74 	bl	8001c56 <HAL_GPIO_WritePin>
		break;
 800076e:	e10a      	b.n	8000986 <display_led_7seg+0x33a>
	case 3:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2108      	movs	r1, #8
 8000774:	4886      	ldr	r0, [pc, #536]	; (8000990 <display_led_7seg+0x344>)
 8000776:	f001 fa6e 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2104      	movs	r1, #4
 800077e:	4884      	ldr	r0, [pc, #528]	; (8000990 <display_led_7seg+0x344>)
 8000780:	f001 fa69 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078a:	4881      	ldr	r0, [pc, #516]	; (8000990 <display_led_7seg+0x344>)
 800078c:	f001 fa63 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2108      	movs	r1, #8
 8000794:	487f      	ldr	r0, [pc, #508]	; (8000994 <display_led_7seg+0x348>)
 8000796:	f001 fa5e 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2120      	movs	r1, #32
 800079e:	487d      	ldr	r0, [pc, #500]	; (8000994 <display_led_7seg+0x348>)
 80007a0:	f001 fa59 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2110      	movs	r1, #16
 80007a8:	487a      	ldr	r0, [pc, #488]	; (8000994 <display_led_7seg+0x348>)
 80007aa:	f001 fa54 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b4:	4877      	ldr	r0, [pc, #476]	; (8000994 <display_led_7seg+0x348>)
 80007b6:	f001 fa4e 	bl	8001c56 <HAL_GPIO_WritePin>
		break;
 80007ba:	e0e4      	b.n	8000986 <display_led_7seg+0x33a>
	case 4:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2108      	movs	r1, #8
 80007c0:	4873      	ldr	r0, [pc, #460]	; (8000990 <display_led_7seg+0x344>)
 80007c2:	f001 fa48 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2104      	movs	r1, #4
 80007ca:	4871      	ldr	r0, [pc, #452]	; (8000990 <display_led_7seg+0x344>)
 80007cc:	f001 fa43 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d6:	486e      	ldr	r0, [pc, #440]	; (8000990 <display_led_7seg+0x344>)
 80007d8:	f001 fa3d 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2108      	movs	r1, #8
 80007e0:	486c      	ldr	r0, [pc, #432]	; (8000994 <display_led_7seg+0x348>)
 80007e2:	f001 fa38 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2120      	movs	r1, #32
 80007ea:	486a      	ldr	r0, [pc, #424]	; (8000994 <display_led_7seg+0x348>)
 80007ec:	f001 fa33 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2110      	movs	r1, #16
 80007f4:	4867      	ldr	r0, [pc, #412]	; (8000994 <display_led_7seg+0x348>)
 80007f6:	f001 fa2e 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000800:	4864      	ldr	r0, [pc, #400]	; (8000994 <display_led_7seg+0x348>)
 8000802:	f001 fa28 	bl	8001c56 <HAL_GPIO_WritePin>
		break;
 8000806:	e0be      	b.n	8000986 <display_led_7seg+0x33a>
	case 5:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2108      	movs	r1, #8
 800080c:	4860      	ldr	r0, [pc, #384]	; (8000990 <display_led_7seg+0x344>)
 800080e:	f001 fa22 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2104      	movs	r1, #4
 8000816:	485e      	ldr	r0, [pc, #376]	; (8000990 <display_led_7seg+0x344>)
 8000818:	f001 fa1d 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	485b      	ldr	r0, [pc, #364]	; (8000990 <display_led_7seg+0x344>)
 8000824:	f001 fa17 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2108      	movs	r1, #8
 800082c:	4859      	ldr	r0, [pc, #356]	; (8000994 <display_led_7seg+0x348>)
 800082e:	f001 fa12 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 8000832:	2201      	movs	r2, #1
 8000834:	2120      	movs	r1, #32
 8000836:	4857      	ldr	r0, [pc, #348]	; (8000994 <display_led_7seg+0x348>)
 8000838:	f001 fa0d 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2110      	movs	r1, #16
 8000840:	4854      	ldr	r0, [pc, #336]	; (8000994 <display_led_7seg+0x348>)
 8000842:	f001 fa08 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084c:	4851      	ldr	r0, [pc, #324]	; (8000994 <display_led_7seg+0x348>)
 800084e:	f001 fa02 	bl	8001c56 <HAL_GPIO_WritePin>
		break;
 8000852:	e098      	b.n	8000986 <display_led_7seg+0x33a>
	case 6:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2108      	movs	r1, #8
 8000858:	484d      	ldr	r0, [pc, #308]	; (8000990 <display_led_7seg+0x344>)
 800085a:	f001 f9fc 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, SET);
 800085e:	2201      	movs	r2, #1
 8000860:	2104      	movs	r1, #4
 8000862:	484b      	ldr	r0, [pc, #300]	; (8000990 <display_led_7seg+0x344>)
 8000864:	f001 f9f7 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086e:	4848      	ldr	r0, [pc, #288]	; (8000990 <display_led_7seg+0x344>)
 8000870:	f001 f9f1 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	2108      	movs	r1, #8
 8000878:	4846      	ldr	r0, [pc, #280]	; (8000994 <display_led_7seg+0x348>)
 800087a:	f001 f9ec 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	4844      	ldr	r0, [pc, #272]	; (8000994 <display_led_7seg+0x348>)
 8000884:	f001 f9e7 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2110      	movs	r1, #16
 800088c:	4841      	ldr	r0, [pc, #260]	; (8000994 <display_led_7seg+0x348>)
 800088e:	f001 f9e2 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000898:	483e      	ldr	r0, [pc, #248]	; (8000994 <display_led_7seg+0x348>)
 800089a:	f001 f9dc 	bl	8001c56 <HAL_GPIO_WritePin>
		break;
 800089e:	e072      	b.n	8000986 <display_led_7seg+0x33a>
	case 7:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2108      	movs	r1, #8
 80008a4:	483a      	ldr	r0, [pc, #232]	; (8000990 <display_led_7seg+0x344>)
 80008a6:	f001 f9d6 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2104      	movs	r1, #4
 80008ae:	4838      	ldr	r0, [pc, #224]	; (8000990 <display_led_7seg+0x344>)
 80008b0:	f001 f9d1 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ba:	4835      	ldr	r0, [pc, #212]	; (8000990 <display_led_7seg+0x344>)
 80008bc:	f001 f9cb 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2108      	movs	r1, #8
 80008c4:	4833      	ldr	r0, [pc, #204]	; (8000994 <display_led_7seg+0x348>)
 80008c6:	f001 f9c6 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	2120      	movs	r1, #32
 80008ce:	4831      	ldr	r0, [pc, #196]	; (8000994 <display_led_7seg+0x348>)
 80008d0:	f001 f9c1 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2110      	movs	r1, #16
 80008d8:	482e      	ldr	r0, [pc, #184]	; (8000994 <display_led_7seg+0x348>)
 80008da:	f001 f9bc 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e4:	482b      	ldr	r0, [pc, #172]	; (8000994 <display_led_7seg+0x348>)
 80008e6:	f001 f9b6 	bl	8001c56 <HAL_GPIO_WritePin>
		break;
 80008ea:	e04c      	b.n	8000986 <display_led_7seg+0x33a>
	case 8:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2108      	movs	r1, #8
 80008f0:	4827      	ldr	r0, [pc, #156]	; (8000990 <display_led_7seg+0x344>)
 80008f2:	f001 f9b0 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2104      	movs	r1, #4
 80008fa:	4825      	ldr	r0, [pc, #148]	; (8000990 <display_led_7seg+0x344>)
 80008fc:	f001 f9ab 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000906:	4822      	ldr	r0, [pc, #136]	; (8000990 <display_led_7seg+0x344>)
 8000908:	f001 f9a5 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2108      	movs	r1, #8
 8000910:	4820      	ldr	r0, [pc, #128]	; (8000994 <display_led_7seg+0x348>)
 8000912:	f001 f9a0 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2120      	movs	r1, #32
 800091a:	481e      	ldr	r0, [pc, #120]	; (8000994 <display_led_7seg+0x348>)
 800091c:	f001 f99b 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2110      	movs	r1, #16
 8000924:	481b      	ldr	r0, [pc, #108]	; (8000994 <display_led_7seg+0x348>)
 8000926:	f001 f996 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000930:	4818      	ldr	r0, [pc, #96]	; (8000994 <display_led_7seg+0x348>)
 8000932:	f001 f990 	bl	8001c56 <HAL_GPIO_WritePin>
		break;
 8000936:	e026      	b.n	8000986 <display_led_7seg+0x33a>
	case 9:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2108      	movs	r1, #8
 800093c:	4814      	ldr	r0, [pc, #80]	; (8000990 <display_led_7seg+0x344>)
 800093e:	f001 f98a 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2104      	movs	r1, #4
 8000946:	4812      	ldr	r0, [pc, #72]	; (8000990 <display_led_7seg+0x344>)
 8000948:	f001 f985 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000952:	480f      	ldr	r0, [pc, #60]	; (8000990 <display_led_7seg+0x344>)
 8000954:	f001 f97f 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2108      	movs	r1, #8
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <display_led_7seg+0x348>)
 800095e:	f001 f97a 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2120      	movs	r1, #32
 8000966:	480b      	ldr	r0, [pc, #44]	; (8000994 <display_led_7seg+0x348>)
 8000968:	f001 f975 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2110      	movs	r1, #16
 8000970:	4808      	ldr	r0, [pc, #32]	; (8000994 <display_led_7seg+0x348>)
 8000972:	f001 f970 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <display_led_7seg+0x348>)
 800097e:	f001 f96a 	bl	8001c56 <HAL_GPIO_WritePin>
		break;
 8000982:	e000      	b.n	8000986 <display_led_7seg+0x33a>
	default:
		break;
 8000984:	bf00      	nop
	}
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40010800 	.word	0x40010800
 8000994:	40010c00 	.word	0x40010c00

08000998 <control_led_7seg>:
int enable_led_7seg = 0;
void control_led_7seg(){
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	if(timer2_flag == 1){
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <control_led_7seg+0x70>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d109      	bne.n	80009b8 <control_led_7seg+0x20>
		setTimer2(500);
 80009a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a8:	f000 fb0c 	bl	8000fc4 <setTimer2>
		enable_led_7seg = 1 -enable_led_7seg;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <control_led_7seg+0x74>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f1c3 0301 	rsb	r3, r3, #1
 80009b4:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <control_led_7seg+0x74>)
 80009b6:	6013      	str	r3, [r2, #0]
	}
	if(enable_led_7seg == 0){
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <control_led_7seg+0x74>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d110      	bne.n	80009e2 <control_led_7seg+0x4a>
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c6:	4812      	ldr	r0, [pc, #72]	; (8000a10 <control_led_7seg+0x78>)
 80009c8:	f001 f945 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2180      	movs	r1, #128	; 0x80
 80009d0:	4810      	ldr	r0, [pc, #64]	; (8000a14 <control_led_7seg+0x7c>)
 80009d2:	f001 f940 	bl	8001c56 <HAL_GPIO_WritePin>
		display_led_7seg(time_road1);
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <control_led_7seg+0x80>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fe36 	bl	800064c <display_led_7seg>
	else {
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, RESET);
		display_led_7seg(time_road2);
	}
}
 80009e0:	e00f      	b.n	8000a02 <control_led_7seg+0x6a>
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e8:	4809      	ldr	r0, [pc, #36]	; (8000a10 <control_led_7seg+0x78>)
 80009ea:	f001 f934 	bl	8001c56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2180      	movs	r1, #128	; 0x80
 80009f2:	4808      	ldr	r0, [pc, #32]	; (8000a14 <control_led_7seg+0x7c>)
 80009f4:	f001 f92f 	bl	8001c56 <HAL_GPIO_WritePin>
		display_led_7seg(time_road2);
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <control_led_7seg+0x84>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fe25 	bl	800064c <display_led_7seg>
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000c8 	.word	0x200000c8
 8000a0c:	200000ac 	.word	0x200000ac
 8000a10:	40010800 	.word	0x40010800
 8000a14:	40011000 	.word	0x40011000
 8000a18:	200000b4 	.word	0x200000b4
 8000a1c:	200000b8 	.word	0x200000b8

08000a20 <turn_off_led_7seg>:
void turn_off_led_7seg(){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <turn_off_led_7seg+0x20>)
 8000a2c:	f001 f913 	bl	8001c56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	4803      	ldr	r0, [pc, #12]	; (8000a44 <turn_off_led_7seg+0x24>)
 8000a36:	f001 f90e 	bl	8001c56 <HAL_GPIO_WritePin>
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40010800 	.word	0x40010800
 8000a44:	40011000 	.word	0x40011000

08000a48 <light_traffic_fsm>:
 *  Created on: Dec 1, 2023
 *      Author: ASUS TUF GAMING
 */
#include "light_traffic_fsm.h"

void light_traffic_fsm(){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	switch(status){
 8000a4c:	4b46      	ldr	r3, [pc, #280]	; (8000b68 <light_traffic_fsm+0x120>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b03      	cmp	r3, #3
 8000a52:	f200 8080 	bhi.w	8000b56 <light_traffic_fsm+0x10e>
 8000a56:	a201      	add	r2, pc, #4	; (adr r2, 8000a5c <light_traffic_fsm+0x14>)
 8000a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5c:	08000a6d 	.word	0x08000a6d
 8000a60:	08000a9b 	.word	0x08000a9b
 8000a64:	08000b1d 	.word	0x08000b1d
 8000a68:	08000ac7 	.word	0x08000ac7
	case INIT:
		status = NORMAL_MODE;
 8000a6c:	4b3e      	ldr	r3, [pc, #248]	; (8000b68 <light_traffic_fsm+0x120>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	601a      	str	r2, [r3, #0]
		normal_mode_state = RED1_GREEN2;
 8000a72:	4b3e      	ldr	r3, [pc, #248]	; (8000b6c <light_traffic_fsm+0x124>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	601a      	str	r2, [r3, #0]
		time_road1 = time_red1;
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <light_traffic_fsm+0x128>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a3d      	ldr	r2, [pc, #244]	; (8000b74 <light_traffic_fsm+0x12c>)
 8000a7e:	6013      	str	r3, [r2, #0]
		time_road2 = time_green2;
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <light_traffic_fsm+0x130>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a3d      	ldr	r2, [pc, #244]	; (8000b7c <light_traffic_fsm+0x134>)
 8000a86:	6013      	str	r3, [r2, #0]
		setTimer1(1000);
 8000a88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8c:	f000 fa80 	bl	8000f90 <setTimer1>
		setTimer2(500);
 8000a90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a94:	f000 fa96 	bl	8000fc4 <setTimer2>
		break;
 8000a98:	e064      	b.n	8000b64 <light_traffic_fsm+0x11c>
	case NORMAL_MODE:
		normal_mode_fsm();
 8000a9a:	f000 f9cd 	bl	8000e38 <normal_mode_fsm>
		control_led_7seg();
 8000a9e:	f7ff ff7b 	bl	8000998 <control_led_7seg>
		if(is_button_pressed_hold(0)){
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff fbac 	bl	8000200 <is_button_pressed_hold>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d055      	beq.n	8000b5a <light_traffic_fsm+0x112>
			status = BLINK_YELLOW_MODE;
 8000aae:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <light_traffic_fsm+0x120>)
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	601a      	str	r2, [r3, #0]
			turn_on_yellow();
 8000ab4:	f7ff fd56 	bl	8000564 <turn_on_yellow>
			turn_off_led_7seg();
 8000ab8:	f7ff ffb2 	bl	8000a20 <turn_off_led_7seg>
			setTimer1(500);
 8000abc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac0:	f000 fa66 	bl	8000f90 <setTimer1>
		}
		break;
 8000ac4:	e049      	b.n	8000b5a <light_traffic_fsm+0x112>
	case BLINK_YELLOW_MODE:
		if(timer1_flag == 1){
 8000ac6:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <light_traffic_fsm+0x138>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d105      	bne.n	8000ada <light_traffic_fsm+0x92>
			setTimer1(500);
 8000ace:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad2:	f000 fa5d 	bl	8000f90 <setTimer1>
			blink_yellow();
 8000ad6:	f7ff fd1f 	bl	8000518 <blink_yellow>
		}
		if(is_button_pressed_hold(0)){
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff fb90 	bl	8000200 <is_button_pressed_hold>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d03b      	beq.n	8000b5e <light_traffic_fsm+0x116>
			status = TURNING_MODE;
 8000ae6:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <light_traffic_fsm+0x120>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	601a      	str	r2, [r3, #0]
			reset_all_button();
 8000aec:	f7ff fb2e 	bl	800014c <reset_all_button>
			turning_mode_state = SET_RED1_GREEN2;
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <light_traffic_fsm+0x13c>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	601a      	str	r2, [r3, #0]
			display_red1_green2();
 8000af6:	f7ff fc6f 	bl	80003d8 <display_red1_green2>
			time_road1 = time_red1;
 8000afa:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <light_traffic_fsm+0x128>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a1d      	ldr	r2, [pc, #116]	; (8000b74 <light_traffic_fsm+0x12c>)
 8000b00:	6013      	str	r3, [r2, #0]
			time_road2 = time_green2;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <light_traffic_fsm+0x130>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <light_traffic_fsm+0x134>)
 8000b08:	6013      	str	r3, [r2, #0]
			setTimer1(500);
 8000b0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b0e:	f000 fa3f 	bl	8000f90 <setTimer1>
			setTimer2(500);
 8000b12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b16:	f000 fa55 	bl	8000fc4 <setTimer2>
		}
		break;
 8000b1a:	e020      	b.n	8000b5e <light_traffic_fsm+0x116>
	case TURNING_MODE:
		turning_mode_fsm();
 8000b1c:	f000 fb3c 	bl	8001198 <turning_mode_fsm>
		control_led_7seg();
 8000b20:	f7ff ff3a 	bl	8000998 <control_led_7seg>
		if(is_button_pressed_hold(0)){
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff fb6b 	bl	8000200 <is_button_pressed_hold>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d018      	beq.n	8000b62 <light_traffic_fsm+0x11a>
			status = NORMAL_MODE;
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <light_traffic_fsm+0x120>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	601a      	str	r2, [r3, #0]
			normal_mode_state = RED1_GREEN2;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <light_traffic_fsm+0x124>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]
			time_road1 = time_red1;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <light_traffic_fsm+0x128>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <light_traffic_fsm+0x12c>)
 8000b42:	6013      	str	r3, [r2, #0]
			time_road2 = time_green2;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <light_traffic_fsm+0x130>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0c      	ldr	r2, [pc, #48]	; (8000b7c <light_traffic_fsm+0x134>)
 8000b4a:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000b4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b50:	f000 fa1e 	bl	8000f90 <setTimer1>
		}
		break;
 8000b54:	e005      	b.n	8000b62 <light_traffic_fsm+0x11a>
	default:
		break;
 8000b56:	bf00      	nop
 8000b58:	e004      	b.n	8000b64 <light_traffic_fsm+0x11c>
		break;
 8000b5a:	bf00      	nop
 8000b5c:	e002      	b.n	8000b64 <light_traffic_fsm+0x11c>
		break;
 8000b5e:	bf00      	nop
 8000b60:	e000      	b.n	8000b64 <light_traffic_fsm+0x11c>
		break;
 8000b62:	bf00      	nop
	}
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000b0 	.word	0x200000b0
 8000b6c:	20000054 	.word	0x20000054
 8000b70:	2000003c 	.word	0x2000003c
 8000b74:	200000b4 	.word	0x200000b4
 8000b78:	20000050 	.word	0x20000050
 8000b7c:	200000b8 	.word	0x200000b8
 8000b80:	200000c0 	.word	0x200000c0
 8000b84:	20000060 	.word	0x20000060

08000b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8c:	f000 fd58 	bl	8001640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b90:	f000 f80c 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000b94:	f000 f846 	bl	8000c24 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000b98:	f000 f890 	bl	8000cbc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <main+0x20>)
 8000b9e:	f001 fcb7 	bl	8002510 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  light_traffic_fsm();
 8000ba2:	f7ff ff51 	bl	8000a48 <light_traffic_fsm>
 8000ba6:	e7fc      	b.n	8000ba2 <main+0x1a>
 8000ba8:	200000d4 	.word	0x200000d4

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b090      	sub	sp, #64	; 0x40
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0318 	add.w	r3, r7, #24
 8000bb6:	2228      	movs	r2, #40	; 0x28
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 f87a 	bl	8002cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 f868 	bl	8001cb8 <HAL_RCC_OscConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bee:	f000 f901 	bl	8000df4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 fad4 	bl	80021b8 <HAL_RCC_ClockConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c16:	f000 f8ed 	bl	8000df4 <Error_Handler>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	3740      	adds	r7, #64	; 0x40
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	463b      	mov	r3, r7
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c40:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000c42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000c4a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000c58:	2209      	movs	r2, #9
 8000c5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c68:	4813      	ldr	r0, [pc, #76]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000c6a:	f001 fc01 	bl	8002470 <HAL_TIM_Base_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c74:	f000 f8be 	bl	8000df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4619      	mov	r1, r3
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000c86:	f001 fd9d 	bl	80027c4 <HAL_TIM_ConfigClockSource>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c90:	f000 f8b0 	bl	8000df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_TIM2_Init+0x94>)
 8000ca2:	f001 ff73 	bl	8002b8c <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cac:	f000 f8a2 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200000d4 	.word	0x200000d4

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd0:	4b3e      	ldr	r3, [pc, #248]	; (8000dcc <MX_GPIO_Init+0x110>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a3d      	ldr	r2, [pc, #244]	; (8000dcc <MX_GPIO_Init+0x110>)
 8000cd6:	f043 0310 	orr.w	r3, r3, #16
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b3b      	ldr	r3, [pc, #236]	; (8000dcc <MX_GPIO_Init+0x110>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0310 	and.w	r3, r3, #16
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b38      	ldr	r3, [pc, #224]	; (8000dcc <MX_GPIO_Init+0x110>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a37      	ldr	r2, [pc, #220]	; (8000dcc <MX_GPIO_Init+0x110>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b35      	ldr	r3, [pc, #212]	; (8000dcc <MX_GPIO_Init+0x110>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b32      	ldr	r3, [pc, #200]	; (8000dcc <MX_GPIO_Init+0x110>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a31      	ldr	r2, [pc, #196]	; (8000dcc <MX_GPIO_Init+0x110>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b2f      	ldr	r3, [pc, #188]	; (8000dcc <MX_GPIO_Init+0x110>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_GREEN_Pin|LED2_YELLOW_Pin|ENM1_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2183      	movs	r1, #131	; 0x83
 8000d1c:	482c      	ldr	r0, [pc, #176]	; (8000dd0 <MX_GPIO_Init+0x114>)
 8000d1e:	f000 ff9a 	bl	8001c56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_RED_Pin|LED1_YELLOW_Pin|SEG_B_Pin|SEG_A_Pin
 8000d22:	2200      	movs	r2, #0
 8000d24:	f240 611f 	movw	r1, #1567	; 0x61f
 8000d28:	482a      	ldr	r0, [pc, #168]	; (8000dd4 <MX_GPIO_Init+0x118>)
 8000d2a:	f000 ff94 	bl	8001c56 <HAL_GPIO_WritePin>
                          |LED1_GREEN_Pin|ENM0_Pin|SEG_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_RED_Pin|SEG_G_Pin|SEG_D_Pin|SEG_F_Pin
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f240 4139 	movw	r1, #1081	; 0x439
 8000d34:	4828      	ldr	r0, [pc, #160]	; (8000dd8 <MX_GPIO_Init+0x11c>)
 8000d36:	f000 ff8e 	bl	8001c56 <HAL_GPIO_WritePin>
                          |SEG_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED2_GREEN_Pin LED2_YELLOW_Pin ENM1_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin|LED2_YELLOW_Pin|ENM1_Pin;
 8000d3a:	2383      	movs	r3, #131	; 0x83
 8000d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481f      	ldr	r0, [pc, #124]	; (8000dd0 <MX_GPIO_Init+0x114>)
 8000d52:	f000 fde5 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_RED_Pin LED1_YELLOW_Pin SEG_B_Pin SEG_A_Pin
                           LED1_GREEN_Pin ENM0_Pin SEG_C_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|LED1_YELLOW_Pin|SEG_B_Pin|SEG_A_Pin
 8000d56:	f240 631f 	movw	r3, #1567	; 0x61f
 8000d5a:	613b      	str	r3, [r7, #16]
                          |LED1_GREEN_Pin|ENM0_Pin|SEG_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4819      	ldr	r0, [pc, #100]	; (8000dd4 <MX_GPIO_Init+0x118>)
 8000d70:	f000 fdd6 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_DOWN_Pin BUTTON_UP_Pin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin|BUTTON_UP_Pin;
 8000d74:	23c0      	movs	r3, #192	; 0xc0
 8000d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <MX_GPIO_Init+0x118>)
 8000d88:	f000 fdca 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_RED_Pin SEG_G_Pin SEG_D_Pin SEG_F_Pin
                           SEG_E_Pin */
  GPIO_InitStruct.Pin = LED2_RED_Pin|SEG_G_Pin|SEG_D_Pin|SEG_F_Pin
 8000d8c:	f240 4339 	movw	r3, #1081	; 0x439
 8000d90:	613b      	str	r3, [r7, #16]
                          |SEG_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4619      	mov	r1, r3
 8000da4:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <MX_GPIO_Init+0x11c>)
 8000da6:	f000 fdbb 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_MODE_Pin */
  GPIO_InitStruct.Pin = BUTTON_MODE_Pin;
 8000daa:	2340      	movs	r3, #64	; 0x40
 8000dac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_MODE_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <MX_GPIO_Init+0x11c>)
 8000dbe:	f000 fdaf 	bl	8001920 <HAL_GPIO_Init>

}
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40011000 	.word	0x40011000
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	40010c00 	.word	0x40010c00

08000ddc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	timerRun();
 8000de4:	f000 f908 	bl	8000ff8 <timerRun>
	get_key_input_all();
 8000de8:	f7ff fae2 	bl	80003b0 <get_key_input_all>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
}
 8000dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <Error_Handler+0x8>
	...

08000e00 <decrease_time>:
 */
#include "normal_mode_fsm.h"

int normal_mode_state = RED1_GREEN2;

void decrease_time(){
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
	if(time_road1 > 0) time_road1--;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <decrease_time+0x30>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	dd04      	ble.n	8000e16 <decrease_time+0x16>
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <decrease_time+0x30>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <decrease_time+0x30>)
 8000e14:	6013      	str	r3, [r2, #0]
	if(time_road2 > 0) time_road2--;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <decrease_time+0x34>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	dd04      	ble.n	8000e28 <decrease_time+0x28>
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <decrease_time+0x34>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	4a03      	ldr	r2, [pc, #12]	; (8000e34 <decrease_time+0x34>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	200000b4 	.word	0x200000b4
 8000e34:	200000b8 	.word	0x200000b8

08000e38 <normal_mode_fsm>:
void normal_mode_fsm(){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	switch(normal_mode_state){
 8000e3c:	4b4a      	ldr	r3, [pc, #296]	; (8000f68 <normal_mode_fsm+0x130>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	f200 8084 	bhi.w	8000f50 <normal_mode_fsm+0x118>
 8000e48:	a201      	add	r2, pc, #4	; (adr r2, 8000e50 <normal_mode_fsm+0x18>)
 8000e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4e:	bf00      	nop
 8000e50:	08000e61 	.word	0x08000e61
 8000e54:	08000e99 	.word	0x08000e99
 8000e58:	08000ed9 	.word	0x08000ed9
 8000e5c:	08000f11 	.word	0x08000f11
	case RED1_GREEN2:
		display_red1_green2();
 8000e60:	f7ff faba 	bl	80003d8 <display_red1_green2>
		if(timer1_flag == 1){
 8000e64:	4b41      	ldr	r3, [pc, #260]	; (8000f6c <normal_mode_fsm+0x134>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d105      	bne.n	8000e78 <normal_mode_fsm+0x40>
			setTimer1(1000);
 8000e6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e70:	f000 f88e 	bl	8000f90 <setTimer1>
			decrease_time();
 8000e74:	f7ff ffc4 	bl	8000e00 <decrease_time>
		}
		if(time_road2 <= 0){
 8000e78:	4b3d      	ldr	r3, [pc, #244]	; (8000f70 <normal_mode_fsm+0x138>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	dc69      	bgt.n	8000f54 <normal_mode_fsm+0x11c>
			normal_mode_state = RED1_YELLOW2;
 8000e80:	4b39      	ldr	r3, [pc, #228]	; (8000f68 <normal_mode_fsm+0x130>)
 8000e82:	2202      	movs	r2, #2
 8000e84:	601a      	str	r2, [r3, #0]
			time_road2 = time_yellow2;
 8000e86:	4b3b      	ldr	r3, [pc, #236]	; (8000f74 <normal_mode_fsm+0x13c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a39      	ldr	r2, [pc, #228]	; (8000f70 <normal_mode_fsm+0x138>)
 8000e8c:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000e8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e92:	f000 f87d 	bl	8000f90 <setTimer1>
		}
		break;
 8000e96:	e05d      	b.n	8000f54 <normal_mode_fsm+0x11c>
	case RED1_YELLOW2:
		display_red1_yellow2();
 8000e98:	f7ff fac6 	bl	8000428 <display_red1_yellow2>
		if(timer1_flag == 1){
 8000e9c:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <normal_mode_fsm+0x134>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d105      	bne.n	8000eb0 <normal_mode_fsm+0x78>
			setTimer1(1000);
 8000ea4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea8:	f000 f872 	bl	8000f90 <setTimer1>
			decrease_time();
 8000eac:	f7ff ffa8 	bl	8000e00 <decrease_time>
		}
		if(time_road2 <= 0){
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <normal_mode_fsm+0x138>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	dc4f      	bgt.n	8000f58 <normal_mode_fsm+0x120>
			normal_mode_state = GREEN1_RED2;
 8000eb8:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <normal_mode_fsm+0x130>)
 8000eba:	2203      	movs	r2, #3
 8000ebc:	601a      	str	r2, [r3, #0]
			time_road1 = time_green1;
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <normal_mode_fsm+0x140>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a2e      	ldr	r2, [pc, #184]	; (8000f7c <normal_mode_fsm+0x144>)
 8000ec4:	6013      	str	r3, [r2, #0]
			time_road2 = time_red2;
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <normal_mode_fsm+0x148>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <normal_mode_fsm+0x138>)
 8000ecc:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000ece:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed2:	f000 f85d 	bl	8000f90 <setTimer1>
		}
		break;
 8000ed6:	e03f      	b.n	8000f58 <normal_mode_fsm+0x120>
	case GREEN1_RED2:
		display_green1_red2();
 8000ed8:	f7ff face 	bl	8000478 <display_green1_red2>
		if(timer1_flag == 1){
 8000edc:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <normal_mode_fsm+0x134>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d105      	bne.n	8000ef0 <normal_mode_fsm+0xb8>
			setTimer1(1000);
 8000ee4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee8:	f000 f852 	bl	8000f90 <setTimer1>
			decrease_time();
 8000eec:	f7ff ff88 	bl	8000e00 <decrease_time>
		}
		if(time_road1 <= 0){
 8000ef0:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <normal_mode_fsm+0x144>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	dc31      	bgt.n	8000f5c <normal_mode_fsm+0x124>
			normal_mode_state = YELLOW1_RED2;
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <normal_mode_fsm+0x130>)
 8000efa:	2204      	movs	r2, #4
 8000efc:	601a      	str	r2, [r3, #0]
			time_road1 = time_yellow1;
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <normal_mode_fsm+0x14c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <normal_mode_fsm+0x144>)
 8000f04:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000f06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f0a:	f000 f841 	bl	8000f90 <setTimer1>
		}
		break;
 8000f0e:	e025      	b.n	8000f5c <normal_mode_fsm+0x124>
	case YELLOW1_RED2:
		display_yellow1_red2();
 8000f10:	f7ff fada 	bl	80004c8 <display_yellow1_red2>
		if(timer1_flag == 1){
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <normal_mode_fsm+0x134>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d105      	bne.n	8000f28 <normal_mode_fsm+0xf0>
			setTimer1(1000);
 8000f1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f20:	f000 f836 	bl	8000f90 <setTimer1>
			decrease_time();
 8000f24:	f7ff ff6c 	bl	8000e00 <decrease_time>
		}
		if(time_road1 <= 0){
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <normal_mode_fsm+0x144>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	dc17      	bgt.n	8000f60 <normal_mode_fsm+0x128>
			normal_mode_state = RED1_GREEN2;
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <normal_mode_fsm+0x130>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
			time_road1 = time_red1;
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <normal_mode_fsm+0x150>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <normal_mode_fsm+0x144>)
 8000f3c:	6013      	str	r3, [r2, #0]
			time_road2 = time_green2;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <normal_mode_fsm+0x154>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <normal_mode_fsm+0x138>)
 8000f44:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000f46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f4a:	f000 f821 	bl	8000f90 <setTimer1>
		}
		break;
 8000f4e:	e007      	b.n	8000f60 <normal_mode_fsm+0x128>
	default:
		break;
 8000f50:	bf00      	nop
 8000f52:	e006      	b.n	8000f62 <normal_mode_fsm+0x12a>
		break;
 8000f54:	bf00      	nop
 8000f56:	e004      	b.n	8000f62 <normal_mode_fsm+0x12a>
		break;
 8000f58:	bf00      	nop
 8000f5a:	e002      	b.n	8000f62 <normal_mode_fsm+0x12a>
		break;
 8000f5c:	bf00      	nop
 8000f5e:	e000      	b.n	8000f62 <normal_mode_fsm+0x12a>
		break;
 8000f60:	bf00      	nop
	}
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000054 	.word	0x20000054
 8000f6c:	200000c0 	.word	0x200000c0
 8000f70:	200000b8 	.word	0x200000b8
 8000f74:	2000004c 	.word	0x2000004c
 8000f78:	20000044 	.word	0x20000044
 8000f7c:	200000b4 	.word	0x200000b4
 8000f80:	20000048 	.word	0x20000048
 8000f84:	20000040 	.word	0x20000040
 8000f88:	2000003c 	.word	0x2000003c
 8000f8c:	20000050 	.word	0x20000050

08000f90 <setTimer1>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration){
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/DURATION_DIVIDE;
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <setTimer1+0x28>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fa2:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <setTimer1+0x2c>)
 8000fa4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <setTimer1+0x30>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000058 	.word	0x20000058
 8000fbc:	200000bc 	.word	0x200000bc
 8000fc0:	200000c0 	.word	0x200000c0

08000fc4 <setTimer2>:
void setTimer2(int duration){
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/DURATION_DIVIDE;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <setTimer2+0x28>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fd6:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <setTimer2+0x2c>)
 8000fd8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <setTimer2+0x30>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000058 	.word	0x20000058
 8000ff0:	200000c4 	.word	0x200000c4
 8000ff4:	200000c8 	.word	0x200000c8

08000ff8 <timerRun>:
void setTimer3(int duration){
	timer3_counter = duration/DURATION_DIVIDE;
	timer3_flag = 0;
}

void timerRun(){
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <timerRun+0x6c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	dd0b      	ble.n	800101c <timerRun+0x24>
		timer1_counter--;
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <timerRun+0x6c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3b01      	subs	r3, #1
 800100a:	4a16      	ldr	r2, [pc, #88]	; (8001064 <timerRun+0x6c>)
 800100c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <timerRun+0x6c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	dc02      	bgt.n	800101c <timerRun+0x24>
			timer1_flag = 1;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <timerRun+0x70>)
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <timerRun+0x74>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd0b      	ble.n	800103c <timerRun+0x44>
		timer2_counter--;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <timerRun+0x74>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3b01      	subs	r3, #1
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <timerRun+0x74>)
 800102c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <timerRun+0x74>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	dc02      	bgt.n	800103c <timerRun+0x44>
			timer2_flag = 1;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <timerRun+0x78>)
 8001038:	2201      	movs	r2, #1
 800103a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <timerRun+0x7c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	dd0b      	ble.n	800105c <timerRun+0x64>
		timer3_counter--;
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <timerRun+0x7c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3b01      	subs	r3, #1
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <timerRun+0x7c>)
 800104c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <timerRun+0x7c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	dc02      	bgt.n	800105c <timerRun+0x64>
			timer3_flag = 1;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <timerRun+0x80>)
 8001058:	2201      	movs	r2, #1
 800105a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	200000bc 	.word	0x200000bc
 8001068:	200000c0 	.word	0x200000c0
 800106c:	200000c4 	.word	0x200000c4
 8001070:	200000c8 	.word	0x200000c8
 8001074:	200000cc 	.word	0x200000cc
 8001078:	200000d0 	.word	0x200000d0

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_MspInit+0x5c>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <HAL_MspInit+0x5c>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_MspInit+0x5c>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <HAL_MspInit+0x5c>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <HAL_MspInit+0x5c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <HAL_MspInit+0x5c>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_MspInit+0x60>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_MspInit+0x60>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010000 	.word	0x40010000

080010e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f0:	d113      	bne.n	800111a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_TIM_Base_MspInit+0x44>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <HAL_TIM_Base_MspInit+0x44>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_TIM_Base_MspInit+0x44>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	201c      	movs	r0, #28
 8001110:	f000 fbcf 	bl	80018b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001114:	201c      	movs	r0, #28
 8001116:	f000 fbe8 	bl	80018ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800112c:	e7fe      	b.n	800112c <NMI_Handler+0x4>

0800112e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <HardFault_Handler+0x4>

08001134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <MemManage_Handler+0x4>

0800113a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <UsageFault_Handler+0x4>

08001146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116e:	f000 faad 	bl	80016cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <TIM2_IRQHandler+0x10>)
 800117e:	f001 fa19 	bl	80025b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000d4 	.word	0x200000d4

0800118c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <turning_mode_fsm>:
 *      Author: ASUS TUF GAMING
 */
#include "turning_mode_fsm.h"

int turning_mode_state = SET_RED1_GREEN2;
void turning_mode_fsm(){
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	switch(turning_mode_state){
 800119c:	4b4a      	ldr	r3, [pc, #296]	; (80012c8 <turning_mode_fsm+0x130>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	f000 8185 	beq.w	80014b0 <turning_mode_fsm+0x318>
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	f300 8208 	bgt.w	80015bc <turning_mode_fsm+0x424>
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d003      	beq.n	80011b8 <turning_mode_fsm+0x20>
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	f000 8099 	beq.w	80012e8 <turning_mode_fsm+0x150>
			time_road2 = time_green2;
			setTimer1(500);
		}
		break;
	default:
		break;
 80011b6:	e201      	b.n	80015bc <turning_mode_fsm+0x424>
		if(timer1_flag == 1){
 80011b8:	4b44      	ldr	r3, [pc, #272]	; (80012cc <turning_mode_fsm+0x134>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d105      	bne.n	80011cc <turning_mode_fsm+0x34>
			setTimer1(500);
 80011c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c4:	f7ff fee4 	bl	8000f90 <setTimer1>
			blink_red1_green2();
 80011c8:	f7ff f9f4 	bl	80005b4 <blink_red1_green2>
		if(is_button_pressed_once(1) || is_button_pressed_hold(1)){
 80011cc:	2001      	movs	r0, #1
 80011ce:	f7fe fffd 	bl	80001cc <is_button_pressed_once>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d105      	bne.n	80011e4 <turning_mode_fsm+0x4c>
 80011d8:	2001      	movs	r0, #1
 80011da:	f7ff f811 	bl	8000200 <is_button_pressed_hold>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d025      	beq.n	8001230 <turning_mode_fsm+0x98>
			time_red1++;
 80011e4:	4b3a      	ldr	r3, [pc, #232]	; (80012d0 <turning_mode_fsm+0x138>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a39      	ldr	r2, [pc, #228]	; (80012d0 <turning_mode_fsm+0x138>)
 80011ec:	6013      	str	r3, [r2, #0]
			if(time_red1 > 9){
 80011ee:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <turning_mode_fsm+0x138>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b09      	cmp	r3, #9
 80011f4:	dd02      	ble.n	80011fc <turning_mode_fsm+0x64>
				time_red1 = 0;
 80011f6:	4b36      	ldr	r3, [pc, #216]	; (80012d0 <turning_mode_fsm+0x138>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
			time_green2 = time_red1 - time_yellow2;
 80011fc:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <turning_mode_fsm+0x138>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <turning_mode_fsm+0x13c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	4a34      	ldr	r2, [pc, #208]	; (80012d8 <turning_mode_fsm+0x140>)
 8001208:	6013      	str	r3, [r2, #0]
			if(time_green2 < 0) {
 800120a:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <turning_mode_fsm+0x140>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	da06      	bge.n	8001220 <turning_mode_fsm+0x88>
				time_red1 = time_yellow2;
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <turning_mode_fsm+0x13c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a2e      	ldr	r2, [pc, #184]	; (80012d0 <turning_mode_fsm+0x138>)
 8001218:	6013      	str	r3, [r2, #0]
				time_green2 = 0;
 800121a:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <turning_mode_fsm+0x140>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
			time_road1 = time_red1;
 8001220:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <turning_mode_fsm+0x138>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a2d      	ldr	r2, [pc, #180]	; (80012dc <turning_mode_fsm+0x144>)
 8001226:	6013      	str	r3, [r2, #0]
			time_road2 = time_green2;
 8001228:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <turning_mode_fsm+0x140>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a2c      	ldr	r2, [pc, #176]	; (80012e0 <turning_mode_fsm+0x148>)
 800122e:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_once(2) || is_button_pressed_hold(2)){
 8001230:	2002      	movs	r0, #2
 8001232:	f7fe ffcb 	bl	80001cc <is_button_pressed_once>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d105      	bne.n	8001248 <turning_mode_fsm+0xb0>
 800123c:	2002      	movs	r0, #2
 800123e:	f7fe ffdf 	bl	8000200 <is_button_pressed_hold>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d025      	beq.n	8001294 <turning_mode_fsm+0xfc>
			time_red1--;
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <turning_mode_fsm+0x138>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3b01      	subs	r3, #1
 800124e:	4a20      	ldr	r2, [pc, #128]	; (80012d0 <turning_mode_fsm+0x138>)
 8001250:	6013      	str	r3, [r2, #0]
			if(time_red1 < 0){
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <turning_mode_fsm+0x138>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	da02      	bge.n	8001260 <turning_mode_fsm+0xc8>
				time_red1 = 9;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <turning_mode_fsm+0x138>)
 800125c:	2209      	movs	r2, #9
 800125e:	601a      	str	r2, [r3, #0]
			time_green2 = time_red1 - time_yellow2;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <turning_mode_fsm+0x138>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <turning_mode_fsm+0x13c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	4a1b      	ldr	r2, [pc, #108]	; (80012d8 <turning_mode_fsm+0x140>)
 800126c:	6013      	str	r3, [r2, #0]
			if(time_green2 < 0){
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <turning_mode_fsm+0x140>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	da06      	bge.n	8001284 <turning_mode_fsm+0xec>
				time_red1 = time_yellow2;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <turning_mode_fsm+0x13c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <turning_mode_fsm+0x138>)
 800127c:	6013      	str	r3, [r2, #0]
				time_green2 = 0;
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <turning_mode_fsm+0x140>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
			time_road1 = time_red1;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <turning_mode_fsm+0x138>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <turning_mode_fsm+0x144>)
 800128a:	6013      	str	r3, [r2, #0]
			time_road2 = time_green2;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <turning_mode_fsm+0x140>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <turning_mode_fsm+0x148>)
 8001292:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_once(0)){
 8001294:	2000      	movs	r0, #0
 8001296:	f7fe ff99 	bl	80001cc <is_button_pressed_once>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 818f 	beq.w	80015c0 <turning_mode_fsm+0x428>
			turning_mode_state = SET_YELLOW1_YELLOW2;
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <turning_mode_fsm+0x130>)
 80012a4:	2202      	movs	r2, #2
 80012a6:	601a      	str	r2, [r3, #0]
			turn_on_yellow();
 80012a8:	f7ff f95c 	bl	8000564 <turn_on_yellow>
			time_road1 = time_yellow1;
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <turning_mode_fsm+0x14c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <turning_mode_fsm+0x144>)
 80012b2:	6013      	str	r3, [r2, #0]
			time_road2 = time_yellow2;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <turning_mode_fsm+0x13c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <turning_mode_fsm+0x148>)
 80012ba:	6013      	str	r3, [r2, #0]
			setTimer1(500);
 80012bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c0:	f7ff fe66 	bl	8000f90 <setTimer1>
		break;
 80012c4:	e17c      	b.n	80015c0 <turning_mode_fsm+0x428>
 80012c6:	bf00      	nop
 80012c8:	20000060 	.word	0x20000060
 80012cc:	200000c0 	.word	0x200000c0
 80012d0:	2000003c 	.word	0x2000003c
 80012d4:	2000004c 	.word	0x2000004c
 80012d8:	20000050 	.word	0x20000050
 80012dc:	200000b4 	.word	0x200000b4
 80012e0:	200000b8 	.word	0x200000b8
 80012e4:	20000040 	.word	0x20000040
		if(timer1_flag == 1){
 80012e8:	4b67      	ldr	r3, [pc, #412]	; (8001488 <turning_mode_fsm+0x2f0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d105      	bne.n	80012fc <turning_mode_fsm+0x164>
			setTimer1(500);
 80012f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f4:	f7ff fe4c 	bl	8000f90 <setTimer1>
			blink_yellow();
 80012f8:	f7ff f90e 	bl	8000518 <blink_yellow>
		if(is_button_pressed_once(1) || is_button_pressed_hold(1)){
 80012fc:	2001      	movs	r0, #1
 80012fe:	f7fe ff65 	bl	80001cc <is_button_pressed_once>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d105      	bne.n	8001314 <turning_mode_fsm+0x17c>
 8001308:	2001      	movs	r0, #1
 800130a:	f7fe ff79 	bl	8000200 <is_button_pressed_hold>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d049      	beq.n	80013a8 <turning_mode_fsm+0x210>
			time_yellow1++;
 8001314:	4b5d      	ldr	r3, [pc, #372]	; (800148c <turning_mode_fsm+0x2f4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	4a5c      	ldr	r2, [pc, #368]	; (800148c <turning_mode_fsm+0x2f4>)
 800131c:	6013      	str	r3, [r2, #0]
			if(time_yellow1 > 9){
 800131e:	4b5b      	ldr	r3, [pc, #364]	; (800148c <turning_mode_fsm+0x2f4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b09      	cmp	r3, #9
 8001324:	dd02      	ble.n	800132c <turning_mode_fsm+0x194>
				time_yellow1 = 0;
 8001326:	4b59      	ldr	r3, [pc, #356]	; (800148c <turning_mode_fsm+0x2f4>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
			time_yellow2 = time_yellow1;
 800132c:	4b57      	ldr	r3, [pc, #348]	; (800148c <turning_mode_fsm+0x2f4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a57      	ldr	r2, [pc, #348]	; (8001490 <turning_mode_fsm+0x2f8>)
 8001332:	6013      	str	r3, [r2, #0]
			time_red2 = time_green1 + time_yellow1;
 8001334:	4b57      	ldr	r3, [pc, #348]	; (8001494 <turning_mode_fsm+0x2fc>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b54      	ldr	r3, [pc, #336]	; (800148c <turning_mode_fsm+0x2f4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4413      	add	r3, r2
 800133e:	4a56      	ldr	r2, [pc, #344]	; (8001498 <turning_mode_fsm+0x300>)
 8001340:	6013      	str	r3, [r2, #0]
			if(time_red2 > 9) {
 8001342:	4b55      	ldr	r3, [pc, #340]	; (8001498 <turning_mode_fsm+0x300>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b09      	cmp	r3, #9
 8001348:	dd0d      	ble.n	8001366 <turning_mode_fsm+0x1ce>
				time_red2 = 9;
 800134a:	4b53      	ldr	r3, [pc, #332]	; (8001498 <turning_mode_fsm+0x300>)
 800134c:	2209      	movs	r2, #9
 800134e:	601a      	str	r2, [r3, #0]
				time_yellow1 = time_red2 - time_green1;
 8001350:	4b51      	ldr	r3, [pc, #324]	; (8001498 <turning_mode_fsm+0x300>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <turning_mode_fsm+0x2fc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	4a4c      	ldr	r2, [pc, #304]	; (800148c <turning_mode_fsm+0x2f4>)
 800135c:	6013      	str	r3, [r2, #0]
				time_yellow2 = time_yellow1;
 800135e:	4b4b      	ldr	r3, [pc, #300]	; (800148c <turning_mode_fsm+0x2f4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a4b      	ldr	r2, [pc, #300]	; (8001490 <turning_mode_fsm+0x2f8>)
 8001364:	6013      	str	r3, [r2, #0]
			time_red1 = time_green2 + time_yellow2;
 8001366:	4b4d      	ldr	r3, [pc, #308]	; (800149c <turning_mode_fsm+0x304>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4b49      	ldr	r3, [pc, #292]	; (8001490 <turning_mode_fsm+0x2f8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a4b      	ldr	r2, [pc, #300]	; (80014a0 <turning_mode_fsm+0x308>)
 8001372:	6013      	str	r3, [r2, #0]
			if(time_red1 > 9) {
 8001374:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <turning_mode_fsm+0x308>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b09      	cmp	r3, #9
 800137a:	dd0d      	ble.n	8001398 <turning_mode_fsm+0x200>
				time_red1 = 9;
 800137c:	4b48      	ldr	r3, [pc, #288]	; (80014a0 <turning_mode_fsm+0x308>)
 800137e:	2209      	movs	r2, #9
 8001380:	601a      	str	r2, [r3, #0]
				time_yellow2 = time_red1 - time_green2;
 8001382:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <turning_mode_fsm+0x308>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b45      	ldr	r3, [pc, #276]	; (800149c <turning_mode_fsm+0x304>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	4a40      	ldr	r2, [pc, #256]	; (8001490 <turning_mode_fsm+0x2f8>)
 800138e:	6013      	str	r3, [r2, #0]
				time_yellow1 = time_yellow2;
 8001390:	4b3f      	ldr	r3, [pc, #252]	; (8001490 <turning_mode_fsm+0x2f8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a3d      	ldr	r2, [pc, #244]	; (800148c <turning_mode_fsm+0x2f4>)
 8001396:	6013      	str	r3, [r2, #0]
			time_road1 = time_yellow1;
 8001398:	4b3c      	ldr	r3, [pc, #240]	; (800148c <turning_mode_fsm+0x2f4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a41      	ldr	r2, [pc, #260]	; (80014a4 <turning_mode_fsm+0x30c>)
 800139e:	6013      	str	r3, [r2, #0]
			time_road2 = time_yellow2;
 80013a0:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <turning_mode_fsm+0x2f8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a40      	ldr	r2, [pc, #256]	; (80014a8 <turning_mode_fsm+0x310>)
 80013a6:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_once(2) || is_button_pressed_hold(2)){
 80013a8:	2002      	movs	r0, #2
 80013aa:	f7fe ff0f 	bl	80001cc <is_button_pressed_once>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d105      	bne.n	80013c0 <turning_mode_fsm+0x228>
 80013b4:	2002      	movs	r0, #2
 80013b6:	f7fe ff23 	bl	8000200 <is_button_pressed_hold>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d049      	beq.n	8001454 <turning_mode_fsm+0x2bc>
			time_yellow1--;
 80013c0:	4b32      	ldr	r3, [pc, #200]	; (800148c <turning_mode_fsm+0x2f4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	4a31      	ldr	r2, [pc, #196]	; (800148c <turning_mode_fsm+0x2f4>)
 80013c8:	6013      	str	r3, [r2, #0]
			if(time_yellow1 < 0){
 80013ca:	4b30      	ldr	r3, [pc, #192]	; (800148c <turning_mode_fsm+0x2f4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	da02      	bge.n	80013d8 <turning_mode_fsm+0x240>
				time_yellow1 = 9;
 80013d2:	4b2e      	ldr	r3, [pc, #184]	; (800148c <turning_mode_fsm+0x2f4>)
 80013d4:	2209      	movs	r2, #9
 80013d6:	601a      	str	r2, [r3, #0]
			time_yellow2 = time_yellow1;
 80013d8:	4b2c      	ldr	r3, [pc, #176]	; (800148c <turning_mode_fsm+0x2f4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a2c      	ldr	r2, [pc, #176]	; (8001490 <turning_mode_fsm+0x2f8>)
 80013de:	6013      	str	r3, [r2, #0]
			time_red2 = time_green1 + time_yellow1;
 80013e0:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <turning_mode_fsm+0x2fc>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b29      	ldr	r3, [pc, #164]	; (800148c <turning_mode_fsm+0x2f4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a2b      	ldr	r2, [pc, #172]	; (8001498 <turning_mode_fsm+0x300>)
 80013ec:	6013      	str	r3, [r2, #0]
			if(time_red2 > 9) {
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <turning_mode_fsm+0x300>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b09      	cmp	r3, #9
 80013f4:	dd0d      	ble.n	8001412 <turning_mode_fsm+0x27a>
				time_red2 = 9;
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <turning_mode_fsm+0x300>)
 80013f8:	2209      	movs	r2, #9
 80013fa:	601a      	str	r2, [r3, #0]
				time_yellow1 = time_red2 - time_green1;
 80013fc:	4b26      	ldr	r3, [pc, #152]	; (8001498 <turning_mode_fsm+0x300>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <turning_mode_fsm+0x2fc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	4a21      	ldr	r2, [pc, #132]	; (800148c <turning_mode_fsm+0x2f4>)
 8001408:	6013      	str	r3, [r2, #0]
				time_yellow2 = time_yellow1;
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <turning_mode_fsm+0x2f4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a20      	ldr	r2, [pc, #128]	; (8001490 <turning_mode_fsm+0x2f8>)
 8001410:	6013      	str	r3, [r2, #0]
			time_red1 = time_green2 + time_yellow2;
 8001412:	4b22      	ldr	r3, [pc, #136]	; (800149c <turning_mode_fsm+0x304>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <turning_mode_fsm+0x2f8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	4a20      	ldr	r2, [pc, #128]	; (80014a0 <turning_mode_fsm+0x308>)
 800141e:	6013      	str	r3, [r2, #0]
			if(time_red1 > 9) {
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <turning_mode_fsm+0x308>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b09      	cmp	r3, #9
 8001426:	dd0d      	ble.n	8001444 <turning_mode_fsm+0x2ac>
				time_red1 = 9;
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <turning_mode_fsm+0x308>)
 800142a:	2209      	movs	r2, #9
 800142c:	601a      	str	r2, [r3, #0]
				time_yellow2 = time_red1 - time_green2;
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <turning_mode_fsm+0x308>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <turning_mode_fsm+0x304>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	4a15      	ldr	r2, [pc, #84]	; (8001490 <turning_mode_fsm+0x2f8>)
 800143a:	6013      	str	r3, [r2, #0]
				time_yellow1 = time_yellow2;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <turning_mode_fsm+0x2f8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a12      	ldr	r2, [pc, #72]	; (800148c <turning_mode_fsm+0x2f4>)
 8001442:	6013      	str	r3, [r2, #0]
			time_road1 = time_yellow1;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <turning_mode_fsm+0x2f4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <turning_mode_fsm+0x30c>)
 800144a:	6013      	str	r3, [r2, #0]
			time_road2 = time_yellow2;
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <turning_mode_fsm+0x2f8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <turning_mode_fsm+0x310>)
 8001452:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_once(0)){
 8001454:	2000      	movs	r0, #0
 8001456:	f7fe feb9 	bl	80001cc <is_button_pressed_once>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80b1 	beq.w	80015c4 <turning_mode_fsm+0x42c>
			turning_mode_state = SET_GREEN1_RED2;
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <turning_mode_fsm+0x314>)
 8001464:	2203      	movs	r2, #3
 8001466:	601a      	str	r2, [r3, #0]
			display_green1_red2();
 8001468:	f7ff f806 	bl	8000478 <display_green1_red2>
			time_road1 = time_green1;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <turning_mode_fsm+0x2fc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <turning_mode_fsm+0x30c>)
 8001472:	6013      	str	r3, [r2, #0]
			time_road2 = time_red2;
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <turning_mode_fsm+0x300>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <turning_mode_fsm+0x310>)
 800147a:	6013      	str	r3, [r2, #0]
			setTimer1(500);
 800147c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001480:	f7ff fd86 	bl	8000f90 <setTimer1>
		break;
 8001484:	e09e      	b.n	80015c4 <turning_mode_fsm+0x42c>
 8001486:	bf00      	nop
 8001488:	200000c0 	.word	0x200000c0
 800148c:	20000040 	.word	0x20000040
 8001490:	2000004c 	.word	0x2000004c
 8001494:	20000044 	.word	0x20000044
 8001498:	20000048 	.word	0x20000048
 800149c:	20000050 	.word	0x20000050
 80014a0:	2000003c 	.word	0x2000003c
 80014a4:	200000b4 	.word	0x200000b4
 80014a8:	200000b8 	.word	0x200000b8
 80014ac:	20000060 	.word	0x20000060
		if(timer1_flag == 1){
 80014b0:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <turning_mode_fsm+0x438>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d105      	bne.n	80014c4 <turning_mode_fsm+0x32c>
			setTimer1(500);
 80014b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014bc:	f7ff fd68 	bl	8000f90 <setTimer1>
			blink_green1_red2();
 80014c0:	f7ff f89e 	bl	8000600 <blink_green1_red2>
		if(is_button_pressed_once(1) || is_button_pressed_hold(1)){
 80014c4:	2001      	movs	r0, #1
 80014c6:	f7fe fe81 	bl	80001cc <is_button_pressed_once>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d105      	bne.n	80014dc <turning_mode_fsm+0x344>
 80014d0:	2001      	movs	r0, #1
 80014d2:	f7fe fe95 	bl	8000200 <is_button_pressed_hold>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d025      	beq.n	8001528 <turning_mode_fsm+0x390>
			time_red2++;
 80014dc:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <turning_mode_fsm+0x43c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	4a3c      	ldr	r2, [pc, #240]	; (80015d4 <turning_mode_fsm+0x43c>)
 80014e4:	6013      	str	r3, [r2, #0]
			if(time_red2 > 9){
 80014e6:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <turning_mode_fsm+0x43c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b09      	cmp	r3, #9
 80014ec:	dd02      	ble.n	80014f4 <turning_mode_fsm+0x35c>
				time_red2 = 0;
 80014ee:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <turning_mode_fsm+0x43c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
			time_green1 = time_red2 - time_yellow1;
 80014f4:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <turning_mode_fsm+0x43c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <turning_mode_fsm+0x440>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	4a37      	ldr	r2, [pc, #220]	; (80015dc <turning_mode_fsm+0x444>)
 8001500:	6013      	str	r3, [r2, #0]
			if(time_green1 < 0) {
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <turning_mode_fsm+0x444>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	da06      	bge.n	8001518 <turning_mode_fsm+0x380>
				time_red2 = time_yellow1;
 800150a:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <turning_mode_fsm+0x440>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a31      	ldr	r2, [pc, #196]	; (80015d4 <turning_mode_fsm+0x43c>)
 8001510:	6013      	str	r3, [r2, #0]
				time_green1 = 0;
 8001512:	4b32      	ldr	r3, [pc, #200]	; (80015dc <turning_mode_fsm+0x444>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
			time_road1 = time_green1;
 8001518:	4b30      	ldr	r3, [pc, #192]	; (80015dc <turning_mode_fsm+0x444>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a30      	ldr	r2, [pc, #192]	; (80015e0 <turning_mode_fsm+0x448>)
 800151e:	6013      	str	r3, [r2, #0]
			time_road2 = time_red2;
 8001520:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <turning_mode_fsm+0x43c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a2f      	ldr	r2, [pc, #188]	; (80015e4 <turning_mode_fsm+0x44c>)
 8001526:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_once(2) || is_button_pressed_hold(2)){
 8001528:	2002      	movs	r0, #2
 800152a:	f7fe fe4f 	bl	80001cc <is_button_pressed_once>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d105      	bne.n	8001540 <turning_mode_fsm+0x3a8>
 8001534:	2002      	movs	r0, #2
 8001536:	f7fe fe63 	bl	8000200 <is_button_pressed_hold>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d025      	beq.n	800158c <turning_mode_fsm+0x3f4>
			time_red2--;
 8001540:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <turning_mode_fsm+0x43c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3b01      	subs	r3, #1
 8001546:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <turning_mode_fsm+0x43c>)
 8001548:	6013      	str	r3, [r2, #0]
			if(time_red2 < 0){
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <turning_mode_fsm+0x43c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	da02      	bge.n	8001558 <turning_mode_fsm+0x3c0>
				time_red2 = 9;
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <turning_mode_fsm+0x43c>)
 8001554:	2209      	movs	r2, #9
 8001556:	601a      	str	r2, [r3, #0]
			time_green1 = time_red2 - time_yellow1;
 8001558:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <turning_mode_fsm+0x43c>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <turning_mode_fsm+0x440>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	4a1e      	ldr	r2, [pc, #120]	; (80015dc <turning_mode_fsm+0x444>)
 8001564:	6013      	str	r3, [r2, #0]
			if(time_green1 < 0){
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <turning_mode_fsm+0x444>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	da06      	bge.n	800157c <turning_mode_fsm+0x3e4>
				time_red2 = time_yellow1;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <turning_mode_fsm+0x440>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <turning_mode_fsm+0x43c>)
 8001574:	6013      	str	r3, [r2, #0]
				time_green1 = 0;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <turning_mode_fsm+0x444>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
			time_road1 = time_green1;
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <turning_mode_fsm+0x444>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a17      	ldr	r2, [pc, #92]	; (80015e0 <turning_mode_fsm+0x448>)
 8001582:	6013      	str	r3, [r2, #0]
			time_road2 = time_red2;
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <turning_mode_fsm+0x43c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a16      	ldr	r2, [pc, #88]	; (80015e4 <turning_mode_fsm+0x44c>)
 800158a:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_once(0)){
 800158c:	2000      	movs	r0, #0
 800158e:	f7fe fe1d 	bl	80001cc <is_button_pressed_once>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d017      	beq.n	80015c8 <turning_mode_fsm+0x430>
			turning_mode_state = SET_RED1_GREEN2;
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <turning_mode_fsm+0x450>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]
			display_red1_green2();
 800159e:	f7fe ff1b 	bl	80003d8 <display_red1_green2>
			time_road1 = time_red1;
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <turning_mode_fsm+0x454>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <turning_mode_fsm+0x448>)
 80015a8:	6013      	str	r3, [r2, #0]
			time_road2 = time_green2;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <turning_mode_fsm+0x458>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <turning_mode_fsm+0x44c>)
 80015b0:	6013      	str	r3, [r2, #0]
			setTimer1(500);
 80015b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b6:	f7ff fceb 	bl	8000f90 <setTimer1>
		break;
 80015ba:	e005      	b.n	80015c8 <turning_mode_fsm+0x430>
		break;
 80015bc:	bf00      	nop
 80015be:	e004      	b.n	80015ca <turning_mode_fsm+0x432>
		break;
 80015c0:	bf00      	nop
 80015c2:	e002      	b.n	80015ca <turning_mode_fsm+0x432>
		break;
 80015c4:	bf00      	nop
 80015c6:	e000      	b.n	80015ca <turning_mode_fsm+0x432>
		break;
 80015c8:	bf00      	nop
	}
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200000c0 	.word	0x200000c0
 80015d4:	20000048 	.word	0x20000048
 80015d8:	20000040 	.word	0x20000040
 80015dc:	20000044 	.word	0x20000044
 80015e0:	200000b4 	.word	0x200000b4
 80015e4:	200000b8 	.word	0x200000b8
 80015e8:	20000060 	.word	0x20000060
 80015ec:	2000003c 	.word	0x2000003c
 80015f0:	20000050 	.word	0x20000050

080015f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015f4:	f7ff fdca 	bl	800118c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f8:	480b      	ldr	r0, [pc, #44]	; (8001628 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015fa:	490c      	ldr	r1, [pc, #48]	; (800162c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015fc:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a09      	ldr	r2, [pc, #36]	; (8001634 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001610:	4c09      	ldr	r4, [pc, #36]	; (8001638 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800161e:	f001 fb25 	bl	8002c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001622:	f7ff fab1 	bl	8000b88 <main>
  bx lr
 8001626:	4770      	bx	lr
  ldr r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800162c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001630:	08002d08 	.word	0x08002d08
  ldr r2, =_sbss
 8001634:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001638:	20000120 	.word	0x20000120

0800163c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC1_2_IRQHandler>
	...

08001640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_Init+0x28>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a07      	ldr	r2, [pc, #28]	; (8001668 <HAL_Init+0x28>)
 800164a:	f043 0310 	orr.w	r3, r3, #16
 800164e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001650:	2003      	movs	r0, #3
 8001652:	f000 f923 	bl	800189c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001656:	200f      	movs	r0, #15
 8001658:	f000 f808 	bl	800166c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800165c:	f7ff fd0e 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40022000 	.word	0x40022000

0800166c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_InitTick+0x54>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_InitTick+0x58>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001682:	fbb3 f3f1 	udiv	r3, r3, r1
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f93b 	bl	8001906 <HAL_SYSTICK_Config>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e00e      	b.n	80016b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b0f      	cmp	r3, #15
 800169e:	d80a      	bhi.n	80016b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a0:	2200      	movs	r2, #0
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f000 f903 	bl	80018b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ac:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <HAL_InitTick+0x5c>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e000      	b.n	80016b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	2000005c 	.word	0x2000005c
 80016c4:	20000068 	.word	0x20000068
 80016c8:	20000064 	.word	0x20000064

080016cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_IncTick+0x1c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_IncTick+0x20>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a03      	ldr	r2, [pc, #12]	; (80016ec <HAL_IncTick+0x20>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	20000068 	.word	0x20000068
 80016ec:	2000011c 	.word	0x2000011c

080016f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b02      	ldr	r3, [pc, #8]	; (8001700 <HAL_GetTick+0x10>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	2000011c 	.word	0x2000011c

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800172c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001736:	4a04      	ldr	r2, [pc, #16]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db0b      	blt.n	8001792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4906      	ldr	r1, [pc, #24]	; (800179c <__NVIC_EnableIRQ+0x34>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	e000e100 	.word	0xe000e100

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db0a      	blt.n	80017ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	490c      	ldr	r1, [pc, #48]	; (80017ec <__NVIC_SetPriority+0x4c>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c8:	e00a      	b.n	80017e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4908      	ldr	r1, [pc, #32]	; (80017f0 <__NVIC_SetPriority+0x50>)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3b04      	subs	r3, #4
 80017d8:	0112      	lsls	r2, r2, #4
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	440b      	add	r3, r1
 80017de:	761a      	strb	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	; 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f1c3 0307 	rsb	r3, r3, #7
 800180e:	2b04      	cmp	r3, #4
 8001810:	bf28      	it	cs
 8001812:	2304      	movcs	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3304      	adds	r3, #4
 800181a:	2b06      	cmp	r3, #6
 800181c:	d902      	bls.n	8001824 <NVIC_EncodePriority+0x30>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3b03      	subs	r3, #3
 8001822:	e000      	b.n	8001826 <NVIC_EncodePriority+0x32>
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43d9      	mvns	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	4313      	orrs	r3, r2
         );
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	; 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001868:	d301      	bcc.n	800186e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186a:	2301      	movs	r3, #1
 800186c:	e00f      	b.n	800188e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <SysTick_Config+0x40>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001876:	210f      	movs	r1, #15
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f7ff ff90 	bl	80017a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <SysTick_Config+0x40>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <SysTick_Config+0x40>)
 8001888:	2207      	movs	r2, #7
 800188a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	e000e010 	.word	0xe000e010

0800189c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff2d 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c4:	f7ff ff42 	bl	800174c <__NVIC_GetPriorityGrouping>
 80018c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ff90 	bl	80017f4 <NVIC_EncodePriority>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff5f 	bl	80017a0 <__NVIC_SetPriority>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff35 	bl	8001768 <__NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffa2 	bl	8001858 <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001920:	b480      	push	{r7}
 8001922:	b08b      	sub	sp, #44	; 0x2c
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001932:	e169      	b.n	8001c08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001934:	2201      	movs	r2, #1
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	429a      	cmp	r2, r3
 800194e:	f040 8158 	bne.w	8001c02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4a9a      	ldr	r2, [pc, #616]	; (8001bc0 <HAL_GPIO_Init+0x2a0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d05e      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
 800195c:	4a98      	ldr	r2, [pc, #608]	; (8001bc0 <HAL_GPIO_Init+0x2a0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d875      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 8001962:	4a98      	ldr	r2, [pc, #608]	; (8001bc4 <HAL_GPIO_Init+0x2a4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d058      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
 8001968:	4a96      	ldr	r2, [pc, #600]	; (8001bc4 <HAL_GPIO_Init+0x2a4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d86f      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 800196e:	4a96      	ldr	r2, [pc, #600]	; (8001bc8 <HAL_GPIO_Init+0x2a8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d052      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
 8001974:	4a94      	ldr	r2, [pc, #592]	; (8001bc8 <HAL_GPIO_Init+0x2a8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d869      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 800197a:	4a94      	ldr	r2, [pc, #592]	; (8001bcc <HAL_GPIO_Init+0x2ac>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d04c      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
 8001980:	4a92      	ldr	r2, [pc, #584]	; (8001bcc <HAL_GPIO_Init+0x2ac>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d863      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 8001986:	4a92      	ldr	r2, [pc, #584]	; (8001bd0 <HAL_GPIO_Init+0x2b0>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d046      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
 800198c:	4a90      	ldr	r2, [pc, #576]	; (8001bd0 <HAL_GPIO_Init+0x2b0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d85d      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 8001992:	2b12      	cmp	r3, #18
 8001994:	d82a      	bhi.n	80019ec <HAL_GPIO_Init+0xcc>
 8001996:	2b12      	cmp	r3, #18
 8001998:	d859      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 800199a:	a201      	add	r2, pc, #4	; (adr r2, 80019a0 <HAL_GPIO_Init+0x80>)
 800199c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a0:	08001a1b 	.word	0x08001a1b
 80019a4:	080019f5 	.word	0x080019f5
 80019a8:	08001a07 	.word	0x08001a07
 80019ac:	08001a49 	.word	0x08001a49
 80019b0:	08001a4f 	.word	0x08001a4f
 80019b4:	08001a4f 	.word	0x08001a4f
 80019b8:	08001a4f 	.word	0x08001a4f
 80019bc:	08001a4f 	.word	0x08001a4f
 80019c0:	08001a4f 	.word	0x08001a4f
 80019c4:	08001a4f 	.word	0x08001a4f
 80019c8:	08001a4f 	.word	0x08001a4f
 80019cc:	08001a4f 	.word	0x08001a4f
 80019d0:	08001a4f 	.word	0x08001a4f
 80019d4:	08001a4f 	.word	0x08001a4f
 80019d8:	08001a4f 	.word	0x08001a4f
 80019dc:	08001a4f 	.word	0x08001a4f
 80019e0:	08001a4f 	.word	0x08001a4f
 80019e4:	080019fd 	.word	0x080019fd
 80019e8:	08001a11 	.word	0x08001a11
 80019ec:	4a79      	ldr	r2, [pc, #484]	; (8001bd4 <HAL_GPIO_Init+0x2b4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d013      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019f2:	e02c      	b.n	8001a4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	623b      	str	r3, [r7, #32]
          break;
 80019fa:	e029      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	3304      	adds	r3, #4
 8001a02:	623b      	str	r3, [r7, #32]
          break;
 8001a04:	e024      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	3308      	adds	r3, #8
 8001a0c:	623b      	str	r3, [r7, #32]
          break;
 8001a0e:	e01f      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	330c      	adds	r3, #12
 8001a16:	623b      	str	r3, [r7, #32]
          break;
 8001a18:	e01a      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a22:	2304      	movs	r3, #4
 8001a24:	623b      	str	r3, [r7, #32]
          break;
 8001a26:	e013      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d105      	bne.n	8001a3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a30:	2308      	movs	r3, #8
 8001a32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	611a      	str	r2, [r3, #16]
          break;
 8001a3a:	e009      	b.n	8001a50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	615a      	str	r2, [r3, #20]
          break;
 8001a46:	e003      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
          break;
 8001a4c:	e000      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          break;
 8001a4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2bff      	cmp	r3, #255	; 0xff
 8001a54:	d801      	bhi.n	8001a5a <HAL_GPIO_Init+0x13a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	e001      	b.n	8001a5e <HAL_GPIO_Init+0x13e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2bff      	cmp	r3, #255	; 0xff
 8001a64:	d802      	bhi.n	8001a6c <HAL_GPIO_Init+0x14c>
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	e002      	b.n	8001a72 <HAL_GPIO_Init+0x152>
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	3b08      	subs	r3, #8
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	210f      	movs	r1, #15
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	401a      	ands	r2, r3
 8001a84:	6a39      	ldr	r1, [r7, #32]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80b1 	beq.w	8001c02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa0:	4b4d      	ldr	r3, [pc, #308]	; (8001bd8 <HAL_GPIO_Init+0x2b8>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	4a4c      	ldr	r2, [pc, #304]	; (8001bd8 <HAL_GPIO_Init+0x2b8>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6193      	str	r3, [r2, #24]
 8001aac:	4b4a      	ldr	r3, [pc, #296]	; (8001bd8 <HAL_GPIO_Init+0x2b8>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ab8:	4a48      	ldr	r2, [pc, #288]	; (8001bdc <HAL_GPIO_Init+0x2bc>)
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a40      	ldr	r2, [pc, #256]	; (8001be0 <HAL_GPIO_Init+0x2c0>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d013      	beq.n	8001b0c <HAL_GPIO_Init+0x1ec>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a3f      	ldr	r2, [pc, #252]	; (8001be4 <HAL_GPIO_Init+0x2c4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d00d      	beq.n	8001b08 <HAL_GPIO_Init+0x1e8>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a3e      	ldr	r2, [pc, #248]	; (8001be8 <HAL_GPIO_Init+0x2c8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d007      	beq.n	8001b04 <HAL_GPIO_Init+0x1e4>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a3d      	ldr	r2, [pc, #244]	; (8001bec <HAL_GPIO_Init+0x2cc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d101      	bne.n	8001b00 <HAL_GPIO_Init+0x1e0>
 8001afc:	2303      	movs	r3, #3
 8001afe:	e006      	b.n	8001b0e <HAL_GPIO_Init+0x1ee>
 8001b00:	2304      	movs	r3, #4
 8001b02:	e004      	b.n	8001b0e <HAL_GPIO_Init+0x1ee>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e002      	b.n	8001b0e <HAL_GPIO_Init+0x1ee>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <HAL_GPIO_Init+0x1ee>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b10:	f002 0203 	and.w	r2, r2, #3
 8001b14:	0092      	lsls	r2, r2, #2
 8001b16:	4093      	lsls	r3, r2
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b1e:	492f      	ldr	r1, [pc, #188]	; (8001bdc <HAL_GPIO_Init+0x2bc>)
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	3302      	adds	r3, #2
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b38:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	492c      	ldr	r1, [pc, #176]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	608b      	str	r3, [r1, #8]
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	4928      	ldr	r1, [pc, #160]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b60:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	4922      	ldr	r1, [pc, #136]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60cb      	str	r3, [r1, #12]
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	491e      	ldr	r1, [pc, #120]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b88:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4918      	ldr	r1, [pc, #96]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	4914      	ldr	r1, [pc, #80]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d021      	beq.n	8001bf4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	490e      	ldr	r1, [pc, #56]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
 8001bbc:	e021      	b.n	8001c02 <HAL_GPIO_Init+0x2e2>
 8001bbe:	bf00      	nop
 8001bc0:	10320000 	.word	0x10320000
 8001bc4:	10310000 	.word	0x10310000
 8001bc8:	10220000 	.word	0x10220000
 8001bcc:	10210000 	.word	0x10210000
 8001bd0:	10120000 	.word	0x10120000
 8001bd4:	10110000 	.word	0x10110000
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40010000 	.word	0x40010000
 8001be0:	40010800 	.word	0x40010800
 8001be4:	40010c00 	.word	0x40010c00
 8001be8:	40011000 	.word	0x40011000
 8001bec:	40011400 	.word	0x40011400
 8001bf0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_GPIO_Init+0x304>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	4909      	ldr	r1, [pc, #36]	; (8001c24 <HAL_GPIO_Init+0x304>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	3301      	adds	r3, #1
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f47f ae8e 	bne.w	8001934 <HAL_GPIO_Init+0x14>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	372c      	adds	r7, #44	; 0x2c
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	40010400 	.word	0x40010400

08001c28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	887b      	ldrh	r3, [r7, #2]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
 8001c44:	e001      	b.n	8001c4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	807b      	strh	r3, [r7, #2]
 8001c62:	4613      	mov	r3, r2
 8001c64:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c66:	787b      	ldrb	r3, [r7, #1]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c6c:	887a      	ldrh	r2, [r7, #2]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c72:	e003      	b.n	8001c7c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c74:	887b      	ldrh	r3, [r7, #2]
 8001c76:	041a      	lsls	r2, r3, #16
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	611a      	str	r2, [r3, #16]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c98:	887a      	ldrh	r2, [r7, #2]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	041a      	lsls	r2, r3, #16
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43d9      	mvns	r1, r3
 8001ca4:	887b      	ldrh	r3, [r7, #2]
 8001ca6:	400b      	ands	r3, r1
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	611a      	str	r2, [r3, #16]
}
 8001cae:	bf00      	nop
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e26c      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8087 	beq.w	8001de6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cd8:	4b92      	ldr	r3, [pc, #584]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d00c      	beq.n	8001cfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ce4:	4b8f      	ldr	r3, [pc, #572]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d112      	bne.n	8001d16 <HAL_RCC_OscConfig+0x5e>
 8001cf0:	4b8c      	ldr	r3, [pc, #560]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfc:	d10b      	bne.n	8001d16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfe:	4b89      	ldr	r3, [pc, #548]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d06c      	beq.n	8001de4 <HAL_RCC_OscConfig+0x12c>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d168      	bne.n	8001de4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e246      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1e:	d106      	bne.n	8001d2e <HAL_RCC_OscConfig+0x76>
 8001d20:	4b80      	ldr	r3, [pc, #512]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a7f      	ldr	r2, [pc, #508]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	e02e      	b.n	8001d8c <HAL_RCC_OscConfig+0xd4>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x98>
 8001d36:	4b7b      	ldr	r3, [pc, #492]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a7a      	ldr	r2, [pc, #488]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b78      	ldr	r3, [pc, #480]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a77      	ldr	r2, [pc, #476]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e01d      	b.n	8001d8c <HAL_RCC_OscConfig+0xd4>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0xbc>
 8001d5a:	4b72      	ldr	r3, [pc, #456]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a6e      	ldr	r2, [pc, #440]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0xd4>
 8001d74:	4b6b      	ldr	r3, [pc, #428]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a6a      	ldr	r2, [pc, #424]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b68      	ldr	r3, [pc, #416]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a67      	ldr	r2, [pc, #412]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff fcac 	bl	80016f0 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fca8 	bl	80016f0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e1fa      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	4b5d      	ldr	r3, [pc, #372]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0xe4>
 8001dba:	e014      	b.n	8001de6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fc98 	bl	80016f0 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fc94 	bl	80016f0 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e1e6      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x10c>
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d063      	beq.n	8001eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df2:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dfe:	4b49      	ldr	r3, [pc, #292]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d11c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x18c>
 8001e0a:	4b46      	ldr	r3, [pc, #280]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d116      	bne.n	8001e44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e16:	4b43      	ldr	r3, [pc, #268]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_RCC_OscConfig+0x176>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e1ba      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4939      	ldr	r1, [pc, #228]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	e03a      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d020      	beq.n	8001e8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e4c:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e52:	f7ff fc4d 	bl	80016f0 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7ff fc49 	bl	80016f0 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e19b      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6c:	4b2d      	ldr	r3, [pc, #180]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4927      	ldr	r1, [pc, #156]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]
 8001e8c:	e015      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8e:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <HAL_RCC_OscConfig+0x270>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff fc2c 	bl	80016f0 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fc28 	bl	80016f0 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e17a      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d03a      	beq.n	8001f3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d019      	beq.n	8001f02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed4:	f7ff fc0c 	bl	80016f0 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001edc:	f7ff fc08 	bl	80016f0 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e15a      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f000 fa9a 	bl	8002434 <RCC_Delay>
 8001f00:	e01c      	b.n	8001f3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f08:	f7ff fbf2 	bl	80016f0 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0e:	e00f      	b.n	8001f30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f10:	f7ff fbee 	bl	80016f0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d908      	bls.n	8001f30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e140      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000
 8001f28:	42420000 	.word	0x42420000
 8001f2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f30:	4b9e      	ldr	r3, [pc, #632]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1e9      	bne.n	8001f10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80a6 	beq.w	8002096 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4e:	4b97      	ldr	r3, [pc, #604]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10d      	bne.n	8001f76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	4b94      	ldr	r3, [pc, #592]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	4a93      	ldr	r2, [pc, #588]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	61d3      	str	r3, [r2, #28]
 8001f66:	4b91      	ldr	r3, [pc, #580]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f72:	2301      	movs	r3, #1
 8001f74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f76:	4b8e      	ldr	r3, [pc, #568]	; (80021b0 <HAL_RCC_OscConfig+0x4f8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d118      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f82:	4b8b      	ldr	r3, [pc, #556]	; (80021b0 <HAL_RCC_OscConfig+0x4f8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a8a      	ldr	r2, [pc, #552]	; (80021b0 <HAL_RCC_OscConfig+0x4f8>)
 8001f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fbaf 	bl	80016f0 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f96:	f7ff fbab 	bl	80016f0 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b64      	cmp	r3, #100	; 0x64
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0fd      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	4b81      	ldr	r3, [pc, #516]	; (80021b0 <HAL_RCC_OscConfig+0x4f8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d106      	bne.n	8001fca <HAL_RCC_OscConfig+0x312>
 8001fbc:	4b7b      	ldr	r3, [pc, #492]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4a7a      	ldr	r2, [pc, #488]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6213      	str	r3, [r2, #32]
 8001fc8:	e02d      	b.n	8002026 <HAL_RCC_OscConfig+0x36e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0x334>
 8001fd2:	4b76      	ldr	r3, [pc, #472]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	4a75      	ldr	r2, [pc, #468]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	6213      	str	r3, [r2, #32]
 8001fde:	4b73      	ldr	r3, [pc, #460]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4a72      	ldr	r2, [pc, #456]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	f023 0304 	bic.w	r3, r3, #4
 8001fe8:	6213      	str	r3, [r2, #32]
 8001fea:	e01c      	b.n	8002026 <HAL_RCC_OscConfig+0x36e>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d10c      	bne.n	800200e <HAL_RCC_OscConfig+0x356>
 8001ff4:	4b6d      	ldr	r3, [pc, #436]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	4a6c      	ldr	r2, [pc, #432]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6213      	str	r3, [r2, #32]
 8002000:	4b6a      	ldr	r3, [pc, #424]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a69      	ldr	r2, [pc, #420]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6213      	str	r3, [r2, #32]
 800200c:	e00b      	b.n	8002026 <HAL_RCC_OscConfig+0x36e>
 800200e:	4b67      	ldr	r3, [pc, #412]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4a66      	ldr	r2, [pc, #408]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	6213      	str	r3, [r2, #32]
 800201a:	4b64      	ldr	r3, [pc, #400]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4a63      	ldr	r2, [pc, #396]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8002020:	f023 0304 	bic.w	r3, r3, #4
 8002024:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d015      	beq.n	800205a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202e:	f7ff fb5f 	bl	80016f0 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002034:	e00a      	b.n	800204c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7ff fb5b 	bl	80016f0 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	f241 3288 	movw	r2, #5000	; 0x1388
 8002044:	4293      	cmp	r3, r2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e0ab      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204c:	4b57      	ldr	r3, [pc, #348]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ee      	beq.n	8002036 <HAL_RCC_OscConfig+0x37e>
 8002058:	e014      	b.n	8002084 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205a:	f7ff fb49 	bl	80016f0 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7ff fb45 	bl	80016f0 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e095      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002078:	4b4c      	ldr	r3, [pc, #304]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1ee      	bne.n	8002062 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002084:	7dfb      	ldrb	r3, [r7, #23]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d105      	bne.n	8002096 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208a:	4b48      	ldr	r3, [pc, #288]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	4a47      	ldr	r2, [pc, #284]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8002090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002094:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8081 	beq.w	80021a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a0:	4b42      	ldr	r3, [pc, #264]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 030c 	and.w	r3, r3, #12
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d061      	beq.n	8002170 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d146      	bne.n	8002142 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b4:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <HAL_RCC_OscConfig+0x4fc>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7ff fb19 	bl	80016f0 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c2:	f7ff fb15 	bl	80016f0 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e067      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d4:	4b35      	ldr	r3, [pc, #212]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f0      	bne.n	80020c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e8:	d108      	bne.n	80020fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ea:	4b30      	ldr	r3, [pc, #192]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	492d      	ldr	r1, [pc, #180]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020fc:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a19      	ldr	r1, [r3, #32]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	430b      	orrs	r3, r1
 800210e:	4927      	ldr	r1, [pc, #156]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_RCC_OscConfig+0x4fc>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7ff fae9 	bl	80016f0 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7ff fae5 	bl	80016f0 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e037      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002134:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x46a>
 8002140:	e02f      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <HAL_RCC_OscConfig+0x4fc>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff fad2 	bl	80016f0 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002150:	f7ff face 	bl	80016f0 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e020      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x498>
 800216e:	e018      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e013      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_OscConfig+0x4f4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	429a      	cmp	r2, r3
 800218e:	d106      	bne.n	800219e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	429a      	cmp	r2, r3
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40007000 	.word	0x40007000
 80021b4:	42420060 	.word	0x42420060

080021b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0d0      	b.n	800236e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021cc:	4b6a      	ldr	r3, [pc, #424]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d910      	bls.n	80021fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b67      	ldr	r3, [pc, #412]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 0207 	bic.w	r2, r3, #7
 80021e2:	4965      	ldr	r1, [pc, #404]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ea:	4b63      	ldr	r3, [pc, #396]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0b8      	b.n	800236e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d020      	beq.n	800224a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002214:	4b59      	ldr	r3, [pc, #356]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4a58      	ldr	r2, [pc, #352]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800221e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800222c:	4b53      	ldr	r3, [pc, #332]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a52      	ldr	r2, [pc, #328]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002236:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002238:	4b50      	ldr	r3, [pc, #320]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	494d      	ldr	r1, [pc, #308]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d040      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d107      	bne.n	800226e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	4b47      	ldr	r3, [pc, #284]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d115      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e07f      	b.n	800236e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002276:	4b41      	ldr	r3, [pc, #260]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e073      	b.n	800236e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002286:	4b3d      	ldr	r3, [pc, #244]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e06b      	b.n	800236e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002296:	4b39      	ldr	r3, [pc, #228]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f023 0203 	bic.w	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4936      	ldr	r1, [pc, #216]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a8:	f7ff fa22 	bl	80016f0 <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b0:	f7ff fa1e 	bl	80016f0 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e053      	b.n	800236e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	4b2d      	ldr	r3, [pc, #180]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 020c 	and.w	r2, r3, #12
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d1eb      	bne.n	80022b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022d8:	4b27      	ldr	r3, [pc, #156]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d210      	bcs.n	8002308 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 0207 	bic.w	r2, r3, #7
 80022ee:	4922      	ldr	r1, [pc, #136]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e032      	b.n	800236e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4916      	ldr	r1, [pc, #88]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	4313      	orrs	r3, r2
 8002324:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d009      	beq.n	8002346 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002332:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	490e      	ldr	r1, [pc, #56]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002346:	f000 f821 	bl	800238c <HAL_RCC_GetSysClockFreq>
 800234a:	4602      	mov	r2, r0
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	490a      	ldr	r1, [pc, #40]	; (8002380 <HAL_RCC_ClockConfig+0x1c8>)
 8002358:	5ccb      	ldrb	r3, [r1, r3]
 800235a:	fa22 f303 	lsr.w	r3, r2, r3
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <HAL_RCC_ClockConfig+0x1cc>)
 8002360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_RCC_ClockConfig+0x1d0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff f980 	bl	800166c <HAL_InitTick>

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40022000 	.word	0x40022000
 800237c:	40021000 	.word	0x40021000
 8002380:	08002cdc 	.word	0x08002cdc
 8002384:	2000005c 	.word	0x2000005c
 8002388:	20000064 	.word	0x20000064

0800238c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023a6:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <HAL_RCC_GetSysClockFreq+0x94>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d002      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0x30>
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d003      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0x36>
 80023ba:	e027      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <HAL_RCC_GetSysClockFreq+0x98>)
 80023be:	613b      	str	r3, [r7, #16]
      break;
 80023c0:	e027      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	0c9b      	lsrs	r3, r3, #18
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	4a17      	ldr	r2, [pc, #92]	; (8002428 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023cc:	5cd3      	ldrb	r3, [r2, r3]
 80023ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d010      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_RCC_GetSysClockFreq+0x94>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	0c5b      	lsrs	r3, r3, #17
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	4a11      	ldr	r2, [pc, #68]	; (800242c <HAL_RCC_GetSysClockFreq+0xa0>)
 80023e6:	5cd3      	ldrb	r3, [r2, r3]
 80023e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ee:	fb02 f203 	mul.w	r2, r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	e004      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a0c      	ldr	r2, [pc, #48]	; (8002430 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	613b      	str	r3, [r7, #16]
      break;
 800240a:	e002      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_RCC_GetSysClockFreq+0x98>)
 800240e:	613b      	str	r3, [r7, #16]
      break;
 8002410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002412:	693b      	ldr	r3, [r7, #16]
}
 8002414:	4618      	mov	r0, r3
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	007a1200 	.word	0x007a1200
 8002428:	08002cec 	.word	0x08002cec
 800242c:	08002cfc 	.word	0x08002cfc
 8002430:	003d0900 	.word	0x003d0900

08002434 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <RCC_Delay+0x34>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0a      	ldr	r2, [pc, #40]	; (800246c <RCC_Delay+0x38>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0a5b      	lsrs	r3, r3, #9
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002450:	bf00      	nop
  }
  while (Delay --);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1e5a      	subs	r2, r3, #1
 8002456:	60fa      	str	r2, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f9      	bne.n	8002450 <RCC_Delay+0x1c>
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	2000005c 	.word	0x2000005c
 800246c:	10624dd3 	.word	0x10624dd3

08002470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e041      	b.n	8002506 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe fe22 	bl	80010e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3304      	adds	r3, #4
 80024ac:	4619      	mov	r1, r3
 80024ae:	4610      	mov	r0, r2
 80024b0:	f000 fa74 	bl	800299c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	d001      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e03a      	b.n	800259e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <HAL_TIM_Base_Start_IT+0x98>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00e      	beq.n	8002568 <HAL_TIM_Base_Start_IT+0x58>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002552:	d009      	beq.n	8002568 <HAL_TIM_Base_Start_IT+0x58>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a14      	ldr	r2, [pc, #80]	; (80025ac <HAL_TIM_Base_Start_IT+0x9c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d004      	beq.n	8002568 <HAL_TIM_Base_Start_IT+0x58>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a13      	ldr	r2, [pc, #76]	; (80025b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d111      	bne.n	800258c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b06      	cmp	r3, #6
 8002578:	d010      	beq.n	800259c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258a:	e007      	b.n	800259c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40000400 	.word	0x40000400
 80025b0:	40000800 	.word	0x40000800

080025b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d122      	bne.n	8002610 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d11b      	bne.n	8002610 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0202 	mvn.w	r2, #2
 80025e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f9b4 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 80025fc:	e005      	b.n	800260a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f9a7 	bl	8002952 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f9b6 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b04      	cmp	r3, #4
 800261c:	d122      	bne.n	8002664 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b04      	cmp	r3, #4
 800262a:	d11b      	bne.n	8002664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0204 	mvn.w	r2, #4
 8002634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2202      	movs	r2, #2
 800263a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f98a 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 8002650:	e005      	b.n	800265e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f97d 	bl	8002952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f98c 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b08      	cmp	r3, #8
 8002670:	d122      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b08      	cmp	r3, #8
 800267e:	d11b      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0208 	mvn.w	r2, #8
 8002688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2204      	movs	r2, #4
 800268e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f960 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 80026a4:	e005      	b.n	80026b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f953 	bl	8002952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f962 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	2b10      	cmp	r3, #16
 80026c4:	d122      	bne.n	800270c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d11b      	bne.n	800270c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0210 	mvn.w	r2, #16
 80026dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2208      	movs	r2, #8
 80026e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f936 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 80026f8:	e005      	b.n	8002706 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f929 	bl	8002952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f938 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d10e      	bne.n	8002738 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	d107      	bne.n	8002738 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0201 	mvn.w	r2, #1
 8002730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fe fb52 	bl	8000ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002742:	2b80      	cmp	r3, #128	; 0x80
 8002744:	d10e      	bne.n	8002764 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002750:	2b80      	cmp	r3, #128	; 0x80
 8002752:	d107      	bne.n	8002764 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fa7b 	bl	8002c5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276e:	2b40      	cmp	r3, #64	; 0x40
 8002770:	d10e      	bne.n	8002790 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d107      	bne.n	8002790 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f8fc 	bl	8002988 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0320 	and.w	r3, r3, #32
 800279a:	2b20      	cmp	r3, #32
 800279c:	d10e      	bne.n	80027bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0320 	and.w	r3, r3, #32
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d107      	bne.n	80027bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0220 	mvn.w	r2, #32
 80027b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fa46 	bl	8002c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_TIM_ConfigClockSource+0x1c>
 80027dc:	2302      	movs	r3, #2
 80027de:	e0b4      	b.n	800294a <HAL_TIM_ConfigClockSource+0x186>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002818:	d03e      	beq.n	8002898 <HAL_TIM_ConfigClockSource+0xd4>
 800281a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281e:	f200 8087 	bhi.w	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002826:	f000 8086 	beq.w	8002936 <HAL_TIM_ConfigClockSource+0x172>
 800282a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282e:	d87f      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b70      	cmp	r3, #112	; 0x70
 8002832:	d01a      	beq.n	800286a <HAL_TIM_ConfigClockSource+0xa6>
 8002834:	2b70      	cmp	r3, #112	; 0x70
 8002836:	d87b      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b60      	cmp	r3, #96	; 0x60
 800283a:	d050      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x11a>
 800283c:	2b60      	cmp	r3, #96	; 0x60
 800283e:	d877      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b50      	cmp	r3, #80	; 0x50
 8002842:	d03c      	beq.n	80028be <HAL_TIM_ConfigClockSource+0xfa>
 8002844:	2b50      	cmp	r3, #80	; 0x50
 8002846:	d873      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d058      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x13a>
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d86f      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b30      	cmp	r3, #48	; 0x30
 8002852:	d064      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x15a>
 8002854:	2b30      	cmp	r3, #48	; 0x30
 8002856:	d86b      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b20      	cmp	r3, #32
 800285a:	d060      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x15a>
 800285c:	2b20      	cmp	r3, #32
 800285e:	d867      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b00      	cmp	r3, #0
 8002862:	d05c      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x15a>
 8002864:	2b10      	cmp	r3, #16
 8002866:	d05a      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x15a>
 8002868:	e062      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6899      	ldr	r1, [r3, #8]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f000 f968 	bl	8002b4e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800288c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	609a      	str	r2, [r3, #8]
      break;
 8002896:	e04f      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6899      	ldr	r1, [r3, #8]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f000 f951 	bl	8002b4e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ba:	609a      	str	r2, [r3, #8]
      break;
 80028bc:	e03c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6859      	ldr	r1, [r3, #4]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	461a      	mov	r2, r3
 80028cc:	f000 f8c8 	bl	8002a60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2150      	movs	r1, #80	; 0x50
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f91f 	bl	8002b1a <TIM_ITRx_SetConfig>
      break;
 80028dc:	e02c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f000 f8e6 	bl	8002abc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2160      	movs	r1, #96	; 0x60
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f90f 	bl	8002b1a <TIM_ITRx_SetConfig>
      break;
 80028fc:	e01c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6859      	ldr	r1, [r3, #4]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	461a      	mov	r2, r3
 800290c:	f000 f8a8 	bl	8002a60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2140      	movs	r1, #64	; 0x40
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f8ff 	bl	8002b1a <TIM_ITRx_SetConfig>
      break;
 800291c:	e00c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f000 f8f6 	bl	8002b1a <TIM_ITRx_SetConfig>
      break;
 800292e:	e003      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
      break;
 8002934:	e000      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
	...

0800299c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a29      	ldr	r2, [pc, #164]	; (8002a54 <TIM_Base_SetConfig+0xb8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00b      	beq.n	80029cc <TIM_Base_SetConfig+0x30>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ba:	d007      	beq.n	80029cc <TIM_Base_SetConfig+0x30>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <TIM_Base_SetConfig+0xbc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d003      	beq.n	80029cc <TIM_Base_SetConfig+0x30>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a25      	ldr	r2, [pc, #148]	; (8002a5c <TIM_Base_SetConfig+0xc0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d108      	bne.n	80029de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <TIM_Base_SetConfig+0xb8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00b      	beq.n	80029fe <TIM_Base_SetConfig+0x62>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ec:	d007      	beq.n	80029fe <TIM_Base_SetConfig+0x62>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a19      	ldr	r2, [pc, #100]	; (8002a58 <TIM_Base_SetConfig+0xbc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d003      	beq.n	80029fe <TIM_Base_SetConfig+0x62>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <TIM_Base_SetConfig+0xc0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d108      	bne.n	8002a10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <TIM_Base_SetConfig+0xb8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d103      	bne.n	8002a44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	615a      	str	r2, [r3, #20]
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	40012c00 	.word	0x40012c00
 8002a58:	40000400 	.word	0x40000400
 8002a5c:	40000800 	.word	0x40000800

08002a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f023 0201 	bic.w	r2, r3, #1
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f023 030a 	bic.w	r3, r3, #10
 8002a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	621a      	str	r2, [r3, #32]
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	f023 0210 	bic.w	r2, r3, #16
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	031b      	lsls	r3, r3, #12
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002af8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	621a      	str	r2, [r3, #32]
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr

08002b1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b085      	sub	sp, #20
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f043 0307 	orr.w	r3, r3, #7
 8002b3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	609a      	str	r2, [r3, #8]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b087      	sub	sp, #28
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	021a      	lsls	r2, r3, #8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	609a      	str	r2, [r3, #8]
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e046      	b.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a16      	ldr	r2, [pc, #88]	; (8002c3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00e      	beq.n	8002c06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d009      	beq.n	8002c06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d004      	beq.n	8002c06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a10      	ldr	r2, [pc, #64]	; (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d10c      	bne.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	40012c00 	.word	0x40012c00
 8002c40:	40000400 	.word	0x40000400
 8002c44:	40000800 	.word	0x40000800

08002c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <__libc_init_array>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	2600      	movs	r6, #0
 8002c70:	4d0c      	ldr	r5, [pc, #48]	; (8002ca4 <__libc_init_array+0x38>)
 8002c72:	4c0d      	ldr	r4, [pc, #52]	; (8002ca8 <__libc_init_array+0x3c>)
 8002c74:	1b64      	subs	r4, r4, r5
 8002c76:	10a4      	asrs	r4, r4, #2
 8002c78:	42a6      	cmp	r6, r4
 8002c7a:	d109      	bne.n	8002c90 <__libc_init_array+0x24>
 8002c7c:	f000 f822 	bl	8002cc4 <_init>
 8002c80:	2600      	movs	r6, #0
 8002c82:	4d0a      	ldr	r5, [pc, #40]	; (8002cac <__libc_init_array+0x40>)
 8002c84:	4c0a      	ldr	r4, [pc, #40]	; (8002cb0 <__libc_init_array+0x44>)
 8002c86:	1b64      	subs	r4, r4, r5
 8002c88:	10a4      	asrs	r4, r4, #2
 8002c8a:	42a6      	cmp	r6, r4
 8002c8c:	d105      	bne.n	8002c9a <__libc_init_array+0x2e>
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c94:	4798      	blx	r3
 8002c96:	3601      	adds	r6, #1
 8002c98:	e7ee      	b.n	8002c78 <__libc_init_array+0xc>
 8002c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9e:	4798      	blx	r3
 8002ca0:	3601      	adds	r6, #1
 8002ca2:	e7f2      	b.n	8002c8a <__libc_init_array+0x1e>
 8002ca4:	08002d00 	.word	0x08002d00
 8002ca8:	08002d00 	.word	0x08002d00
 8002cac:	08002d00 	.word	0x08002d00
 8002cb0:	08002d04 	.word	0x08002d04

08002cb4 <memset>:
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4402      	add	r2, r0
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d100      	bne.n	8002cbe <memset+0xa>
 8002cbc:	4770      	bx	lr
 8002cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002cc2:	e7f9      	b.n	8002cb8 <memset+0x4>

08002cc4 <_init>:
 8002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc6:	bf00      	nop
 8002cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cca:	bc08      	pop	{r3}
 8002ccc:	469e      	mov	lr, r3
 8002cce:	4770      	bx	lr

08002cd0 <_fini>:
 8002cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd2:	bf00      	nop
 8002cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd6:	bc08      	pop	{r3}
 8002cd8:	469e      	mov	lr, r3
 8002cda:	4770      	bx	lr
