
light_traffic_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ce4  08002ce4  00012ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d08  08002d08  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d08  08002d08  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d08  08002d08  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d08  08002d08  00012d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d0c  08002d0c  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000006c  08002d7c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002d7c  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096b6  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b09  00000000  00000000  0002974b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002b258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002bd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017114  00000000  00000000  0002c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcb0  00000000  00000000  000437ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000848e3  00000000  00000000  0004f45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3d3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a4  00000000  00000000  000d3d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ccc 	.word	0x08002ccc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08002ccc 	.word	0x08002ccc

0800014c <reset_all_button>:
int keyReg2[num_buttons] =  	{NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int keyReg3[num_buttons] =  	{NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int time_for_key_press[num_buttons] = {2000, 2000, 2000};

void reset_all_button(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for(int i=0; i< num_buttons; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e00c      	b.n	8000172 <reset_all_button+0x26>
		button_flag_pressed_once[i] = 0;
 8000158:	4a0a      	ldr	r2, [pc, #40]	; (8000184 <reset_all_button+0x38>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2100      	movs	r1, #0
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		button_flag_pressed_hold[i] = 0;
 8000162:	4a09      	ldr	r2, [pc, #36]	; (8000188 <reset_all_button+0x3c>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2100      	movs	r1, #0
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i< num_buttons; i++){
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	3301      	adds	r3, #1
 8000170:	607b      	str	r3, [r7, #4]
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2b02      	cmp	r3, #2
 8000176:	ddef      	ble.n	8000158 <reset_all_button+0xc>
	}
}
 8000178:	bf00      	nop
 800017a:	bf00      	nop
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	20000088 	.word	0x20000088
 8000188:	20000094 	.word	0x20000094

0800018c <key_n_process_pressed_once>:

void key_n_process_pressed_once(int n){
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	button_flag_pressed_once[n] = 1;
 8000194:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <key_n_process_pressed_once+0x1c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2101      	movs	r1, #1
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800019e:	bf00      	nop
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000088 	.word	0x20000088

080001ac <key_n_process_pressed_hold>:
void key_n_process_pressed_hold(int n){
 80001ac:	b480      	push	{r7}
 80001ae:	b083      	sub	sp, #12
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	button_flag_pressed_hold[n] = 1;
 80001b4:	4a04      	ldr	r2, [pc, #16]	; (80001c8 <key_n_process_pressed_hold+0x1c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2101      	movs	r1, #1
 80001ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001be:	bf00      	nop
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	20000094 	.word	0x20000094

080001cc <is_button_pressed_once>:

int is_button_pressed_once(int n){
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	if(button_flag_pressed_once[n] == 1){
 80001d4:	4a09      	ldr	r2, [pc, #36]	; (80001fc <is_button_pressed_once+0x30>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d106      	bne.n	80001ee <is_button_pressed_once+0x22>
		button_flag_pressed_once[n] = 0;
 80001e0:	4a06      	ldr	r2, [pc, #24]	; (80001fc <is_button_pressed_once+0x30>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2100      	movs	r1, #0
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001ea:	2301      	movs	r3, #1
 80001ec:	e000      	b.n	80001f0 <is_button_pressed_once+0x24>
	}
	else {
		return 0;
 80001ee:	2300      	movs	r3, #0
	}
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000088 	.word	0x20000088

08000200 <is_button_pressed_hold>:
int is_button_pressed_hold(int n){
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	if(button_flag_pressed_hold[n] == 1){
 8000208:	4a09      	ldr	r2, [pc, #36]	; (8000230 <is_button_pressed_hold+0x30>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000210:	2b01      	cmp	r3, #1
 8000212:	d106      	bne.n	8000222 <is_button_pressed_hold+0x22>
		button_flag_pressed_hold[n] = 0;
 8000214:	4a06      	ldr	r2, [pc, #24]	; (8000230 <is_button_pressed_hold+0x30>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2100      	movs	r1, #0
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800021e:	2301      	movs	r3, #1
 8000220:	e000      	b.n	8000224 <is_button_pressed_hold+0x24>
	}
	else {
		return 0;
 8000222:	2300      	movs	r3, #0
	}
}
 8000224:	4618      	mov	r0, r3
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000094 	.word	0x20000094

08000234 <get_key_input>:



void get_key_input(int n){
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	keyReg0[n] = keyReg1[n];
 800023c:	4a54      	ldr	r2, [pc, #336]	; (8000390 <get_key_input+0x15c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000244:	4953      	ldr	r1, [pc, #332]	; (8000394 <get_key_input+0x160>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[n] = keyReg2[n];
 800024c:	4a52      	ldr	r2, [pc, #328]	; (8000398 <get_key_input+0x164>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	494e      	ldr	r1, [pc, #312]	; (8000390 <get_key_input+0x15c>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// set up button n here
	switch(n){
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b02      	cmp	r3, #2
 8000260:	d01b      	beq.n	800029a <get_key_input+0x66>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b02      	cmp	r3, #2
 8000266:	dc21      	bgt.n	80002ac <get_key_input+0x78>
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d003      	beq.n	8000276 <get_key_input+0x42>
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d009      	beq.n	8000288 <get_key_input+0x54>
		break;
	case 2:
		 keyReg2[2] = HAL_GPIO_ReadPin(BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin);
		break;
	default:
		break;
 8000274:	e01a      	b.n	80002ac <get_key_input+0x78>
		 keyReg2[0] = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, BUTTON_MODE_Pin);
 8000276:	2140      	movs	r1, #64	; 0x40
 8000278:	4848      	ldr	r0, [pc, #288]	; (800039c <get_key_input+0x168>)
 800027a:	f001 fcd9 	bl	8001c30 <HAL_GPIO_ReadPin>
 800027e:	4603      	mov	r3, r0
 8000280:	461a      	mov	r2, r3
 8000282:	4b45      	ldr	r3, [pc, #276]	; (8000398 <get_key_input+0x164>)
 8000284:	601a      	str	r2, [r3, #0]
		break;
 8000286:	e012      	b.n	80002ae <get_key_input+0x7a>
		 keyReg2[1] = HAL_GPIO_ReadPin(BUTTON_UP_GPIO_Port, BUTTON_UP_Pin);
 8000288:	2180      	movs	r1, #128	; 0x80
 800028a:	4845      	ldr	r0, [pc, #276]	; (80003a0 <get_key_input+0x16c>)
 800028c:	f001 fcd0 	bl	8001c30 <HAL_GPIO_ReadPin>
 8000290:	4603      	mov	r3, r0
 8000292:	461a      	mov	r2, r3
 8000294:	4b40      	ldr	r3, [pc, #256]	; (8000398 <get_key_input+0x164>)
 8000296:	605a      	str	r2, [r3, #4]
		break;
 8000298:	e009      	b.n	80002ae <get_key_input+0x7a>
		 keyReg2[2] = HAL_GPIO_ReadPin(BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin);
 800029a:	2140      	movs	r1, #64	; 0x40
 800029c:	4840      	ldr	r0, [pc, #256]	; (80003a0 <get_key_input+0x16c>)
 800029e:	f001 fcc7 	bl	8001c30 <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	461a      	mov	r2, r3
 80002a6:	4b3c      	ldr	r3, [pc, #240]	; (8000398 <get_key_input+0x164>)
 80002a8:	609a      	str	r2, [r3, #8]
		break;
 80002aa:	e000      	b.n	80002ae <get_key_input+0x7a>
		break;
 80002ac:	bf00      	nop
	}
	/////////
	if((keyReg0[n] == keyReg1[n]) && (keyReg1[n] == keyReg2[n]) ){
 80002ae:	4a39      	ldr	r2, [pc, #228]	; (8000394 <get_key_input+0x160>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b6:	4936      	ldr	r1, [pc, #216]	; (8000390 <get_key_input+0x15c>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d162      	bne.n	8000388 <get_key_input+0x154>
 80002c2:	4a33      	ldr	r2, [pc, #204]	; (8000390 <get_key_input+0x15c>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ca:	4933      	ldr	r1, [pc, #204]	; (8000398 <get_key_input+0x164>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d158      	bne.n	8000388 <get_key_input+0x154>
		if(keyReg2[n] != keyReg3[n]){
 80002d6:	4a30      	ldr	r2, [pc, #192]	; (8000398 <get_key_input+0x164>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002de:	4931      	ldr	r1, [pc, #196]	; (80003a4 <get_key_input+0x170>)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d02c      	beq.n	8000344 <get_key_input+0x110>
			keyReg3[n] = keyReg2[n];
 80002ea:	4a2b      	ldr	r2, [pc, #172]	; (8000398 <get_key_input+0x164>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f2:	492c      	ldr	r1, [pc, #176]	; (80003a4 <get_key_input+0x170>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[n] == NORMAL_STATE && en_pressed_once[n] == 1){
 80002fa:	4a27      	ldr	r2, [pc, #156]	; (8000398 <get_key_input+0x164>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d10d      	bne.n	8000322 <get_key_input+0xee>
 8000306:	4a28      	ldr	r2, [pc, #160]	; (80003a8 <get_key_input+0x174>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d107      	bne.n	8000322 <get_key_input+0xee>
				//TODO when pressed once
				en_pressed_once[n] = 0;
 8000312:	4a25      	ldr	r2, [pc, #148]	; (80003a8 <get_key_input+0x174>)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2100      	movs	r1, #0
 8000318:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				key_n_process_pressed_once(n);
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f7ff ff35 	bl	800018c <key_n_process_pressed_once>
			}
			if(keyReg2[n] == PRESSED_STATE){
 8000322:	4a1d      	ldr	r2, [pc, #116]	; (8000398 <get_key_input+0x164>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d104      	bne.n	8000338 <get_key_input+0x104>
				en_pressed_once[n] = 1;
 800032e:	4a1e      	ldr	r2, [pc, #120]	; (80003a8 <get_key_input+0x174>)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2101      	movs	r1, #1
 8000334:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			time_for_key_press[n] = 200;
 8000338:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <get_key_input+0x178>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	21c8      	movs	r1, #200	; 0xc8
 800033e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				time_for_key_press[n] = 200;
			}
		}
	}
}
 8000342:	e021      	b.n	8000388 <get_key_input+0x154>
			time_for_key_press[n]--;
 8000344:	4a19      	ldr	r2, [pc, #100]	; (80003ac <get_key_input+0x178>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800034c:	1e5a      	subs	r2, r3, #1
 800034e:	4917      	ldr	r1, [pc, #92]	; (80003ac <get_key_input+0x178>)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(time_for_key_press[n] == 0){
 8000356:	4a15      	ldr	r2, [pc, #84]	; (80003ac <get_key_input+0x178>)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d112      	bne.n	8000388 <get_key_input+0x154>
				if(keyReg2[n] == PRESSED_STATE){
 8000362:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <get_key_input+0x164>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d107      	bne.n	800037e <get_key_input+0x14a>
					en_pressed_once[n] = 0;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <get_key_input+0x174>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2100      	movs	r1, #0
 8000374:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					key_n_process_pressed_hold(n);
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f7ff ff17 	bl	80001ac <key_n_process_pressed_hold>
				time_for_key_press[n] = 200;
 800037e:	4a0b      	ldr	r2, [pc, #44]	; (80003ac <get_key_input+0x178>)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	21c8      	movs	r1, #200	; 0xc8
 8000384:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	2000000c 	.word	0x2000000c
 8000394:	20000000 	.word	0x20000000
 8000398:	20000018 	.word	0x20000018
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	40010800 	.word	0x40010800
 80003a4:	20000024 	.word	0x20000024
 80003a8:	200000a0 	.word	0x200000a0
 80003ac:	20000030 	.word	0x20000030

080003b0 <get_key_input_all>:

void get_key_input_all(){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0


	for(int i = 0; i < num_buttons ;i++){
 80003b6:	2300      	movs	r3, #0
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	e005      	b.n	80003c8 <get_key_input_all+0x18>
		get_key_input(i);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff39 	bl	8000234 <get_key_input>
	for(int i = 0; i < num_buttons ;i++){
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3301      	adds	r3, #1
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	ddf6      	ble.n	80003bc <get_key_input_all+0xc>
	}
}
 80003ce:	bf00      	nop
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <display_red1_green2>:
 *      Author: ASUS TUF GAMING
 */

#include "driver.h"

void display_red1_green2(){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2101      	movs	r1, #1
 80003e0:	480e      	ldr	r0, [pc, #56]	; (800041c <display_red1_green2+0x44>)
 80003e2:	f001 fc3c 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2102      	movs	r1, #2
 80003ea:	480c      	ldr	r0, [pc, #48]	; (800041c <display_red1_green2+0x44>)
 80003ec:	f001 fc37 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2110      	movs	r1, #16
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <display_red1_green2+0x44>)
 80003f6:	f001 fc32 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2101      	movs	r1, #1
 80003fe:	4808      	ldr	r0, [pc, #32]	; (8000420 <display_red1_green2+0x48>)
 8000400:	f001 fc2d 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 8000404:	2201      	movs	r2, #1
 8000406:	2102      	movs	r1, #2
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <display_red1_green2+0x4c>)
 800040a:	f001 fc28 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2101      	movs	r1, #1
 8000412:	4804      	ldr	r0, [pc, #16]	; (8000424 <display_red1_green2+0x4c>)
 8000414:	f001 fc23 	bl	8001c5e <HAL_GPIO_WritePin>
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40010800 	.word	0x40010800
 8000420:	40010c00 	.word	0x40010c00
 8000424:	40011000 	.word	0x40011000

08000428 <display_red1_yellow2>:
void display_red1_yellow2(){
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2101      	movs	r1, #1
 8000430:	480e      	ldr	r0, [pc, #56]	; (800046c <display_red1_yellow2+0x44>)
 8000432:	f001 fc14 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 8000436:	2201      	movs	r2, #1
 8000438:	2102      	movs	r1, #2
 800043a:	480c      	ldr	r0, [pc, #48]	; (800046c <display_red1_yellow2+0x44>)
 800043c:	f001 fc0f 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 8000440:	2201      	movs	r2, #1
 8000442:	2110      	movs	r1, #16
 8000444:	4809      	ldr	r0, [pc, #36]	; (800046c <display_red1_yellow2+0x44>)
 8000446:	f001 fc0a 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 800044a:	2201      	movs	r2, #1
 800044c:	2101      	movs	r1, #1
 800044e:	4808      	ldr	r0, [pc, #32]	; (8000470 <display_red1_yellow2+0x48>)
 8000450:	f001 fc05 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2102      	movs	r1, #2
 8000458:	4806      	ldr	r0, [pc, #24]	; (8000474 <display_red1_yellow2+0x4c>)
 800045a:	f001 fc00 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 800045e:	2201      	movs	r2, #1
 8000460:	2101      	movs	r1, #1
 8000462:	4804      	ldr	r0, [pc, #16]	; (8000474 <display_red1_yellow2+0x4c>)
 8000464:	f001 fbfb 	bl	8001c5e <HAL_GPIO_WritePin>
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010800 	.word	0x40010800
 8000470:	40010c00 	.word	0x40010c00
 8000474:	40011000 	.word	0x40011000

08000478 <display_green1_red2>:
void display_green1_red2(){
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 800047c:	2201      	movs	r2, #1
 800047e:	2101      	movs	r1, #1
 8000480:	480e      	ldr	r0, [pc, #56]	; (80004bc <display_green1_red2+0x44>)
 8000482:	f001 fbec 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 8000486:	2201      	movs	r2, #1
 8000488:	2102      	movs	r1, #2
 800048a:	480c      	ldr	r0, [pc, #48]	; (80004bc <display_green1_red2+0x44>)
 800048c:	f001 fbe7 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2110      	movs	r1, #16
 8000494:	4809      	ldr	r0, [pc, #36]	; (80004bc <display_green1_red2+0x44>)
 8000496:	f001 fbe2 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2101      	movs	r1, #1
 800049e:	4808      	ldr	r0, [pc, #32]	; (80004c0 <display_green1_red2+0x48>)
 80004a0:	f001 fbdd 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2102      	movs	r1, #2
 80004a8:	4806      	ldr	r0, [pc, #24]	; (80004c4 <display_green1_red2+0x4c>)
 80004aa:	f001 fbd8 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2101      	movs	r1, #1
 80004b2:	4804      	ldr	r0, [pc, #16]	; (80004c4 <display_green1_red2+0x4c>)
 80004b4:	f001 fbd3 	bl	8001c5e <HAL_GPIO_WritePin>
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40010800 	.word	0x40010800
 80004c0:	40010c00 	.word	0x40010c00
 80004c4:	40011000 	.word	0x40011000

080004c8 <display_yellow1_red2>:
void display_yellow1_red2(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2101      	movs	r1, #1
 80004d0:	480e      	ldr	r0, [pc, #56]	; (800050c <display_yellow1_red2+0x44>)
 80004d2:	f001 fbc4 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2102      	movs	r1, #2
 80004da:	480c      	ldr	r0, [pc, #48]	; (800050c <display_yellow1_red2+0x44>)
 80004dc:	f001 fbbf 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2110      	movs	r1, #16
 80004e4:	4809      	ldr	r0, [pc, #36]	; (800050c <display_yellow1_red2+0x44>)
 80004e6:	f001 fbba 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2101      	movs	r1, #1
 80004ee:	4808      	ldr	r0, [pc, #32]	; (8000510 <display_yellow1_red2+0x48>)
 80004f0:	f001 fbb5 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2102      	movs	r1, #2
 80004f8:	4806      	ldr	r0, [pc, #24]	; (8000514 <display_yellow1_red2+0x4c>)
 80004fa:	f001 fbb0 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	2101      	movs	r1, #1
 8000502:	4804      	ldr	r0, [pc, #16]	; (8000514 <display_yellow1_red2+0x4c>)
 8000504:	f001 fbab 	bl	8001c5e <HAL_GPIO_WritePin>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40010800 	.word	0x40010800
 8000510:	40010c00 	.word	0x40010c00
 8000514:	40011000 	.word	0x40011000

08000518 <blink_yellow>:
void blink_yellow(){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2101      	movs	r1, #1
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <blink_yellow+0x40>)
 8000522:	f001 fb9c 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin);
 8000526:	2102      	movs	r1, #2
 8000528:	480b      	ldr	r0, [pc, #44]	; (8000558 <blink_yellow+0x40>)
 800052a:	f001 fbb0 	bl	8001c8e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2110      	movs	r1, #16
 8000532:	4809      	ldr	r0, [pc, #36]	; (8000558 <blink_yellow+0x40>)
 8000534:	f001 fb93 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2101      	movs	r1, #1
 800053c:	4807      	ldr	r0, [pc, #28]	; (800055c <blink_yellow+0x44>)
 800053e:	f001 fb8e 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin);
 8000542:	2102      	movs	r1, #2
 8000544:	4806      	ldr	r0, [pc, #24]	; (8000560 <blink_yellow+0x48>)
 8000546:	f001 fba2 	bl	8001c8e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2101      	movs	r1, #1
 800054e:	4804      	ldr	r0, [pc, #16]	; (8000560 <blink_yellow+0x48>)
 8000550:	f001 fb85 	bl	8001c5e <HAL_GPIO_WritePin>
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40010800 	.word	0x40010800
 800055c:	40010c00 	.word	0x40010c00
 8000560:	40011000 	.word	0x40011000

08000564 <turn_on_yellow>:
void turn_on_yellow(){
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2101      	movs	r1, #1
 800056c:	480e      	ldr	r0, [pc, #56]	; (80005a8 <turn_on_yellow+0x44>)
 800056e:	f001 fb76 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2102      	movs	r1, #2
 8000576:	480c      	ldr	r0, [pc, #48]	; (80005a8 <turn_on_yellow+0x44>)
 8000578:	f001 fb71 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2110      	movs	r1, #16
 8000580:	4809      	ldr	r0, [pc, #36]	; (80005a8 <turn_on_yellow+0x44>)
 8000582:	f001 fb6c 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 8000586:	2201      	movs	r2, #1
 8000588:	2101      	movs	r1, #1
 800058a:	4808      	ldr	r0, [pc, #32]	; (80005ac <turn_on_yellow+0x48>)
 800058c:	f001 fb67 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2102      	movs	r1, #2
 8000594:	4806      	ldr	r0, [pc, #24]	; (80005b0 <turn_on_yellow+0x4c>)
 8000596:	f001 fb62 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 800059a:	2201      	movs	r2, #1
 800059c:	2101      	movs	r1, #1
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <turn_on_yellow+0x4c>)
 80005a0:	f001 fb5d 	bl	8001c5e <HAL_GPIO_WritePin>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40010800 	.word	0x40010800
 80005ac:	40010c00 	.word	0x40010c00
 80005b0:	40011000 	.word	0x40011000

080005b4 <blink_red1_green2>:
void blink_red1_green2(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_RED_GPIO_Port, LED1_RED_Pin);
 80005b8:	2101      	movs	r1, #1
 80005ba:	480e      	ldr	r0, [pc, #56]	; (80005f4 <blink_red1_green2+0x40>)
 80005bc:	f001 fb67 	bl	8001c8e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2102      	movs	r1, #2
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <blink_red1_green2+0x40>)
 80005c6:	f001 fb4a 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2110      	movs	r1, #16
 80005ce:	4809      	ldr	r0, [pc, #36]	; (80005f4 <blink_red1_green2+0x40>)
 80005d0:	f001 fb45 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2101      	movs	r1, #1
 80005d8:	4807      	ldr	r0, [pc, #28]	; (80005f8 <blink_red1_green2+0x44>)
 80005da:	f001 fb40 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	2102      	movs	r1, #2
 80005e2:	4806      	ldr	r0, [pc, #24]	; (80005fc <blink_red1_green2+0x48>)
 80005e4:	f001 fb3b 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin);
 80005e8:	2101      	movs	r1, #1
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <blink_red1_green2+0x48>)
 80005ec:	f001 fb4f 	bl	8001c8e <HAL_GPIO_TogglePin>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40010800 	.word	0x40010800
 80005f8:	40010c00 	.word	0x40010c00
 80005fc:	40011000 	.word	0x40011000

08000600 <blink_green1_red2>:
void blink_green1_red2(){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2101      	movs	r1, #1
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <blink_green1_red2+0x40>)
 800060a:	f001 fb28 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, SET);
 800060e:	2201      	movs	r2, #1
 8000610:	2102      	movs	r1, #2
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <blink_green1_red2+0x40>)
 8000614:	f001 fb23 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 8000618:	2110      	movs	r1, #16
 800061a:	4809      	ldr	r0, [pc, #36]	; (8000640 <blink_green1_red2+0x40>)
 800061c:	f001 fb37 	bl	8001c8e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_RED_GPIO_Port, LED2_RED_Pin);
 8000620:	2101      	movs	r1, #1
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <blink_green1_red2+0x44>)
 8000624:	f001 fb33 	bl	8001c8e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2102      	movs	r1, #2
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <blink_green1_red2+0x48>)
 800062e:	f001 fb16 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2101      	movs	r1, #1
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <blink_green1_red2+0x48>)
 8000638:	f001 fb11 	bl	8001c5e <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40010800 	.word	0x40010800
 8000644:	40010c00 	.word	0x40010c00
 8000648:	40011000 	.word	0x40011000

0800064c <display_led_7seg>:
void display_led_7seg(int num){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b09      	cmp	r3, #9
 8000658:	f200 8194 	bhi.w	8000984 <display_led_7seg+0x338>
 800065c:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <display_led_7seg+0x18>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	0800068d 	.word	0x0800068d
 8000668:	080006d9 	.word	0x080006d9
 800066c:	08000725 	.word	0x08000725
 8000670:	08000771 	.word	0x08000771
 8000674:	080007bd 	.word	0x080007bd
 8000678:	08000809 	.word	0x08000809
 800067c:	08000855 	.word	0x08000855
 8000680:	080008a1 	.word	0x080008a1
 8000684:	080008ed 	.word	0x080008ed
 8000688:	08000939 	.word	0x08000939
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2108      	movs	r1, #8
 8000690:	48bf      	ldr	r0, [pc, #764]	; (8000990 <display_led_7seg+0x344>)
 8000692:	f001 fae4 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2104      	movs	r1, #4
 800069a:	48bd      	ldr	r0, [pc, #756]	; (8000990 <display_led_7seg+0x344>)
 800069c:	f001 fadf 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a6:	48ba      	ldr	r0, [pc, #744]	; (8000990 <display_led_7seg+0x344>)
 80006a8:	f001 fad9 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2108      	movs	r1, #8
 80006b0:	48b8      	ldr	r0, [pc, #736]	; (8000994 <display_led_7seg+0x348>)
 80006b2:	f001 fad4 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	48b6      	ldr	r0, [pc, #728]	; (8000994 <display_led_7seg+0x348>)
 80006bc:	f001 facf 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2110      	movs	r1, #16
 80006c4:	48b3      	ldr	r0, [pc, #716]	; (8000994 <display_led_7seg+0x348>)
 80006c6:	f001 faca 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d0:	48b0      	ldr	r0, [pc, #704]	; (8000994 <display_led_7seg+0x348>)
 80006d2:	f001 fac4 	bl	8001c5e <HAL_GPIO_WritePin>
		break;
 80006d6:	e156      	b.n	8000986 <display_led_7seg+0x33a>
	case 1:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2108      	movs	r1, #8
 80006dc:	48ac      	ldr	r0, [pc, #688]	; (8000990 <display_led_7seg+0x344>)
 80006de:	f001 fabe 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2104      	movs	r1, #4
 80006e6:	48aa      	ldr	r0, [pc, #680]	; (8000990 <display_led_7seg+0x344>)
 80006e8:	f001 fab9 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f2:	48a7      	ldr	r0, [pc, #668]	; (8000990 <display_led_7seg+0x344>)
 80006f4:	f001 fab3 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2108      	movs	r1, #8
 80006fc:	48a5      	ldr	r0, [pc, #660]	; (8000994 <display_led_7seg+0x348>)
 80006fe:	f001 faae 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 8000702:	2201      	movs	r2, #1
 8000704:	2120      	movs	r1, #32
 8000706:	48a3      	ldr	r0, [pc, #652]	; (8000994 <display_led_7seg+0x348>)
 8000708:	f001 faa9 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2110      	movs	r1, #16
 8000710:	48a0      	ldr	r0, [pc, #640]	; (8000994 <display_led_7seg+0x348>)
 8000712:	f001 faa4 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071c:	489d      	ldr	r0, [pc, #628]	; (8000994 <display_led_7seg+0x348>)
 800071e:	f001 fa9e 	bl	8001c5e <HAL_GPIO_WritePin>
		break;
 8000722:	e130      	b.n	8000986 <display_led_7seg+0x33a>
	case 2:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2108      	movs	r1, #8
 8000728:	4899      	ldr	r0, [pc, #612]	; (8000990 <display_led_7seg+0x344>)
 800072a:	f001 fa98 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2104      	movs	r1, #4
 8000732:	4897      	ldr	r0, [pc, #604]	; (8000990 <display_led_7seg+0x344>)
 8000734:	f001 fa93 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073e:	4894      	ldr	r0, [pc, #592]	; (8000990 <display_led_7seg+0x344>)
 8000740:	f001 fa8d 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2108      	movs	r1, #8
 8000748:	4892      	ldr	r0, [pc, #584]	; (8000994 <display_led_7seg+0x348>)
 800074a:	f001 fa88 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2120      	movs	r1, #32
 8000752:	4890      	ldr	r0, [pc, #576]	; (8000994 <display_led_7seg+0x348>)
 8000754:	f001 fa83 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2110      	movs	r1, #16
 800075c:	488d      	ldr	r0, [pc, #564]	; (8000994 <display_led_7seg+0x348>)
 800075e:	f001 fa7e 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000768:	488a      	ldr	r0, [pc, #552]	; (8000994 <display_led_7seg+0x348>)
 800076a:	f001 fa78 	bl	8001c5e <HAL_GPIO_WritePin>
		break;
 800076e:	e10a      	b.n	8000986 <display_led_7seg+0x33a>
	case 3:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2108      	movs	r1, #8
 8000774:	4886      	ldr	r0, [pc, #536]	; (8000990 <display_led_7seg+0x344>)
 8000776:	f001 fa72 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2104      	movs	r1, #4
 800077e:	4884      	ldr	r0, [pc, #528]	; (8000990 <display_led_7seg+0x344>)
 8000780:	f001 fa6d 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078a:	4881      	ldr	r0, [pc, #516]	; (8000990 <display_led_7seg+0x344>)
 800078c:	f001 fa67 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2108      	movs	r1, #8
 8000794:	487f      	ldr	r0, [pc, #508]	; (8000994 <display_led_7seg+0x348>)
 8000796:	f001 fa62 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2120      	movs	r1, #32
 800079e:	487d      	ldr	r0, [pc, #500]	; (8000994 <display_led_7seg+0x348>)
 80007a0:	f001 fa5d 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2110      	movs	r1, #16
 80007a8:	487a      	ldr	r0, [pc, #488]	; (8000994 <display_led_7seg+0x348>)
 80007aa:	f001 fa58 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b4:	4877      	ldr	r0, [pc, #476]	; (8000994 <display_led_7seg+0x348>)
 80007b6:	f001 fa52 	bl	8001c5e <HAL_GPIO_WritePin>
		break;
 80007ba:	e0e4      	b.n	8000986 <display_led_7seg+0x33a>
	case 4:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2108      	movs	r1, #8
 80007c0:	4873      	ldr	r0, [pc, #460]	; (8000990 <display_led_7seg+0x344>)
 80007c2:	f001 fa4c 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2104      	movs	r1, #4
 80007ca:	4871      	ldr	r0, [pc, #452]	; (8000990 <display_led_7seg+0x344>)
 80007cc:	f001 fa47 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d6:	486e      	ldr	r0, [pc, #440]	; (8000990 <display_led_7seg+0x344>)
 80007d8:	f001 fa41 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2108      	movs	r1, #8
 80007e0:	486c      	ldr	r0, [pc, #432]	; (8000994 <display_led_7seg+0x348>)
 80007e2:	f001 fa3c 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2120      	movs	r1, #32
 80007ea:	486a      	ldr	r0, [pc, #424]	; (8000994 <display_led_7seg+0x348>)
 80007ec:	f001 fa37 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2110      	movs	r1, #16
 80007f4:	4867      	ldr	r0, [pc, #412]	; (8000994 <display_led_7seg+0x348>)
 80007f6:	f001 fa32 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000800:	4864      	ldr	r0, [pc, #400]	; (8000994 <display_led_7seg+0x348>)
 8000802:	f001 fa2c 	bl	8001c5e <HAL_GPIO_WritePin>
		break;
 8000806:	e0be      	b.n	8000986 <display_led_7seg+0x33a>
	case 5:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2108      	movs	r1, #8
 800080c:	4860      	ldr	r0, [pc, #384]	; (8000990 <display_led_7seg+0x344>)
 800080e:	f001 fa26 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2104      	movs	r1, #4
 8000816:	485e      	ldr	r0, [pc, #376]	; (8000990 <display_led_7seg+0x344>)
 8000818:	f001 fa21 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	485b      	ldr	r0, [pc, #364]	; (8000990 <display_led_7seg+0x344>)
 8000824:	f001 fa1b 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2108      	movs	r1, #8
 800082c:	4859      	ldr	r0, [pc, #356]	; (8000994 <display_led_7seg+0x348>)
 800082e:	f001 fa16 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 8000832:	2201      	movs	r2, #1
 8000834:	2120      	movs	r1, #32
 8000836:	4857      	ldr	r0, [pc, #348]	; (8000994 <display_led_7seg+0x348>)
 8000838:	f001 fa11 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2110      	movs	r1, #16
 8000840:	4854      	ldr	r0, [pc, #336]	; (8000994 <display_led_7seg+0x348>)
 8000842:	f001 fa0c 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084c:	4851      	ldr	r0, [pc, #324]	; (8000994 <display_led_7seg+0x348>)
 800084e:	f001 fa06 	bl	8001c5e <HAL_GPIO_WritePin>
		break;
 8000852:	e098      	b.n	8000986 <display_led_7seg+0x33a>
	case 6:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2108      	movs	r1, #8
 8000858:	484d      	ldr	r0, [pc, #308]	; (8000990 <display_led_7seg+0x344>)
 800085a:	f001 fa00 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, SET);
 800085e:	2201      	movs	r2, #1
 8000860:	2104      	movs	r1, #4
 8000862:	484b      	ldr	r0, [pc, #300]	; (8000990 <display_led_7seg+0x344>)
 8000864:	f001 f9fb 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086e:	4848      	ldr	r0, [pc, #288]	; (8000990 <display_led_7seg+0x344>)
 8000870:	f001 f9f5 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	2108      	movs	r1, #8
 8000878:	4846      	ldr	r0, [pc, #280]	; (8000994 <display_led_7seg+0x348>)
 800087a:	f001 f9f0 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	4844      	ldr	r0, [pc, #272]	; (8000994 <display_led_7seg+0x348>)
 8000884:	f001 f9eb 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2110      	movs	r1, #16
 800088c:	4841      	ldr	r0, [pc, #260]	; (8000994 <display_led_7seg+0x348>)
 800088e:	f001 f9e6 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000898:	483e      	ldr	r0, [pc, #248]	; (8000994 <display_led_7seg+0x348>)
 800089a:	f001 f9e0 	bl	8001c5e <HAL_GPIO_WritePin>
		break;
 800089e:	e072      	b.n	8000986 <display_led_7seg+0x33a>
	case 7:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2108      	movs	r1, #8
 80008a4:	483a      	ldr	r0, [pc, #232]	; (8000990 <display_led_7seg+0x344>)
 80008a6:	f001 f9da 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2104      	movs	r1, #4
 80008ae:	4838      	ldr	r0, [pc, #224]	; (8000990 <display_led_7seg+0x344>)
 80008b0:	f001 f9d5 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ba:	4835      	ldr	r0, [pc, #212]	; (8000990 <display_led_7seg+0x344>)
 80008bc:	f001 f9cf 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2108      	movs	r1, #8
 80008c4:	4833      	ldr	r0, [pc, #204]	; (8000994 <display_led_7seg+0x348>)
 80008c6:	f001 f9ca 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	2120      	movs	r1, #32
 80008ce:	4831      	ldr	r0, [pc, #196]	; (8000994 <display_led_7seg+0x348>)
 80008d0:	f001 f9c5 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2110      	movs	r1, #16
 80008d8:	482e      	ldr	r0, [pc, #184]	; (8000994 <display_led_7seg+0x348>)
 80008da:	f001 f9c0 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e4:	482b      	ldr	r0, [pc, #172]	; (8000994 <display_led_7seg+0x348>)
 80008e6:	f001 f9ba 	bl	8001c5e <HAL_GPIO_WritePin>
		break;
 80008ea:	e04c      	b.n	8000986 <display_led_7seg+0x33a>
	case 8:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2108      	movs	r1, #8
 80008f0:	4827      	ldr	r0, [pc, #156]	; (8000990 <display_led_7seg+0x344>)
 80008f2:	f001 f9b4 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2104      	movs	r1, #4
 80008fa:	4825      	ldr	r0, [pc, #148]	; (8000990 <display_led_7seg+0x344>)
 80008fc:	f001 f9af 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000906:	4822      	ldr	r0, [pc, #136]	; (8000990 <display_led_7seg+0x344>)
 8000908:	f001 f9a9 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2108      	movs	r1, #8
 8000910:	4820      	ldr	r0, [pc, #128]	; (8000994 <display_led_7seg+0x348>)
 8000912:	f001 f9a4 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2120      	movs	r1, #32
 800091a:	481e      	ldr	r0, [pc, #120]	; (8000994 <display_led_7seg+0x348>)
 800091c:	f001 f99f 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2110      	movs	r1, #16
 8000924:	481b      	ldr	r0, [pc, #108]	; (8000994 <display_led_7seg+0x348>)
 8000926:	f001 f99a 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000930:	4818      	ldr	r0, [pc, #96]	; (8000994 <display_led_7seg+0x348>)
 8000932:	f001 f994 	bl	8001c5e <HAL_GPIO_WritePin>
		break;
 8000936:	e026      	b.n	8000986 <display_led_7seg+0x33a>
	case 9:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2108      	movs	r1, #8
 800093c:	4814      	ldr	r0, [pc, #80]	; (8000990 <display_led_7seg+0x344>)
 800093e:	f001 f98e 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2104      	movs	r1, #4
 8000946:	4812      	ldr	r0, [pc, #72]	; (8000990 <display_led_7seg+0x344>)
 8000948:	f001 f989 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000952:	480f      	ldr	r0, [pc, #60]	; (8000990 <display_led_7seg+0x344>)
 8000954:	f001 f983 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2108      	movs	r1, #8
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <display_led_7seg+0x348>)
 800095e:	f001 f97e 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2120      	movs	r1, #32
 8000966:	480b      	ldr	r0, [pc, #44]	; (8000994 <display_led_7seg+0x348>)
 8000968:	f001 f979 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2110      	movs	r1, #16
 8000970:	4808      	ldr	r0, [pc, #32]	; (8000994 <display_led_7seg+0x348>)
 8000972:	f001 f974 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <display_led_7seg+0x348>)
 800097e:	f001 f96e 	bl	8001c5e <HAL_GPIO_WritePin>
		break;
 8000982:	e000      	b.n	8000986 <display_led_7seg+0x33a>
	default:
		break;
 8000984:	bf00      	nop
	}
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40010800 	.word	0x40010800
 8000994:	40010c00 	.word	0x40010c00

08000998 <control_led_7seg>:
int enable_led_7seg = 0;
void control_led_7seg(){
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	if(timer2_flag == 1){
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <control_led_7seg+0x70>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d109      	bne.n	80009b8 <control_led_7seg+0x20>
		setTimer2(500);
 80009a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a8:	f000 fb10 	bl	8000fcc <setTimer2>
		enable_led_7seg = 1 -enable_led_7seg;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <control_led_7seg+0x74>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f1c3 0301 	rsb	r3, r3, #1
 80009b4:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <control_led_7seg+0x74>)
 80009b6:	6013      	str	r3, [r2, #0]
	}
	if(enable_led_7seg == 0){
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <control_led_7seg+0x74>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d110      	bne.n	80009e2 <control_led_7seg+0x4a>
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c6:	4812      	ldr	r0, [pc, #72]	; (8000a10 <control_led_7seg+0x78>)
 80009c8:	f001 f949 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2180      	movs	r1, #128	; 0x80
 80009d0:	4810      	ldr	r0, [pc, #64]	; (8000a14 <control_led_7seg+0x7c>)
 80009d2:	f001 f944 	bl	8001c5e <HAL_GPIO_WritePin>
		display_led_7seg(time_road1);
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <control_led_7seg+0x80>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fe36 	bl	800064c <display_led_7seg>
	else {
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, RESET);
		display_led_7seg(time_road2);
	}
}
 80009e0:	e00f      	b.n	8000a02 <control_led_7seg+0x6a>
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e8:	4809      	ldr	r0, [pc, #36]	; (8000a10 <control_led_7seg+0x78>)
 80009ea:	f001 f938 	bl	8001c5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2180      	movs	r1, #128	; 0x80
 80009f2:	4808      	ldr	r0, [pc, #32]	; (8000a14 <control_led_7seg+0x7c>)
 80009f4:	f001 f933 	bl	8001c5e <HAL_GPIO_WritePin>
		display_led_7seg(time_road2);
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <control_led_7seg+0x84>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fe25 	bl	800064c <display_led_7seg>
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000c8 	.word	0x200000c8
 8000a0c:	200000ac 	.word	0x200000ac
 8000a10:	40010800 	.word	0x40010800
 8000a14:	40011000 	.word	0x40011000
 8000a18:	200000b4 	.word	0x200000b4
 8000a1c:	200000b8 	.word	0x200000b8

08000a20 <turn_on_led_7seg>:
void turn_off_led_7seg(){
	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
	HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
}
void turn_on_led_7seg(){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <turn_on_led_7seg+0x20>)
 8000a2c:	f001 f917 	bl	8001c5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	4803      	ldr	r0, [pc, #12]	; (8000a44 <turn_on_led_7seg+0x24>)
 8000a36:	f001 f912 	bl	8001c5e <HAL_GPIO_WritePin>
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40010800 	.word	0x40010800
 8000a44:	40011000 	.word	0x40011000

08000a48 <light_traffic_fsm>:
 *  Created on: Dec 1, 2023
 *      Author: ASUS TUF GAMING
 */
#include "light_traffic_fsm.h"

void light_traffic_fsm(){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	switch(status){
 8000a4c:	4b48      	ldr	r3, [pc, #288]	; (8000b70 <light_traffic_fsm+0x128>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b03      	cmp	r3, #3
 8000a52:	f200 8083 	bhi.w	8000b5c <light_traffic_fsm+0x114>
 8000a56:	a201      	add	r2, pc, #4	; (adr r2, 8000a5c <light_traffic_fsm+0x14>)
 8000a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5c:	08000a6d 	.word	0x08000a6d
 8000a60:	08000a9b 	.word	0x08000a9b
 8000a64:	08000b23 	.word	0x08000b23
 8000a68:	08000ac3 	.word	0x08000ac3
	case INIT:
		status = NORMAL_MODE;
 8000a6c:	4b40      	ldr	r3, [pc, #256]	; (8000b70 <light_traffic_fsm+0x128>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	601a      	str	r2, [r3, #0]
		normal_mode_state = RED1_GREEN2;
 8000a72:	4b40      	ldr	r3, [pc, #256]	; (8000b74 <light_traffic_fsm+0x12c>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	601a      	str	r2, [r3, #0]
		time_road1 = time_red1;
 8000a78:	4b3f      	ldr	r3, [pc, #252]	; (8000b78 <light_traffic_fsm+0x130>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a3f      	ldr	r2, [pc, #252]	; (8000b7c <light_traffic_fsm+0x134>)
 8000a7e:	6013      	str	r3, [r2, #0]
		time_road2 = time_green2;
 8000a80:	4b3f      	ldr	r3, [pc, #252]	; (8000b80 <light_traffic_fsm+0x138>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a3f      	ldr	r2, [pc, #252]	; (8000b84 <light_traffic_fsm+0x13c>)
 8000a86:	6013      	str	r3, [r2, #0]
		setTimer1(1000);
 8000a88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8c:	f000 fa84 	bl	8000f98 <setTimer1>
		setTimer2(500);
 8000a90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a94:	f000 fa9a 	bl	8000fcc <setTimer2>
		break;
 8000a98:	e067      	b.n	8000b6a <light_traffic_fsm+0x122>
	case NORMAL_MODE:
		normal_mode_fsm();
 8000a9a:	f000 f9d1 	bl	8000e40 <normal_mode_fsm>
		control_led_7seg();
 8000a9e:	f7ff ff7b 	bl	8000998 <control_led_7seg>
		if(is_button_pressed_hold(0)){
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff fbac 	bl	8000200 <is_button_pressed_hold>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d058      	beq.n	8000b60 <light_traffic_fsm+0x118>
			status = BLINK_YELLOW_MODE;
 8000aae:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <light_traffic_fsm+0x128>)
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	601a      	str	r2, [r3, #0]
			turn_on_yellow();
 8000ab4:	f7ff fd56 	bl	8000564 <turn_on_yellow>
			setTimer1(500);
 8000ab8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000abc:	f000 fa6c 	bl	8000f98 <setTimer1>
		}
		break;
 8000ac0:	e04e      	b.n	8000b60 <light_traffic_fsm+0x118>
	case BLINK_YELLOW_MODE:
		turn_on_led_7seg();
 8000ac2:	f7ff ffad 	bl	8000a20 <turn_on_led_7seg>
		display_led_7seg(0);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f7ff fdc0 	bl	800064c <display_led_7seg>
		if(timer1_flag == 1){
 8000acc:	4b2e      	ldr	r3, [pc, #184]	; (8000b88 <light_traffic_fsm+0x140>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d105      	bne.n	8000ae0 <light_traffic_fsm+0x98>
			setTimer1(500);
 8000ad4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad8:	f000 fa5e 	bl	8000f98 <setTimer1>
			blink_yellow();
 8000adc:	f7ff fd1c 	bl	8000518 <blink_yellow>
		}
		if(is_button_pressed_hold(0)){
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff fb8d 	bl	8000200 <is_button_pressed_hold>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d03b      	beq.n	8000b64 <light_traffic_fsm+0x11c>
			status = TURNING_MODE;
 8000aec:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <light_traffic_fsm+0x128>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	601a      	str	r2, [r3, #0]
			reset_all_button();
 8000af2:	f7ff fb2b 	bl	800014c <reset_all_button>
			turning_mode_state = SET_RED1_GREEN2;
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <light_traffic_fsm+0x144>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	601a      	str	r2, [r3, #0]
			display_red1_green2();
 8000afc:	f7ff fc6c 	bl	80003d8 <display_red1_green2>
			time_road1 = time_red1;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <light_traffic_fsm+0x130>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <light_traffic_fsm+0x134>)
 8000b06:	6013      	str	r3, [r2, #0]
			time_road2 = time_green2;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <light_traffic_fsm+0x138>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	; (8000b84 <light_traffic_fsm+0x13c>)
 8000b0e:	6013      	str	r3, [r2, #0]
			setTimer1(500);
 8000b10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b14:	f000 fa40 	bl	8000f98 <setTimer1>
			setTimer2(500);
 8000b18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b1c:	f000 fa56 	bl	8000fcc <setTimer2>
		}
		break;
 8000b20:	e020      	b.n	8000b64 <light_traffic_fsm+0x11c>
	case TURNING_MODE:
		turning_mode_fsm();
 8000b22:	f000 fb3d 	bl	80011a0 <turning_mode_fsm>
		control_led_7seg();
 8000b26:	f7ff ff37 	bl	8000998 <control_led_7seg>
		if(is_button_pressed_hold(0)){
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f7ff fb68 	bl	8000200 <is_button_pressed_hold>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d018      	beq.n	8000b68 <light_traffic_fsm+0x120>
			status = NORMAL_MODE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <light_traffic_fsm+0x128>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]
			normal_mode_state = RED1_GREEN2;
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <light_traffic_fsm+0x12c>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
			time_road1 = time_red1;
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <light_traffic_fsm+0x130>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <light_traffic_fsm+0x134>)
 8000b48:	6013      	str	r3, [r2, #0]
			time_road2 = time_green2;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <light_traffic_fsm+0x138>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <light_traffic_fsm+0x13c>)
 8000b50:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000b52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b56:	f000 fa1f 	bl	8000f98 <setTimer1>
		}
		break;
 8000b5a:	e005      	b.n	8000b68 <light_traffic_fsm+0x120>
	default:
		break;
 8000b5c:	bf00      	nop
 8000b5e:	e004      	b.n	8000b6a <light_traffic_fsm+0x122>
		break;
 8000b60:	bf00      	nop
 8000b62:	e002      	b.n	8000b6a <light_traffic_fsm+0x122>
		break;
 8000b64:	bf00      	nop
 8000b66:	e000      	b.n	8000b6a <light_traffic_fsm+0x122>
		break;
 8000b68:	bf00      	nop
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000b0 	.word	0x200000b0
 8000b74:	20000054 	.word	0x20000054
 8000b78:	2000003c 	.word	0x2000003c
 8000b7c:	200000b4 	.word	0x200000b4
 8000b80:	20000050 	.word	0x20000050
 8000b84:	200000b8 	.word	0x200000b8
 8000b88:	200000c0 	.word	0x200000c0
 8000b8c:	20000060 	.word	0x20000060

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b94:	f000 fd58 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b98:	f000 f80c 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000b9c:	f000 f846 	bl	8000c2c <MX_TIM2_Init>
  MX_GPIO_Init();
 8000ba0:	f000 f890 	bl	8000cc4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <main+0x20>)
 8000ba6:	f001 fcb7 	bl	8002518 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  light_traffic_fsm();
 8000baa:	f7ff ff4d 	bl	8000a48 <light_traffic_fsm>
 8000bae:	e7fc      	b.n	8000baa <main+0x1a>
 8000bb0:	200000d4 	.word	0x200000d4

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b090      	sub	sp, #64	; 0x40
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 0318 	add.w	r3, r7, #24
 8000bbe:	2228      	movs	r2, #40	; 0x28
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 f87a 	bl	8002cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bde:	2310      	movs	r3, #16
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be6:	f107 0318 	add.w	r3, r7, #24
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 f868 	bl	8001cc0 <HAL_RCC_OscConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bf6:	f000 f901 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfa:	230f      	movs	r3, #15
 8000bfc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 fad4 	bl	80021c0 <HAL_RCC_ClockConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c1e:	f000 f8ed 	bl	8000dfc <Error_Handler>
  }
}
 8000c22:	bf00      	nop
 8000c24:	3740      	adds	r7, #64	; 0x40
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c40:	463b      	mov	r3, r7
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000c4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000c52:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000c60:	2209      	movs	r2, #9
 8000c62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c70:	4813      	ldr	r0, [pc, #76]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000c72:	f001 fc01 	bl	8002478 <HAL_TIM_Base_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c7c:	f000 f8be 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000c8e:	f001 fd9d 	bl	80027cc <HAL_TIM_ConfigClockSource>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c98:	f000 f8b0 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_TIM2_Init+0x94>)
 8000caa:	f001 ff73 	bl	8002b94 <HAL_TIMEx_MasterConfigSynchronization>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cb4:	f000 f8a2 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200000d4 	.word	0x200000d4

08000cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd8:	4b3e      	ldr	r3, [pc, #248]	; (8000dd4 <MX_GPIO_Init+0x110>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a3d      	ldr	r2, [pc, #244]	; (8000dd4 <MX_GPIO_Init+0x110>)
 8000cde:	f043 0310 	orr.w	r3, r3, #16
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b3b      	ldr	r3, [pc, #236]	; (8000dd4 <MX_GPIO_Init+0x110>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b38      	ldr	r3, [pc, #224]	; (8000dd4 <MX_GPIO_Init+0x110>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a37      	ldr	r2, [pc, #220]	; (8000dd4 <MX_GPIO_Init+0x110>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b35      	ldr	r3, [pc, #212]	; (8000dd4 <MX_GPIO_Init+0x110>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	4b32      	ldr	r3, [pc, #200]	; (8000dd4 <MX_GPIO_Init+0x110>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a31      	ldr	r2, [pc, #196]	; (8000dd4 <MX_GPIO_Init+0x110>)
 8000d0e:	f043 0308 	orr.w	r3, r3, #8
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b2f      	ldr	r3, [pc, #188]	; (8000dd4 <MX_GPIO_Init+0x110>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0308 	and.w	r3, r3, #8
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_GREEN_Pin|LED2_YELLOW_Pin|ENM1_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2183      	movs	r1, #131	; 0x83
 8000d24:	482c      	ldr	r0, [pc, #176]	; (8000dd8 <MX_GPIO_Init+0x114>)
 8000d26:	f000 ff9a 	bl	8001c5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_RED_Pin|LED1_YELLOW_Pin|SEG_B_Pin|SEG_A_Pin
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f240 611f 	movw	r1, #1567	; 0x61f
 8000d30:	482a      	ldr	r0, [pc, #168]	; (8000ddc <MX_GPIO_Init+0x118>)
 8000d32:	f000 ff94 	bl	8001c5e <HAL_GPIO_WritePin>
                          |LED1_GREEN_Pin|ENM0_Pin|SEG_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_RED_Pin|SEG_G_Pin|SEG_D_Pin|SEG_F_Pin
 8000d36:	2200      	movs	r2, #0
 8000d38:	f240 4139 	movw	r1, #1081	; 0x439
 8000d3c:	4828      	ldr	r0, [pc, #160]	; (8000de0 <MX_GPIO_Init+0x11c>)
 8000d3e:	f000 ff8e 	bl	8001c5e <HAL_GPIO_WritePin>
                          |SEG_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED2_GREEN_Pin LED2_YELLOW_Pin ENM1_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin|LED2_YELLOW_Pin|ENM1_Pin;
 8000d42:	2383      	movs	r3, #131	; 0x83
 8000d44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	4619      	mov	r1, r3
 8000d58:	481f      	ldr	r0, [pc, #124]	; (8000dd8 <MX_GPIO_Init+0x114>)
 8000d5a:	f000 fde5 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_RED_Pin LED1_YELLOW_Pin SEG_B_Pin SEG_A_Pin
                           LED1_GREEN_Pin ENM0_Pin SEG_C_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|LED1_YELLOW_Pin|SEG_B_Pin|SEG_A_Pin
 8000d5e:	f240 631f 	movw	r3, #1567	; 0x61f
 8000d62:	613b      	str	r3, [r7, #16]
                          |LED1_GREEN_Pin|ENM0_Pin|SEG_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	4619      	mov	r1, r3
 8000d76:	4819      	ldr	r0, [pc, #100]	; (8000ddc <MX_GPIO_Init+0x118>)
 8000d78:	f000 fdd6 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_DOWN_Pin BUTTON_UP_Pin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin|BUTTON_UP_Pin;
 8000d7c:	23c0      	movs	r3, #192	; 0xc0
 8000d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4813      	ldr	r0, [pc, #76]	; (8000ddc <MX_GPIO_Init+0x118>)
 8000d90:	f000 fdca 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_RED_Pin SEG_G_Pin SEG_D_Pin SEG_F_Pin
                           SEG_E_Pin */
  GPIO_InitStruct.Pin = LED2_RED_Pin|SEG_G_Pin|SEG_D_Pin|SEG_F_Pin
 8000d94:	f240 4339 	movw	r3, #1081	; 0x439
 8000d98:	613b      	str	r3, [r7, #16]
                          |SEG_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <MX_GPIO_Init+0x11c>)
 8000dae:	f000 fdbb 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_MODE_Pin */
  GPIO_InitStruct.Pin = BUTTON_MODE_Pin;
 8000db2:	2340      	movs	r3, #64	; 0x40
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_MODE_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4806      	ldr	r0, [pc, #24]	; (8000de0 <MX_GPIO_Init+0x11c>)
 8000dc6:	f000 fdaf 	bl	8001928 <HAL_GPIO_Init>

}
 8000dca:	bf00      	nop
 8000dcc:	3720      	adds	r7, #32
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	40010800 	.word	0x40010800
 8000de0:	40010c00 	.word	0x40010c00

08000de4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	timerRun();
 8000dec:	f000 f908 	bl	8001000 <timerRun>
	get_key_input_all();
 8000df0:	f7ff fade 	bl	80003b0 <get_key_input_all>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <decrease_time>:
 */
#include "normal_mode_fsm.h"

int normal_mode_state = RED1_GREEN2;

void decrease_time(){
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
	if(time_road1 > 0) time_road1--;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <decrease_time+0x30>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	dd04      	ble.n	8000e1e <decrease_time+0x16>
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <decrease_time+0x30>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <decrease_time+0x30>)
 8000e1c:	6013      	str	r3, [r2, #0]
	if(time_road2 > 0) time_road2--;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <decrease_time+0x34>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	dd04      	ble.n	8000e30 <decrease_time+0x28>
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <decrease_time+0x34>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	4a03      	ldr	r2, [pc, #12]	; (8000e3c <decrease_time+0x34>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	200000b4 	.word	0x200000b4
 8000e3c:	200000b8 	.word	0x200000b8

08000e40 <normal_mode_fsm>:
void normal_mode_fsm(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	switch(normal_mode_state){
 8000e44:	4b4a      	ldr	r3, [pc, #296]	; (8000f70 <normal_mode_fsm+0x130>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	f200 8084 	bhi.w	8000f58 <normal_mode_fsm+0x118>
 8000e50:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <normal_mode_fsm+0x18>)
 8000e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e56:	bf00      	nop
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000ea1 	.word	0x08000ea1
 8000e60:	08000ee1 	.word	0x08000ee1
 8000e64:	08000f19 	.word	0x08000f19
	case RED1_GREEN2:
		display_red1_green2();
 8000e68:	f7ff fab6 	bl	80003d8 <display_red1_green2>
		if(timer1_flag == 1){
 8000e6c:	4b41      	ldr	r3, [pc, #260]	; (8000f74 <normal_mode_fsm+0x134>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d105      	bne.n	8000e80 <normal_mode_fsm+0x40>
			setTimer1(1000);
 8000e74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e78:	f000 f88e 	bl	8000f98 <setTimer1>
			decrease_time();
 8000e7c:	f7ff ffc4 	bl	8000e08 <decrease_time>
		}
		if(time_road2 <= 0){
 8000e80:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <normal_mode_fsm+0x138>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	dc69      	bgt.n	8000f5c <normal_mode_fsm+0x11c>
			normal_mode_state = RED1_YELLOW2;
 8000e88:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <normal_mode_fsm+0x130>)
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	601a      	str	r2, [r3, #0]
			time_road2 = time_yellow2;
 8000e8e:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <normal_mode_fsm+0x13c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a39      	ldr	r2, [pc, #228]	; (8000f78 <normal_mode_fsm+0x138>)
 8000e94:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000e96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e9a:	f000 f87d 	bl	8000f98 <setTimer1>
		}
		break;
 8000e9e:	e05d      	b.n	8000f5c <normal_mode_fsm+0x11c>
	case RED1_YELLOW2:
		display_red1_yellow2();
 8000ea0:	f7ff fac2 	bl	8000428 <display_red1_yellow2>
		if(timer1_flag == 1){
 8000ea4:	4b33      	ldr	r3, [pc, #204]	; (8000f74 <normal_mode_fsm+0x134>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d105      	bne.n	8000eb8 <normal_mode_fsm+0x78>
			setTimer1(1000);
 8000eac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb0:	f000 f872 	bl	8000f98 <setTimer1>
			decrease_time();
 8000eb4:	f7ff ffa8 	bl	8000e08 <decrease_time>
		}
		if(time_road2 <= 0){
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <normal_mode_fsm+0x138>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	dc4f      	bgt.n	8000f60 <normal_mode_fsm+0x120>
			normal_mode_state = GREEN1_RED2;
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <normal_mode_fsm+0x130>)
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	601a      	str	r2, [r3, #0]
			time_road1 = time_green1;
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <normal_mode_fsm+0x140>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a2e      	ldr	r2, [pc, #184]	; (8000f84 <normal_mode_fsm+0x144>)
 8000ecc:	6013      	str	r3, [r2, #0]
			time_road2 = time_red2;
 8000ece:	4b2e      	ldr	r3, [pc, #184]	; (8000f88 <normal_mode_fsm+0x148>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a29      	ldr	r2, [pc, #164]	; (8000f78 <normal_mode_fsm+0x138>)
 8000ed4:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eda:	f000 f85d 	bl	8000f98 <setTimer1>
		}
		break;
 8000ede:	e03f      	b.n	8000f60 <normal_mode_fsm+0x120>
	case GREEN1_RED2:
		display_green1_red2();
 8000ee0:	f7ff faca 	bl	8000478 <display_green1_red2>
		if(timer1_flag == 1){
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <normal_mode_fsm+0x134>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d105      	bne.n	8000ef8 <normal_mode_fsm+0xb8>
			setTimer1(1000);
 8000eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef0:	f000 f852 	bl	8000f98 <setTimer1>
			decrease_time();
 8000ef4:	f7ff ff88 	bl	8000e08 <decrease_time>
		}
		if(time_road1 <= 0){
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <normal_mode_fsm+0x144>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	dc31      	bgt.n	8000f64 <normal_mode_fsm+0x124>
			normal_mode_state = YELLOW1_RED2;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <normal_mode_fsm+0x130>)
 8000f02:	2204      	movs	r2, #4
 8000f04:	601a      	str	r2, [r3, #0]
			time_road1 = time_yellow1;
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <normal_mode_fsm+0x14c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <normal_mode_fsm+0x144>)
 8000f0c:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f12:	f000 f841 	bl	8000f98 <setTimer1>
		}
		break;
 8000f16:	e025      	b.n	8000f64 <normal_mode_fsm+0x124>
	case YELLOW1_RED2:
		display_yellow1_red2();
 8000f18:	f7ff fad6 	bl	80004c8 <display_yellow1_red2>
		if(timer1_flag == 1){
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <normal_mode_fsm+0x134>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d105      	bne.n	8000f30 <normal_mode_fsm+0xf0>
			setTimer1(1000);
 8000f24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f28:	f000 f836 	bl	8000f98 <setTimer1>
			decrease_time();
 8000f2c:	f7ff ff6c 	bl	8000e08 <decrease_time>
		}
		if(time_road1 <= 0){
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <normal_mode_fsm+0x144>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	dc17      	bgt.n	8000f68 <normal_mode_fsm+0x128>
			normal_mode_state = RED1_GREEN2;
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <normal_mode_fsm+0x130>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
			time_road1 = time_red1;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <normal_mode_fsm+0x150>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <normal_mode_fsm+0x144>)
 8000f44:	6013      	str	r3, [r2, #0]
			time_road2 = time_green2;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <normal_mode_fsm+0x154>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <normal_mode_fsm+0x138>)
 8000f4c:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000f4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f52:	f000 f821 	bl	8000f98 <setTimer1>
		}
		break;
 8000f56:	e007      	b.n	8000f68 <normal_mode_fsm+0x128>
	default:
		break;
 8000f58:	bf00      	nop
 8000f5a:	e006      	b.n	8000f6a <normal_mode_fsm+0x12a>
		break;
 8000f5c:	bf00      	nop
 8000f5e:	e004      	b.n	8000f6a <normal_mode_fsm+0x12a>
		break;
 8000f60:	bf00      	nop
 8000f62:	e002      	b.n	8000f6a <normal_mode_fsm+0x12a>
		break;
 8000f64:	bf00      	nop
 8000f66:	e000      	b.n	8000f6a <normal_mode_fsm+0x12a>
		break;
 8000f68:	bf00      	nop
	}
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000054 	.word	0x20000054
 8000f74:	200000c0 	.word	0x200000c0
 8000f78:	200000b8 	.word	0x200000b8
 8000f7c:	2000004c 	.word	0x2000004c
 8000f80:	20000044 	.word	0x20000044
 8000f84:	200000b4 	.word	0x200000b4
 8000f88:	20000048 	.word	0x20000048
 8000f8c:	20000040 	.word	0x20000040
 8000f90:	2000003c 	.word	0x2000003c
 8000f94:	20000050 	.word	0x20000050

08000f98 <setTimer1>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration){
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/DURATION_DIVIDE;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <setTimer1+0x28>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000faa:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <setTimer1+0x2c>)
 8000fac:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <setTimer1+0x30>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000058 	.word	0x20000058
 8000fc4:	200000bc 	.word	0x200000bc
 8000fc8:	200000c0 	.word	0x200000c0

08000fcc <setTimer2>:
void setTimer2(int duration){
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/DURATION_DIVIDE;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <setTimer2+0x28>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fde:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <setTimer2+0x2c>)
 8000fe0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <setTimer2+0x30>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000058 	.word	0x20000058
 8000ff8:	200000c4 	.word	0x200000c4
 8000ffc:	200000c8 	.word	0x200000c8

08001000 <timerRun>:
void setTimer3(int duration){
	timer3_counter = duration/DURATION_DIVIDE;
	timer3_flag = 0;
}

void timerRun(){
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <timerRun+0x6c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	dd0b      	ble.n	8001024 <timerRun+0x24>
		timer1_counter--;
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <timerRun+0x6c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3b01      	subs	r3, #1
 8001012:	4a16      	ldr	r2, [pc, #88]	; (800106c <timerRun+0x6c>)
 8001014:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <timerRun+0x6c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	dc02      	bgt.n	8001024 <timerRun+0x24>
			timer1_flag = 1;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <timerRun+0x70>)
 8001020:	2201      	movs	r2, #1
 8001022:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <timerRun+0x74>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	dd0b      	ble.n	8001044 <timerRun+0x44>
		timer2_counter--;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <timerRun+0x74>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3b01      	subs	r3, #1
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <timerRun+0x74>)
 8001034:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <timerRun+0x74>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	dc02      	bgt.n	8001044 <timerRun+0x44>
			timer2_flag = 1;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <timerRun+0x78>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <timerRun+0x7c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	dd0b      	ble.n	8001064 <timerRun+0x64>
		timer3_counter--;
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <timerRun+0x7c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	3b01      	subs	r3, #1
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <timerRun+0x7c>)
 8001054:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <timerRun+0x7c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	dc02      	bgt.n	8001064 <timerRun+0x64>
			timer3_flag = 1;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <timerRun+0x80>)
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	200000bc 	.word	0x200000bc
 8001070:	200000c0 	.word	0x200000c0
 8001074:	200000c4 	.word	0x200000c4
 8001078:	200000c8 	.word	0x200000c8
 800107c:	200000cc 	.word	0x200000cc
 8001080:	200000d0 	.word	0x200000d0

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_MspInit+0x5c>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <HAL_MspInit+0x5c>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6193      	str	r3, [r2, #24]
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_MspInit+0x5c>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <HAL_MspInit+0x5c>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <HAL_MspInit+0x5c>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	61d3      	str	r3, [r2, #28]
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <HAL_MspInit+0x5c>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_MspInit+0x60>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_MspInit+0x60>)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000

080010e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f8:	d113      	bne.n	8001122 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_TIM_Base_MspInit+0x44>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <HAL_TIM_Base_MspInit+0x44>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	61d3      	str	r3, [r2, #28]
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_TIM_Base_MspInit+0x44>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	201c      	movs	r0, #28
 8001118:	f000 fbcf 	bl	80018ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800111c:	201c      	movs	r0, #28
 800111e:	f000 fbe8 	bl	80018f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <NMI_Handler+0x4>

08001136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <MemManage_Handler+0x4>

08001142 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler+0x4>

0800114e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr

08001172 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001176:	f000 faad 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <TIM2_IRQHandler+0x10>)
 8001186:	f001 fa19 	bl	80025bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000d4 	.word	0x200000d4

08001194 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <turning_mode_fsm>:
 *      Author: ASUS TUF GAMING
 */
#include "turning_mode_fsm.h"

int turning_mode_state = SET_RED1_GREEN2;
void turning_mode_fsm(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	switch(turning_mode_state){
 80011a4:	4b4a      	ldr	r3, [pc, #296]	; (80012d0 <turning_mode_fsm+0x130>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	f000 8185 	beq.w	80014b8 <turning_mode_fsm+0x318>
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	f300 8208 	bgt.w	80015c4 <turning_mode_fsm+0x424>
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d003      	beq.n	80011c0 <turning_mode_fsm+0x20>
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	f000 8099 	beq.w	80012f0 <turning_mode_fsm+0x150>
			time_road2 = time_green2;
			setTimer1(500);
		}
		break;
	default:
		break;
 80011be:	e201      	b.n	80015c4 <turning_mode_fsm+0x424>
		if(timer1_flag == 1){
 80011c0:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <turning_mode_fsm+0x134>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d105      	bne.n	80011d4 <turning_mode_fsm+0x34>
			setTimer1(500);
 80011c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011cc:	f7ff fee4 	bl	8000f98 <setTimer1>
			blink_red1_green2();
 80011d0:	f7ff f9f0 	bl	80005b4 <blink_red1_green2>
		if(is_button_pressed_once(1) || is_button_pressed_hold(1)){
 80011d4:	2001      	movs	r0, #1
 80011d6:	f7fe fff9 	bl	80001cc <is_button_pressed_once>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <turning_mode_fsm+0x4c>
 80011e0:	2001      	movs	r0, #1
 80011e2:	f7ff f80d 	bl	8000200 <is_button_pressed_hold>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d025      	beq.n	8001238 <turning_mode_fsm+0x98>
			time_red1++;
 80011ec:	4b3a      	ldr	r3, [pc, #232]	; (80012d8 <turning_mode_fsm+0x138>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	4a39      	ldr	r2, [pc, #228]	; (80012d8 <turning_mode_fsm+0x138>)
 80011f4:	6013      	str	r3, [r2, #0]
			if(time_red1 > 9){
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <turning_mode_fsm+0x138>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b09      	cmp	r3, #9
 80011fc:	dd02      	ble.n	8001204 <turning_mode_fsm+0x64>
				time_red1 = 0;
 80011fe:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <turning_mode_fsm+0x138>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
			time_green2 = time_red1 - time_yellow2;
 8001204:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <turning_mode_fsm+0x138>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b34      	ldr	r3, [pc, #208]	; (80012dc <turning_mode_fsm+0x13c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	4a34      	ldr	r2, [pc, #208]	; (80012e0 <turning_mode_fsm+0x140>)
 8001210:	6013      	str	r3, [r2, #0]
			if(time_green2 < 0) {
 8001212:	4b33      	ldr	r3, [pc, #204]	; (80012e0 <turning_mode_fsm+0x140>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	da06      	bge.n	8001228 <turning_mode_fsm+0x88>
				time_red1 = time_yellow2;
 800121a:	4b30      	ldr	r3, [pc, #192]	; (80012dc <turning_mode_fsm+0x13c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a2e      	ldr	r2, [pc, #184]	; (80012d8 <turning_mode_fsm+0x138>)
 8001220:	6013      	str	r3, [r2, #0]
				time_green2 = 0;
 8001222:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <turning_mode_fsm+0x140>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
			time_road1 = time_red1;
 8001228:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <turning_mode_fsm+0x138>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a2d      	ldr	r2, [pc, #180]	; (80012e4 <turning_mode_fsm+0x144>)
 800122e:	6013      	str	r3, [r2, #0]
			time_road2 = time_green2;
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <turning_mode_fsm+0x140>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <turning_mode_fsm+0x148>)
 8001236:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_once(2) || is_button_pressed_hold(2)){
 8001238:	2002      	movs	r0, #2
 800123a:	f7fe ffc7 	bl	80001cc <is_button_pressed_once>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d105      	bne.n	8001250 <turning_mode_fsm+0xb0>
 8001244:	2002      	movs	r0, #2
 8001246:	f7fe ffdb 	bl	8000200 <is_button_pressed_hold>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d025      	beq.n	800129c <turning_mode_fsm+0xfc>
			time_red1--;
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <turning_mode_fsm+0x138>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3b01      	subs	r3, #1
 8001256:	4a20      	ldr	r2, [pc, #128]	; (80012d8 <turning_mode_fsm+0x138>)
 8001258:	6013      	str	r3, [r2, #0]
			if(time_red1 < 0){
 800125a:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <turning_mode_fsm+0x138>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	da02      	bge.n	8001268 <turning_mode_fsm+0xc8>
				time_red1 = 9;
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <turning_mode_fsm+0x138>)
 8001264:	2209      	movs	r2, #9
 8001266:	601a      	str	r2, [r3, #0]
			time_green2 = time_red1 - time_yellow2;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <turning_mode_fsm+0x138>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <turning_mode_fsm+0x13c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <turning_mode_fsm+0x140>)
 8001274:	6013      	str	r3, [r2, #0]
			if(time_green2 < 0){
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <turning_mode_fsm+0x140>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	da06      	bge.n	800128c <turning_mode_fsm+0xec>
				time_red1 = time_yellow2;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <turning_mode_fsm+0x13c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <turning_mode_fsm+0x138>)
 8001284:	6013      	str	r3, [r2, #0]
				time_green2 = 0;
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <turning_mode_fsm+0x140>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
			time_road1 = time_red1;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <turning_mode_fsm+0x138>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <turning_mode_fsm+0x144>)
 8001292:	6013      	str	r3, [r2, #0]
			time_road2 = time_green2;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <turning_mode_fsm+0x140>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <turning_mode_fsm+0x148>)
 800129a:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_once(0)){
 800129c:	2000      	movs	r0, #0
 800129e:	f7fe ff95 	bl	80001cc <is_button_pressed_once>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 818f 	beq.w	80015c8 <turning_mode_fsm+0x428>
			turning_mode_state = SET_YELLOW1_YELLOW2;
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <turning_mode_fsm+0x130>)
 80012ac:	2202      	movs	r2, #2
 80012ae:	601a      	str	r2, [r3, #0]
			turn_on_yellow();
 80012b0:	f7ff f958 	bl	8000564 <turn_on_yellow>
			time_road1 = time_yellow1;
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <turning_mode_fsm+0x14c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <turning_mode_fsm+0x144>)
 80012ba:	6013      	str	r3, [r2, #0]
			time_road2 = time_yellow2;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <turning_mode_fsm+0x13c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <turning_mode_fsm+0x148>)
 80012c2:	6013      	str	r3, [r2, #0]
			setTimer1(500);
 80012c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c8:	f7ff fe66 	bl	8000f98 <setTimer1>
		break;
 80012cc:	e17c      	b.n	80015c8 <turning_mode_fsm+0x428>
 80012ce:	bf00      	nop
 80012d0:	20000060 	.word	0x20000060
 80012d4:	200000c0 	.word	0x200000c0
 80012d8:	2000003c 	.word	0x2000003c
 80012dc:	2000004c 	.word	0x2000004c
 80012e0:	20000050 	.word	0x20000050
 80012e4:	200000b4 	.word	0x200000b4
 80012e8:	200000b8 	.word	0x200000b8
 80012ec:	20000040 	.word	0x20000040
		if(timer1_flag == 1){
 80012f0:	4b67      	ldr	r3, [pc, #412]	; (8001490 <turning_mode_fsm+0x2f0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <turning_mode_fsm+0x164>
			setTimer1(500);
 80012f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012fc:	f7ff fe4c 	bl	8000f98 <setTimer1>
			blink_yellow();
 8001300:	f7ff f90a 	bl	8000518 <blink_yellow>
		if(is_button_pressed_once(1) || is_button_pressed_hold(1)){
 8001304:	2001      	movs	r0, #1
 8001306:	f7fe ff61 	bl	80001cc <is_button_pressed_once>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d105      	bne.n	800131c <turning_mode_fsm+0x17c>
 8001310:	2001      	movs	r0, #1
 8001312:	f7fe ff75 	bl	8000200 <is_button_pressed_hold>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d049      	beq.n	80013b0 <turning_mode_fsm+0x210>
			time_yellow1++;
 800131c:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <turning_mode_fsm+0x2f4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	4a5c      	ldr	r2, [pc, #368]	; (8001494 <turning_mode_fsm+0x2f4>)
 8001324:	6013      	str	r3, [r2, #0]
			if(time_yellow1 > 9){
 8001326:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <turning_mode_fsm+0x2f4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b09      	cmp	r3, #9
 800132c:	dd02      	ble.n	8001334 <turning_mode_fsm+0x194>
				time_yellow1 = 0;
 800132e:	4b59      	ldr	r3, [pc, #356]	; (8001494 <turning_mode_fsm+0x2f4>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
			time_yellow2 = time_yellow1;
 8001334:	4b57      	ldr	r3, [pc, #348]	; (8001494 <turning_mode_fsm+0x2f4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a57      	ldr	r2, [pc, #348]	; (8001498 <turning_mode_fsm+0x2f8>)
 800133a:	6013      	str	r3, [r2, #0]
			time_red2 = time_green1 + time_yellow1;
 800133c:	4b57      	ldr	r3, [pc, #348]	; (800149c <turning_mode_fsm+0x2fc>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b54      	ldr	r3, [pc, #336]	; (8001494 <turning_mode_fsm+0x2f4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4413      	add	r3, r2
 8001346:	4a56      	ldr	r2, [pc, #344]	; (80014a0 <turning_mode_fsm+0x300>)
 8001348:	6013      	str	r3, [r2, #0]
			if(time_red2 > 9) {
 800134a:	4b55      	ldr	r3, [pc, #340]	; (80014a0 <turning_mode_fsm+0x300>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b09      	cmp	r3, #9
 8001350:	dd0d      	ble.n	800136e <turning_mode_fsm+0x1ce>
				time_red2 = 9;
 8001352:	4b53      	ldr	r3, [pc, #332]	; (80014a0 <turning_mode_fsm+0x300>)
 8001354:	2209      	movs	r2, #9
 8001356:	601a      	str	r2, [r3, #0]
				time_yellow1 = time_red2 - time_green1;
 8001358:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <turning_mode_fsm+0x300>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b4f      	ldr	r3, [pc, #316]	; (800149c <turning_mode_fsm+0x2fc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	4a4c      	ldr	r2, [pc, #304]	; (8001494 <turning_mode_fsm+0x2f4>)
 8001364:	6013      	str	r3, [r2, #0]
				time_yellow2 = time_yellow1;
 8001366:	4b4b      	ldr	r3, [pc, #300]	; (8001494 <turning_mode_fsm+0x2f4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a4b      	ldr	r2, [pc, #300]	; (8001498 <turning_mode_fsm+0x2f8>)
 800136c:	6013      	str	r3, [r2, #0]
			time_red1 = time_green2 + time_yellow2;
 800136e:	4b4d      	ldr	r3, [pc, #308]	; (80014a4 <turning_mode_fsm+0x304>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4b49      	ldr	r3, [pc, #292]	; (8001498 <turning_mode_fsm+0x2f8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a4b      	ldr	r2, [pc, #300]	; (80014a8 <turning_mode_fsm+0x308>)
 800137a:	6013      	str	r3, [r2, #0]
			if(time_red1 > 9) {
 800137c:	4b4a      	ldr	r3, [pc, #296]	; (80014a8 <turning_mode_fsm+0x308>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b09      	cmp	r3, #9
 8001382:	dd0d      	ble.n	80013a0 <turning_mode_fsm+0x200>
				time_red1 = 9;
 8001384:	4b48      	ldr	r3, [pc, #288]	; (80014a8 <turning_mode_fsm+0x308>)
 8001386:	2209      	movs	r2, #9
 8001388:	601a      	str	r2, [r3, #0]
				time_yellow2 = time_red1 - time_green2;
 800138a:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <turning_mode_fsm+0x308>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <turning_mode_fsm+0x304>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	4a40      	ldr	r2, [pc, #256]	; (8001498 <turning_mode_fsm+0x2f8>)
 8001396:	6013      	str	r3, [r2, #0]
				time_yellow1 = time_yellow2;
 8001398:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <turning_mode_fsm+0x2f8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a3d      	ldr	r2, [pc, #244]	; (8001494 <turning_mode_fsm+0x2f4>)
 800139e:	6013      	str	r3, [r2, #0]
			time_road1 = time_yellow1;
 80013a0:	4b3c      	ldr	r3, [pc, #240]	; (8001494 <turning_mode_fsm+0x2f4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a41      	ldr	r2, [pc, #260]	; (80014ac <turning_mode_fsm+0x30c>)
 80013a6:	6013      	str	r3, [r2, #0]
			time_road2 = time_yellow2;
 80013a8:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <turning_mode_fsm+0x2f8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a40      	ldr	r2, [pc, #256]	; (80014b0 <turning_mode_fsm+0x310>)
 80013ae:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_once(2) || is_button_pressed_hold(2)){
 80013b0:	2002      	movs	r0, #2
 80013b2:	f7fe ff0b 	bl	80001cc <is_button_pressed_once>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <turning_mode_fsm+0x228>
 80013bc:	2002      	movs	r0, #2
 80013be:	f7fe ff1f 	bl	8000200 <is_button_pressed_hold>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d049      	beq.n	800145c <turning_mode_fsm+0x2bc>
			time_yellow1--;
 80013c8:	4b32      	ldr	r3, [pc, #200]	; (8001494 <turning_mode_fsm+0x2f4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	4a31      	ldr	r2, [pc, #196]	; (8001494 <turning_mode_fsm+0x2f4>)
 80013d0:	6013      	str	r3, [r2, #0]
			if(time_yellow1 < 0){
 80013d2:	4b30      	ldr	r3, [pc, #192]	; (8001494 <turning_mode_fsm+0x2f4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	da02      	bge.n	80013e0 <turning_mode_fsm+0x240>
				time_yellow1 = 9;
 80013da:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <turning_mode_fsm+0x2f4>)
 80013dc:	2209      	movs	r2, #9
 80013de:	601a      	str	r2, [r3, #0]
			time_yellow2 = time_yellow1;
 80013e0:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <turning_mode_fsm+0x2f4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a2c      	ldr	r2, [pc, #176]	; (8001498 <turning_mode_fsm+0x2f8>)
 80013e6:	6013      	str	r3, [r2, #0]
			time_red2 = time_green1 + time_yellow1;
 80013e8:	4b2c      	ldr	r3, [pc, #176]	; (800149c <turning_mode_fsm+0x2fc>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b29      	ldr	r3, [pc, #164]	; (8001494 <turning_mode_fsm+0x2f4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a2b      	ldr	r2, [pc, #172]	; (80014a0 <turning_mode_fsm+0x300>)
 80013f4:	6013      	str	r3, [r2, #0]
			if(time_red2 > 9) {
 80013f6:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <turning_mode_fsm+0x300>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b09      	cmp	r3, #9
 80013fc:	dd0d      	ble.n	800141a <turning_mode_fsm+0x27a>
				time_red2 = 9;
 80013fe:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <turning_mode_fsm+0x300>)
 8001400:	2209      	movs	r2, #9
 8001402:	601a      	str	r2, [r3, #0]
				time_yellow1 = time_red2 - time_green1;
 8001404:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <turning_mode_fsm+0x300>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <turning_mode_fsm+0x2fc>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	4a21      	ldr	r2, [pc, #132]	; (8001494 <turning_mode_fsm+0x2f4>)
 8001410:	6013      	str	r3, [r2, #0]
				time_yellow2 = time_yellow1;
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <turning_mode_fsm+0x2f4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a20      	ldr	r2, [pc, #128]	; (8001498 <turning_mode_fsm+0x2f8>)
 8001418:	6013      	str	r3, [r2, #0]
			time_red1 = time_green2 + time_yellow2;
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <turning_mode_fsm+0x304>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <turning_mode_fsm+0x2f8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	4a20      	ldr	r2, [pc, #128]	; (80014a8 <turning_mode_fsm+0x308>)
 8001426:	6013      	str	r3, [r2, #0]
			if(time_red1 > 9) {
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <turning_mode_fsm+0x308>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b09      	cmp	r3, #9
 800142e:	dd0d      	ble.n	800144c <turning_mode_fsm+0x2ac>
				time_red1 = 9;
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <turning_mode_fsm+0x308>)
 8001432:	2209      	movs	r2, #9
 8001434:	601a      	str	r2, [r3, #0]
				time_yellow2 = time_red1 - time_green2;
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <turning_mode_fsm+0x308>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <turning_mode_fsm+0x304>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	4a15      	ldr	r2, [pc, #84]	; (8001498 <turning_mode_fsm+0x2f8>)
 8001442:	6013      	str	r3, [r2, #0]
				time_yellow1 = time_yellow2;
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <turning_mode_fsm+0x2f8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a12      	ldr	r2, [pc, #72]	; (8001494 <turning_mode_fsm+0x2f4>)
 800144a:	6013      	str	r3, [r2, #0]
			time_road1 = time_yellow1;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <turning_mode_fsm+0x2f4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a16      	ldr	r2, [pc, #88]	; (80014ac <turning_mode_fsm+0x30c>)
 8001452:	6013      	str	r3, [r2, #0]
			time_road2 = time_yellow2;
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <turning_mode_fsm+0x2f8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a15      	ldr	r2, [pc, #84]	; (80014b0 <turning_mode_fsm+0x310>)
 800145a:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_once(0)){
 800145c:	2000      	movs	r0, #0
 800145e:	f7fe feb5 	bl	80001cc <is_button_pressed_once>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80b1 	beq.w	80015cc <turning_mode_fsm+0x42c>
			turning_mode_state = SET_GREEN1_RED2;
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <turning_mode_fsm+0x314>)
 800146c:	2203      	movs	r2, #3
 800146e:	601a      	str	r2, [r3, #0]
			display_green1_red2();
 8001470:	f7ff f802 	bl	8000478 <display_green1_red2>
			time_road1 = time_green1;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <turning_mode_fsm+0x2fc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <turning_mode_fsm+0x30c>)
 800147a:	6013      	str	r3, [r2, #0]
			time_road2 = time_red2;
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <turning_mode_fsm+0x300>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <turning_mode_fsm+0x310>)
 8001482:	6013      	str	r3, [r2, #0]
			setTimer1(500);
 8001484:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001488:	f7ff fd86 	bl	8000f98 <setTimer1>
		break;
 800148c:	e09e      	b.n	80015cc <turning_mode_fsm+0x42c>
 800148e:	bf00      	nop
 8001490:	200000c0 	.word	0x200000c0
 8001494:	20000040 	.word	0x20000040
 8001498:	2000004c 	.word	0x2000004c
 800149c:	20000044 	.word	0x20000044
 80014a0:	20000048 	.word	0x20000048
 80014a4:	20000050 	.word	0x20000050
 80014a8:	2000003c 	.word	0x2000003c
 80014ac:	200000b4 	.word	0x200000b4
 80014b0:	200000b8 	.word	0x200000b8
 80014b4:	20000060 	.word	0x20000060
		if(timer1_flag == 1){
 80014b8:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <turning_mode_fsm+0x438>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d105      	bne.n	80014cc <turning_mode_fsm+0x32c>
			setTimer1(500);
 80014c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014c4:	f7ff fd68 	bl	8000f98 <setTimer1>
			blink_green1_red2();
 80014c8:	f7ff f89a 	bl	8000600 <blink_green1_red2>
		if(is_button_pressed_once(1) || is_button_pressed_hold(1)){
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7fe fe7d 	bl	80001cc <is_button_pressed_once>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d105      	bne.n	80014e4 <turning_mode_fsm+0x344>
 80014d8:	2001      	movs	r0, #1
 80014da:	f7fe fe91 	bl	8000200 <is_button_pressed_hold>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d025      	beq.n	8001530 <turning_mode_fsm+0x390>
			time_red2++;
 80014e4:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <turning_mode_fsm+0x43c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	4a3c      	ldr	r2, [pc, #240]	; (80015dc <turning_mode_fsm+0x43c>)
 80014ec:	6013      	str	r3, [r2, #0]
			if(time_red2 > 9){
 80014ee:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <turning_mode_fsm+0x43c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b09      	cmp	r3, #9
 80014f4:	dd02      	ble.n	80014fc <turning_mode_fsm+0x35c>
				time_red2 = 0;
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <turning_mode_fsm+0x43c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
			time_green1 = time_red2 - time_yellow1;
 80014fc:	4b37      	ldr	r3, [pc, #220]	; (80015dc <turning_mode_fsm+0x43c>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <turning_mode_fsm+0x440>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	4a37      	ldr	r2, [pc, #220]	; (80015e4 <turning_mode_fsm+0x444>)
 8001508:	6013      	str	r3, [r2, #0]
			if(time_green1 < 0) {
 800150a:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <turning_mode_fsm+0x444>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	da06      	bge.n	8001520 <turning_mode_fsm+0x380>
				time_red2 = time_yellow1;
 8001512:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <turning_mode_fsm+0x440>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a31      	ldr	r2, [pc, #196]	; (80015dc <turning_mode_fsm+0x43c>)
 8001518:	6013      	str	r3, [r2, #0]
				time_green1 = 0;
 800151a:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <turning_mode_fsm+0x444>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
			time_road1 = time_green1;
 8001520:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <turning_mode_fsm+0x444>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a30      	ldr	r2, [pc, #192]	; (80015e8 <turning_mode_fsm+0x448>)
 8001526:	6013      	str	r3, [r2, #0]
			time_road2 = time_red2;
 8001528:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <turning_mode_fsm+0x43c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a2f      	ldr	r2, [pc, #188]	; (80015ec <turning_mode_fsm+0x44c>)
 800152e:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_once(2) || is_button_pressed_hold(2)){
 8001530:	2002      	movs	r0, #2
 8001532:	f7fe fe4b 	bl	80001cc <is_button_pressed_once>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d105      	bne.n	8001548 <turning_mode_fsm+0x3a8>
 800153c:	2002      	movs	r0, #2
 800153e:	f7fe fe5f 	bl	8000200 <is_button_pressed_hold>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d025      	beq.n	8001594 <turning_mode_fsm+0x3f4>
			time_red2--;
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <turning_mode_fsm+0x43c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3b01      	subs	r3, #1
 800154e:	4a23      	ldr	r2, [pc, #140]	; (80015dc <turning_mode_fsm+0x43c>)
 8001550:	6013      	str	r3, [r2, #0]
			if(time_red2 < 0){
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <turning_mode_fsm+0x43c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	da02      	bge.n	8001560 <turning_mode_fsm+0x3c0>
				time_red2 = 9;
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <turning_mode_fsm+0x43c>)
 800155c:	2209      	movs	r2, #9
 800155e:	601a      	str	r2, [r3, #0]
			time_green1 = time_red2 - time_yellow1;
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <turning_mode_fsm+0x43c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <turning_mode_fsm+0x440>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	4a1e      	ldr	r2, [pc, #120]	; (80015e4 <turning_mode_fsm+0x444>)
 800156c:	6013      	str	r3, [r2, #0]
			if(time_green1 < 0){
 800156e:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <turning_mode_fsm+0x444>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	da06      	bge.n	8001584 <turning_mode_fsm+0x3e4>
				time_red2 = time_yellow1;
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <turning_mode_fsm+0x440>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a18      	ldr	r2, [pc, #96]	; (80015dc <turning_mode_fsm+0x43c>)
 800157c:	6013      	str	r3, [r2, #0]
				time_green1 = 0;
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <turning_mode_fsm+0x444>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
			time_road1 = time_green1;
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <turning_mode_fsm+0x444>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <turning_mode_fsm+0x448>)
 800158a:	6013      	str	r3, [r2, #0]
			time_road2 = time_red2;
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <turning_mode_fsm+0x43c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a16      	ldr	r2, [pc, #88]	; (80015ec <turning_mode_fsm+0x44c>)
 8001592:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_once(0)){
 8001594:	2000      	movs	r0, #0
 8001596:	f7fe fe19 	bl	80001cc <is_button_pressed_once>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d017      	beq.n	80015d0 <turning_mode_fsm+0x430>
			turning_mode_state = SET_RED1_GREEN2;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <turning_mode_fsm+0x450>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	601a      	str	r2, [r3, #0]
			display_red1_green2();
 80015a6:	f7fe ff17 	bl	80003d8 <display_red1_green2>
			time_road1 = time_red1;
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <turning_mode_fsm+0x454>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <turning_mode_fsm+0x448>)
 80015b0:	6013      	str	r3, [r2, #0]
			time_road2 = time_green2;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <turning_mode_fsm+0x458>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <turning_mode_fsm+0x44c>)
 80015b8:	6013      	str	r3, [r2, #0]
			setTimer1(500);
 80015ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015be:	f7ff fceb 	bl	8000f98 <setTimer1>
		break;
 80015c2:	e005      	b.n	80015d0 <turning_mode_fsm+0x430>
		break;
 80015c4:	bf00      	nop
 80015c6:	e004      	b.n	80015d2 <turning_mode_fsm+0x432>
		break;
 80015c8:	bf00      	nop
 80015ca:	e002      	b.n	80015d2 <turning_mode_fsm+0x432>
		break;
 80015cc:	bf00      	nop
 80015ce:	e000      	b.n	80015d2 <turning_mode_fsm+0x432>
		break;
 80015d0:	bf00      	nop
	}
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200000c0 	.word	0x200000c0
 80015dc:	20000048 	.word	0x20000048
 80015e0:	20000040 	.word	0x20000040
 80015e4:	20000044 	.word	0x20000044
 80015e8:	200000b4 	.word	0x200000b4
 80015ec:	200000b8 	.word	0x200000b8
 80015f0:	20000060 	.word	0x20000060
 80015f4:	2000003c 	.word	0x2000003c
 80015f8:	20000050 	.word	0x20000050

080015fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015fc:	f7ff fdca 	bl	8001194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480b      	ldr	r0, [pc, #44]	; (8001630 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001602:	490c      	ldr	r1, [pc, #48]	; (8001634 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001604:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001618:	4c09      	ldr	r4, [pc, #36]	; (8001640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001626:	f001 fb25 	bl	8002c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162a:	f7ff fab1 	bl	8000b90 <main>
  bx lr
 800162e:	4770      	bx	lr
  ldr r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001634:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001638:	08002d10 	.word	0x08002d10
  ldr r2, =_sbss
 800163c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001640:	20000120 	.word	0x20000120

08001644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC1_2_IRQHandler>
	...

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_Init+0x28>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_Init+0x28>)
 8001652:	f043 0310 	orr.w	r3, r3, #16
 8001656:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001658:	2003      	movs	r0, #3
 800165a:	f000 f923 	bl	80018a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165e:	200f      	movs	r0, #15
 8001660:	f000 f808 	bl	8001674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001664:	f7ff fd0e 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40022000 	.word	0x40022000

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x54>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x58>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168a:	fbb3 f3f1 	udiv	r3, r3, r1
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f93b 	bl	800190e <HAL_SYSTICK_Config>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e00e      	b.n	80016c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d80a      	bhi.n	80016be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a8:	2200      	movs	r2, #0
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f000 f903 	bl	80018ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b4:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_InitTick+0x5c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	2000005c 	.word	0x2000005c
 80016cc:	20000068 	.word	0x20000068
 80016d0:	20000064 	.word	0x20000064

080016d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_IncTick+0x1c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_IncTick+0x20>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a03      	ldr	r2, [pc, #12]	; (80016f4 <HAL_IncTick+0x20>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	20000068 	.word	0x20000068
 80016f4:	2000011c 	.word	0x2000011c

080016f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b02      	ldr	r3, [pc, #8]	; (8001708 <HAL_GetTick+0x10>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	2000011c 	.word	0x2000011c

0800170c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001728:	4013      	ands	r3, r2
 800172a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173e:	4a04      	ldr	r2, [pc, #16]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	60d3      	str	r3, [r2, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <__NVIC_GetPriorityGrouping+0x18>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	f003 0307 	and.w	r3, r3, #7
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	2b00      	cmp	r3, #0
 8001780:	db0b      	blt.n	800179a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 021f 	and.w	r2, r3, #31
 8001788:	4906      	ldr	r1, [pc, #24]	; (80017a4 <__NVIC_EnableIRQ+0x34>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	2001      	movs	r0, #1
 8001792:	fa00 f202 	lsl.w	r2, r0, r2
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	e000e100 	.word	0xe000e100

080017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db0a      	blt.n	80017d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	490c      	ldr	r1, [pc, #48]	; (80017f4 <__NVIC_SetPriority+0x4c>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	440b      	add	r3, r1
 80017cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d0:	e00a      	b.n	80017e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4908      	ldr	r1, [pc, #32]	; (80017f8 <__NVIC_SetPriority+0x50>)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3b04      	subs	r3, #4
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	440b      	add	r3, r1
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2b04      	cmp	r3, #4
 8001818:	bf28      	it	cs
 800181a:	2304      	movcs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3304      	adds	r3, #4
 8001822:	2b06      	cmp	r3, #6
 8001824:	d902      	bls.n	800182c <NVIC_EncodePriority+0x30>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3b03      	subs	r3, #3
 800182a:	e000      	b.n	800182e <NVIC_EncodePriority+0x32>
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	f04f 32ff 	mov.w	r2, #4294967295
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001844:	f04f 31ff 	mov.w	r1, #4294967295
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43d9      	mvns	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	4313      	orrs	r3, r2
         );
}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	; 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001870:	d301      	bcc.n	8001876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001872:	2301      	movs	r3, #1
 8001874:	e00f      	b.n	8001896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <SysTick_Config+0x40>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187e:	210f      	movs	r1, #15
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f7ff ff90 	bl	80017a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <SysTick_Config+0x40>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <SysTick_Config+0x40>)
 8001890:	2207      	movs	r2, #7
 8001892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	e000e010 	.word	0xe000e010

080018a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff2d 	bl	800170c <__NVIC_SetPriorityGrouping>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018cc:	f7ff ff42 	bl	8001754 <__NVIC_GetPriorityGrouping>
 80018d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	6978      	ldr	r0, [r7, #20]
 80018d8:	f7ff ff90 	bl	80017fc <NVIC_EncodePriority>
 80018dc:	4602      	mov	r2, r0
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff5f 	bl	80017a8 <__NVIC_SetPriority>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff35 	bl	8001770 <__NVIC_EnableIRQ>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffa2 	bl	8001860 <SysTick_Config>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b480      	push	{r7}
 800192a:	b08b      	sub	sp, #44	; 0x2c
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193a:	e169      	b.n	8001c10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800193c:	2201      	movs	r2, #1
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	429a      	cmp	r2, r3
 8001956:	f040 8158 	bne.w	8001c0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4a9a      	ldr	r2, [pc, #616]	; (8001bc8 <HAL_GPIO_Init+0x2a0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d05e      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 8001964:	4a98      	ldr	r2, [pc, #608]	; (8001bc8 <HAL_GPIO_Init+0x2a0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d875      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 800196a:	4a98      	ldr	r2, [pc, #608]	; (8001bcc <HAL_GPIO_Init+0x2a4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d058      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 8001970:	4a96      	ldr	r2, [pc, #600]	; (8001bcc <HAL_GPIO_Init+0x2a4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d86f      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 8001976:	4a96      	ldr	r2, [pc, #600]	; (8001bd0 <HAL_GPIO_Init+0x2a8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d052      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 800197c:	4a94      	ldr	r2, [pc, #592]	; (8001bd0 <HAL_GPIO_Init+0x2a8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d869      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 8001982:	4a94      	ldr	r2, [pc, #592]	; (8001bd4 <HAL_GPIO_Init+0x2ac>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d04c      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 8001988:	4a92      	ldr	r2, [pc, #584]	; (8001bd4 <HAL_GPIO_Init+0x2ac>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d863      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 800198e:	4a92      	ldr	r2, [pc, #584]	; (8001bd8 <HAL_GPIO_Init+0x2b0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d046      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 8001994:	4a90      	ldr	r2, [pc, #576]	; (8001bd8 <HAL_GPIO_Init+0x2b0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d85d      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 800199a:	2b12      	cmp	r3, #18
 800199c:	d82a      	bhi.n	80019f4 <HAL_GPIO_Init+0xcc>
 800199e:	2b12      	cmp	r3, #18
 80019a0:	d859      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 80019a2:	a201      	add	r2, pc, #4	; (adr r2, 80019a8 <HAL_GPIO_Init+0x80>)
 80019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a8:	08001a23 	.word	0x08001a23
 80019ac:	080019fd 	.word	0x080019fd
 80019b0:	08001a0f 	.word	0x08001a0f
 80019b4:	08001a51 	.word	0x08001a51
 80019b8:	08001a57 	.word	0x08001a57
 80019bc:	08001a57 	.word	0x08001a57
 80019c0:	08001a57 	.word	0x08001a57
 80019c4:	08001a57 	.word	0x08001a57
 80019c8:	08001a57 	.word	0x08001a57
 80019cc:	08001a57 	.word	0x08001a57
 80019d0:	08001a57 	.word	0x08001a57
 80019d4:	08001a57 	.word	0x08001a57
 80019d8:	08001a57 	.word	0x08001a57
 80019dc:	08001a57 	.word	0x08001a57
 80019e0:	08001a57 	.word	0x08001a57
 80019e4:	08001a57 	.word	0x08001a57
 80019e8:	08001a57 	.word	0x08001a57
 80019ec:	08001a05 	.word	0x08001a05
 80019f0:	08001a19 	.word	0x08001a19
 80019f4:	4a79      	ldr	r2, [pc, #484]	; (8001bdc <HAL_GPIO_Init+0x2b4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019fa:	e02c      	b.n	8001a56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	623b      	str	r3, [r7, #32]
          break;
 8001a02:	e029      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	623b      	str	r3, [r7, #32]
          break;
 8001a0c:	e024      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	3308      	adds	r3, #8
 8001a14:	623b      	str	r3, [r7, #32]
          break;
 8001a16:	e01f      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	330c      	adds	r3, #12
 8001a1e:	623b      	str	r3, [r7, #32]
          break;
 8001a20:	e01a      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	623b      	str	r3, [r7, #32]
          break;
 8001a2e:	e013      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d105      	bne.n	8001a44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a38:	2308      	movs	r3, #8
 8001a3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69fa      	ldr	r2, [r7, #28]
 8001a40:	611a      	str	r2, [r3, #16]
          break;
 8001a42:	e009      	b.n	8001a58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a44:	2308      	movs	r3, #8
 8001a46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	615a      	str	r2, [r3, #20]
          break;
 8001a4e:	e003      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
          break;
 8001a54:	e000      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          break;
 8001a56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2bff      	cmp	r3, #255	; 0xff
 8001a5c:	d801      	bhi.n	8001a62 <HAL_GPIO_Init+0x13a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	e001      	b.n	8001a66 <HAL_GPIO_Init+0x13e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3304      	adds	r3, #4
 8001a66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2bff      	cmp	r3, #255	; 0xff
 8001a6c:	d802      	bhi.n	8001a74 <HAL_GPIO_Init+0x14c>
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	e002      	b.n	8001a7a <HAL_GPIO_Init+0x152>
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	3b08      	subs	r3, #8
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	210f      	movs	r1, #15
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	fa01 f303 	lsl.w	r3, r1, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	6a39      	ldr	r1, [r7, #32]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	431a      	orrs	r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80b1 	beq.w	8001c0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa8:	4b4d      	ldr	r3, [pc, #308]	; (8001be0 <HAL_GPIO_Init+0x2b8>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a4c      	ldr	r2, [pc, #304]	; (8001be0 <HAL_GPIO_Init+0x2b8>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6193      	str	r3, [r2, #24]
 8001ab4:	4b4a      	ldr	r3, [pc, #296]	; (8001be0 <HAL_GPIO_Init+0x2b8>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ac0:	4a48      	ldr	r2, [pc, #288]	; (8001be4 <HAL_GPIO_Init+0x2bc>)
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001acc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a40      	ldr	r2, [pc, #256]	; (8001be8 <HAL_GPIO_Init+0x2c0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d013      	beq.n	8001b14 <HAL_GPIO_Init+0x1ec>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a3f      	ldr	r2, [pc, #252]	; (8001bec <HAL_GPIO_Init+0x2c4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d00d      	beq.n	8001b10 <HAL_GPIO_Init+0x1e8>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a3e      	ldr	r2, [pc, #248]	; (8001bf0 <HAL_GPIO_Init+0x2c8>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d007      	beq.n	8001b0c <HAL_GPIO_Init+0x1e4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a3d      	ldr	r2, [pc, #244]	; (8001bf4 <HAL_GPIO_Init+0x2cc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d101      	bne.n	8001b08 <HAL_GPIO_Init+0x1e0>
 8001b04:	2303      	movs	r3, #3
 8001b06:	e006      	b.n	8001b16 <HAL_GPIO_Init+0x1ee>
 8001b08:	2304      	movs	r3, #4
 8001b0a:	e004      	b.n	8001b16 <HAL_GPIO_Init+0x1ee>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e002      	b.n	8001b16 <HAL_GPIO_Init+0x1ee>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_GPIO_Init+0x1ee>
 8001b14:	2300      	movs	r3, #0
 8001b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b18:	f002 0203 	and.w	r2, r2, #3
 8001b1c:	0092      	lsls	r2, r2, #2
 8001b1e:	4093      	lsls	r3, r2
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b26:	492f      	ldr	r1, [pc, #188]	; (8001be4 <HAL_GPIO_Init+0x2bc>)
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b40:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	492c      	ldr	r1, [pc, #176]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	608b      	str	r3, [r1, #8]
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4928      	ldr	r1, [pc, #160]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b68:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	4922      	ldr	r1, [pc, #136]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60cb      	str	r3, [r1, #12]
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	491e      	ldr	r1, [pc, #120]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4918      	ldr	r1, [pc, #96]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4914      	ldr	r1, [pc, #80]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d021      	beq.n	8001bfc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]
 8001bc4:	e021      	b.n	8001c0a <HAL_GPIO_Init+0x2e2>
 8001bc6:	bf00      	nop
 8001bc8:	10320000 	.word	0x10320000
 8001bcc:	10310000 	.word	0x10310000
 8001bd0:	10220000 	.word	0x10220000
 8001bd4:	10210000 	.word	0x10210000
 8001bd8:	10120000 	.word	0x10120000
 8001bdc:	10110000 	.word	0x10110000
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010000 	.word	0x40010000
 8001be8:	40010800 	.word	0x40010800
 8001bec:	40010c00 	.word	0x40010c00
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	40011400 	.word	0x40011400
 8001bf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_GPIO_Init+0x304>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	4909      	ldr	r1, [pc, #36]	; (8001c2c <HAL_GPIO_Init+0x304>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f47f ae8e 	bne.w	800193c <HAL_GPIO_Init+0x14>
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	372c      	adds	r7, #44	; 0x2c
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	40010400 	.word	0x40010400

08001c30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	887b      	ldrh	r3, [r7, #2]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
 8001c4c:	e001      	b.n	8001c52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	807b      	strh	r3, [r7, #2]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c6e:	787b      	ldrb	r3, [r7, #1]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c74:	887a      	ldrh	r2, [r7, #2]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c7a:	e003      	b.n	8001c84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	041a      	lsls	r2, r3, #16
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	611a      	str	r2, [r3, #16]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ca0:	887a      	ldrh	r2, [r7, #2]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	041a      	lsls	r2, r3, #16
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	887b      	ldrh	r3, [r7, #2]
 8001cae:	400b      	ands	r3, r1
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	611a      	str	r2, [r3, #16]
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e26c      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8087 	beq.w	8001dee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce0:	4b92      	ldr	r3, [pc, #584]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d00c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cec:	4b8f      	ldr	r3, [pc, #572]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d112      	bne.n	8001d1e <HAL_RCC_OscConfig+0x5e>
 8001cf8:	4b8c      	ldr	r3, [pc, #560]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d04:	d10b      	bne.n	8001d1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d06:	4b89      	ldr	r3, [pc, #548]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d06c      	beq.n	8001dec <HAL_RCC_OscConfig+0x12c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d168      	bne.n	8001dec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e246      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d26:	d106      	bne.n	8001d36 <HAL_RCC_OscConfig+0x76>
 8001d28:	4b80      	ldr	r3, [pc, #512]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a7f      	ldr	r2, [pc, #508]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	e02e      	b.n	8001d94 <HAL_RCC_OscConfig+0xd4>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x98>
 8001d3e:	4b7b      	ldr	r3, [pc, #492]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a7a      	ldr	r2, [pc, #488]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b78      	ldr	r3, [pc, #480]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a77      	ldr	r2, [pc, #476]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e01d      	b.n	8001d94 <HAL_RCC_OscConfig+0xd4>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0xbc>
 8001d62:	4b72      	ldr	r3, [pc, #456]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a71      	ldr	r2, [pc, #452]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b6f      	ldr	r3, [pc, #444]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a6e      	ldr	r2, [pc, #440]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e00b      	b.n	8001d94 <HAL_RCC_OscConfig+0xd4>
 8001d7c:	4b6b      	ldr	r3, [pc, #428]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a6a      	ldr	r2, [pc, #424]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b68      	ldr	r3, [pc, #416]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a67      	ldr	r2, [pc, #412]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d013      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fcac 	bl	80016f8 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fca8 	bl	80016f8 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1fa      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	4b5d      	ldr	r3, [pc, #372]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0xe4>
 8001dc2:	e014      	b.n	8001dee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fc98 	bl	80016f8 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dcc:	f7ff fc94 	bl	80016f8 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b64      	cmp	r3, #100	; 0x64
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e1e6      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dde:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x10c>
 8001dea:	e000      	b.n	8001dee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d063      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dfa:	4b4c      	ldr	r3, [pc, #304]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e06:	4b49      	ldr	r3, [pc, #292]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d11c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x18c>
 8001e12:	4b46      	ldr	r3, [pc, #280]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d116      	bne.n	8001e4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1e:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <HAL_RCC_OscConfig+0x176>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e1ba      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4939      	ldr	r1, [pc, #228]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	e03a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e54:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_RCC_OscConfig+0x270>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7ff fc4d 	bl	80016f8 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e62:	f7ff fc49 	bl	80016f8 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e19b      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e74:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e80:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4927      	ldr	r1, [pc, #156]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]
 8001e94:	e015      	b.n	8001ec2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <HAL_RCC_OscConfig+0x270>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fc2c 	bl	80016f8 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea4:	f7ff fc28 	bl	80016f8 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e17a      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d03a      	beq.n	8001f44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d019      	beq.n	8001f0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed6:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001edc:	f7ff fc0c 	bl	80016f8 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fc08 	bl	80016f8 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e15a      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f02:	2001      	movs	r0, #1
 8001f04:	f000 fa9a 	bl	800243c <RCC_Delay>
 8001f08:	e01c      	b.n	8001f44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f10:	f7ff fbf2 	bl	80016f8 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f16:	e00f      	b.n	8001f38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f18:	f7ff fbee 	bl	80016f8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d908      	bls.n	8001f38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e140      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	42420000 	.word	0x42420000
 8001f34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f38:	4b9e      	ldr	r3, [pc, #632]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1e9      	bne.n	8001f18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80a6 	beq.w	800209e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f56:	4b97      	ldr	r3, [pc, #604]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10d      	bne.n	8001f7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	4b94      	ldr	r3, [pc, #592]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	4a93      	ldr	r2, [pc, #588]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	61d3      	str	r3, [r2, #28]
 8001f6e:	4b91      	ldr	r3, [pc, #580]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7e:	4b8e      	ldr	r3, [pc, #568]	; (80021b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d118      	bne.n	8001fbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8a:	4b8b      	ldr	r3, [pc, #556]	; (80021b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a8a      	ldr	r2, [pc, #552]	; (80021b8 <HAL_RCC_OscConfig+0x4f8>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f96:	f7ff fbaf 	bl	80016f8 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9e:	f7ff fbab 	bl	80016f8 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b64      	cmp	r3, #100	; 0x64
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e0fd      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb0:	4b81      	ldr	r3, [pc, #516]	; (80021b8 <HAL_RCC_OscConfig+0x4f8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x312>
 8001fc4:	4b7b      	ldr	r3, [pc, #492]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4a7a      	ldr	r2, [pc, #488]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6213      	str	r3, [r2, #32]
 8001fd0:	e02d      	b.n	800202e <HAL_RCC_OscConfig+0x36e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x334>
 8001fda:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a75      	ldr	r2, [pc, #468]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6213      	str	r3, [r2, #32]
 8001fe6:	4b73      	ldr	r3, [pc, #460]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a72      	ldr	r2, [pc, #456]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	f023 0304 	bic.w	r3, r3, #4
 8001ff0:	6213      	str	r3, [r2, #32]
 8001ff2:	e01c      	b.n	800202e <HAL_RCC_OscConfig+0x36e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b05      	cmp	r3, #5
 8001ffa:	d10c      	bne.n	8002016 <HAL_RCC_OscConfig+0x356>
 8001ffc:	4b6d      	ldr	r3, [pc, #436]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4a6c      	ldr	r2, [pc, #432]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	6213      	str	r3, [r2, #32]
 8002008:	4b6a      	ldr	r3, [pc, #424]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4a69      	ldr	r2, [pc, #420]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6213      	str	r3, [r2, #32]
 8002014:	e00b      	b.n	800202e <HAL_RCC_OscConfig+0x36e>
 8002016:	4b67      	ldr	r3, [pc, #412]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	4a66      	ldr	r2, [pc, #408]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	6213      	str	r3, [r2, #32]
 8002022:	4b64      	ldr	r3, [pc, #400]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4a63      	ldr	r2, [pc, #396]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d015      	beq.n	8002062 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7ff fb5f 	bl	80016f8 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7ff fb5b 	bl	80016f8 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	; 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e0ab      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002054:	4b57      	ldr	r3, [pc, #348]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ee      	beq.n	800203e <HAL_RCC_OscConfig+0x37e>
 8002060:	e014      	b.n	800208c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7ff fb49 	bl	80016f8 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002068:	e00a      	b.n	8002080 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206a:	f7ff fb45 	bl	80016f8 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	f241 3288 	movw	r2, #5000	; 0x1388
 8002078:	4293      	cmp	r3, r2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e095      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002080:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1ee      	bne.n	800206a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800208c:	7dfb      	ldrb	r3, [r7, #23]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d105      	bne.n	800209e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002092:	4b48      	ldr	r3, [pc, #288]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4a47      	ldr	r2, [pc, #284]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800209c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 8081 	beq.w	80021aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a8:	4b42      	ldr	r3, [pc, #264]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d061      	beq.n	8002178 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d146      	bne.n	800214a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020bc:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_RCC_OscConfig+0x4fc>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c2:	f7ff fb19 	bl	80016f8 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ca:	f7ff fb15 	bl	80016f8 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e067      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020dc:	4b35      	ldr	r3, [pc, #212]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f0:	d108      	bne.n	8002104 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020f2:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	492d      	ldr	r1, [pc, #180]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002104:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a19      	ldr	r1, [r3, #32]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	430b      	orrs	r3, r1
 8002116:	4927      	ldr	r1, [pc, #156]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800211c:	4b27      	ldr	r3, [pc, #156]	; (80021bc <HAL_RCC_OscConfig+0x4fc>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7ff fae9 	bl	80016f8 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212a:	f7ff fae5 	bl	80016f8 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e037      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x46a>
 8002148:	e02f      	b.n	80021aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_RCC_OscConfig+0x4fc>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7ff fad2 	bl	80016f8 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff face 	bl	80016f8 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e020      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x498>
 8002176:	e018      	b.n	80021aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e013      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	429a      	cmp	r2, r3
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40007000 	.word	0x40007000
 80021bc:	42420060 	.word	0x42420060

080021c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0d0      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021d4:	4b6a      	ldr	r3, [pc, #424]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d910      	bls.n	8002204 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b67      	ldr	r3, [pc, #412]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 0207 	bic.w	r2, r3, #7
 80021ea:	4965      	ldr	r1, [pc, #404]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b63      	ldr	r3, [pc, #396]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0b8      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800221c:	4b59      	ldr	r3, [pc, #356]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a58      	ldr	r2, [pc, #352]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002226:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002234:	4b53      	ldr	r3, [pc, #332]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4a52      	ldr	r2, [pc, #328]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800223e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002240:	4b50      	ldr	r3, [pc, #320]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	494d      	ldr	r1, [pc, #308]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d040      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b47      	ldr	r3, [pc, #284]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d115      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e07f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227e:	4b41      	ldr	r3, [pc, #260]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d109      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e073      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228e:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e06b      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800229e:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f023 0203 	bic.w	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4936      	ldr	r1, [pc, #216]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b0:	f7ff fa22 	bl	80016f8 <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b8:	f7ff fa1e 	bl	80016f8 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e053      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 020c 	and.w	r2, r3, #12
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1eb      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d210      	bcs.n	8002310 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 0207 	bic.w	r2, r3, #7
 80022f6:	4922      	ldr	r1, [pc, #136]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e032      	b.n	8002376 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4916      	ldr	r1, [pc, #88]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	4313      	orrs	r3, r2
 800232c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	490e      	ldr	r1, [pc, #56]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800234e:	f000 f821 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8002352:	4602      	mov	r2, r0
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	490a      	ldr	r1, [pc, #40]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 8002360:	5ccb      	ldrb	r3, [r1, r3]
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	4a09      	ldr	r2, [pc, #36]	; (800238c <HAL_RCC_ClockConfig+0x1cc>)
 8002368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_RCC_ClockConfig+0x1d0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f980 	bl	8001674 <HAL_InitTick>

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40022000 	.word	0x40022000
 8002384:	40021000 	.word	0x40021000
 8002388:	08002ce4 	.word	0x08002ce4
 800238c:	2000005c 	.word	0x2000005c
 8002390:	20000064 	.word	0x20000064

08002394 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002394:	b480      	push	{r7}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ae:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <HAL_RCC_GetSysClockFreq+0x94>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d002      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x30>
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x36>
 80023c2:	e027      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_RCC_GetSysClockFreq+0x98>)
 80023c6:	613b      	str	r3, [r7, #16]
      break;
 80023c8:	e027      	b.n	800241a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	0c9b      	lsrs	r3, r3, #18
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	4a17      	ldr	r2, [pc, #92]	; (8002430 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023d4:	5cd3      	ldrb	r3, [r2, r3]
 80023d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d010      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_RCC_GetSysClockFreq+0x94>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	0c5b      	lsrs	r3, r3, #17
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	4a11      	ldr	r2, [pc, #68]	; (8002434 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a0d      	ldr	r2, [pc, #52]	; (800242c <HAL_RCC_GetSysClockFreq+0x98>)
 80023f6:	fb02 f203 	mul.w	r2, r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e004      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002408:	fb02 f303 	mul.w	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	613b      	str	r3, [r7, #16]
      break;
 8002412:	e002      	b.n	800241a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_RCC_GetSysClockFreq+0x98>)
 8002416:	613b      	str	r3, [r7, #16]
      break;
 8002418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800241a:	693b      	ldr	r3, [r7, #16]
}
 800241c:	4618      	mov	r0, r3
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	007a1200 	.word	0x007a1200
 8002430:	08002cf4 	.word	0x08002cf4
 8002434:	08002d04 	.word	0x08002d04
 8002438:	003d0900 	.word	0x003d0900

0800243c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <RCC_Delay+0x34>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <RCC_Delay+0x38>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	0a5b      	lsrs	r3, r3, #9
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002458:	bf00      	nop
  }
  while (Delay --);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1e5a      	subs	r2, r3, #1
 800245e:	60fa      	str	r2, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f9      	bne.n	8002458 <RCC_Delay+0x1c>
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	2000005c 	.word	0x2000005c
 8002474:	10624dd3 	.word	0x10624dd3

08002478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e041      	b.n	800250e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe fe22 	bl	80010e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3304      	adds	r3, #4
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f000 fa74 	bl	80029a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d001      	beq.n	8002530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e03a      	b.n	80025a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a18      	ldr	r2, [pc, #96]	; (80025b0 <HAL_TIM_Base_Start_IT+0x98>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00e      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x58>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255a:	d009      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x58>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d004      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x58>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a13      	ldr	r2, [pc, #76]	; (80025b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d111      	bne.n	8002594 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b06      	cmp	r3, #6
 8002580:	d010      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0201 	orr.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002592:	e007      	b.n	80025a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40000400 	.word	0x40000400
 80025b8:	40000800 	.word	0x40000800

080025bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d122      	bne.n	8002618 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d11b      	bne.n	8002618 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0202 	mvn.w	r2, #2
 80025e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f9b4 	bl	800296c <HAL_TIM_IC_CaptureCallback>
 8002604:	e005      	b.n	8002612 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f9a7 	bl	800295a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f9b6 	bl	800297e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b04      	cmp	r3, #4
 8002624:	d122      	bne.n	800266c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b04      	cmp	r3, #4
 8002632:	d11b      	bne.n	800266c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0204 	mvn.w	r2, #4
 800263c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2202      	movs	r2, #2
 8002642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f98a 	bl	800296c <HAL_TIM_IC_CaptureCallback>
 8002658:	e005      	b.n	8002666 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f97d 	bl	800295a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f98c 	bl	800297e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b08      	cmp	r3, #8
 8002678:	d122      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b08      	cmp	r3, #8
 8002686:	d11b      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0208 	mvn.w	r2, #8
 8002690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2204      	movs	r2, #4
 8002696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f960 	bl	800296c <HAL_TIM_IC_CaptureCallback>
 80026ac:	e005      	b.n	80026ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f953 	bl	800295a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f962 	bl	800297e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d122      	bne.n	8002714 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d11b      	bne.n	8002714 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0210 	mvn.w	r2, #16
 80026e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2208      	movs	r2, #8
 80026ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f936 	bl	800296c <HAL_TIM_IC_CaptureCallback>
 8002700:	e005      	b.n	800270e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f929 	bl	800295a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f938 	bl	800297e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d10e      	bne.n	8002740 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d107      	bne.n	8002740 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0201 	mvn.w	r2, #1
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fe fb52 	bl	8000de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274a:	2b80      	cmp	r3, #128	; 0x80
 800274c:	d10e      	bne.n	800276c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002758:	2b80      	cmp	r3, #128	; 0x80
 800275a:	d107      	bne.n	800276c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fa7b 	bl	8002c62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	2b40      	cmp	r3, #64	; 0x40
 8002778:	d10e      	bne.n	8002798 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002784:	2b40      	cmp	r3, #64	; 0x40
 8002786:	d107      	bne.n	8002798 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f8fc 	bl	8002990 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d10e      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d107      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0220 	mvn.w	r2, #32
 80027bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fa46 	bl	8002c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_TIM_ConfigClockSource+0x1c>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e0b4      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x186>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800280e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002820:	d03e      	beq.n	80028a0 <HAL_TIM_ConfigClockSource+0xd4>
 8002822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002826:	f200 8087 	bhi.w	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 800282a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282e:	f000 8086 	beq.w	800293e <HAL_TIM_ConfigClockSource+0x172>
 8002832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002836:	d87f      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b70      	cmp	r3, #112	; 0x70
 800283a:	d01a      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0xa6>
 800283c:	2b70      	cmp	r3, #112	; 0x70
 800283e:	d87b      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b60      	cmp	r3, #96	; 0x60
 8002842:	d050      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0x11a>
 8002844:	2b60      	cmp	r3, #96	; 0x60
 8002846:	d877      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b50      	cmp	r3, #80	; 0x50
 800284a:	d03c      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0xfa>
 800284c:	2b50      	cmp	r3, #80	; 0x50
 800284e:	d873      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b40      	cmp	r3, #64	; 0x40
 8002852:	d058      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x13a>
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d86f      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b30      	cmp	r3, #48	; 0x30
 800285a:	d064      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x15a>
 800285c:	2b30      	cmp	r3, #48	; 0x30
 800285e:	d86b      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b20      	cmp	r3, #32
 8002862:	d060      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x15a>
 8002864:	2b20      	cmp	r3, #32
 8002866:	d867      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002868:	2b00      	cmp	r3, #0
 800286a:	d05c      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x15a>
 800286c:	2b10      	cmp	r3, #16
 800286e:	d05a      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x15a>
 8002870:	e062      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6899      	ldr	r1, [r3, #8]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f000 f968 	bl	8002b56 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002894:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	609a      	str	r2, [r3, #8]
      break;
 800289e:	e04f      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	6899      	ldr	r1, [r3, #8]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f000 f951 	bl	8002b56 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c2:	609a      	str	r2, [r3, #8]
      break;
 80028c4:	e03c      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6859      	ldr	r1, [r3, #4]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f000 f8c8 	bl	8002a68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2150      	movs	r1, #80	; 0x50
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f91f 	bl	8002b22 <TIM_ITRx_SetConfig>
      break;
 80028e4:	e02c      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6859      	ldr	r1, [r3, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f000 f8e6 	bl	8002ac4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2160      	movs	r1, #96	; 0x60
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f90f 	bl	8002b22 <TIM_ITRx_SetConfig>
      break;
 8002904:	e01c      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6859      	ldr	r1, [r3, #4]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	461a      	mov	r2, r3
 8002914:	f000 f8a8 	bl	8002a68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2140      	movs	r1, #64	; 0x40
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f8ff 	bl	8002b22 <TIM_ITRx_SetConfig>
      break;
 8002924:	e00c      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4619      	mov	r1, r3
 8002930:	4610      	mov	r0, r2
 8002932:	f000 f8f6 	bl	8002b22 <TIM_ITRx_SetConfig>
      break;
 8002936:	e003      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      break;
 800293c:	e000      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800293e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002950:	7bfb      	ldrb	r3, [r7, #15]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
	...

080029a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a29      	ldr	r2, [pc, #164]	; (8002a5c <TIM_Base_SetConfig+0xb8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00b      	beq.n	80029d4 <TIM_Base_SetConfig+0x30>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c2:	d007      	beq.n	80029d4 <TIM_Base_SetConfig+0x30>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a26      	ldr	r2, [pc, #152]	; (8002a60 <TIM_Base_SetConfig+0xbc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d003      	beq.n	80029d4 <TIM_Base_SetConfig+0x30>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a25      	ldr	r2, [pc, #148]	; (8002a64 <TIM_Base_SetConfig+0xc0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d108      	bne.n	80029e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <TIM_Base_SetConfig+0xb8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00b      	beq.n	8002a06 <TIM_Base_SetConfig+0x62>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f4:	d007      	beq.n	8002a06 <TIM_Base_SetConfig+0x62>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a19      	ldr	r2, [pc, #100]	; (8002a60 <TIM_Base_SetConfig+0xbc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d003      	beq.n	8002a06 <TIM_Base_SetConfig+0x62>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a18      	ldr	r2, [pc, #96]	; (8002a64 <TIM_Base_SetConfig+0xc0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d108      	bne.n	8002a18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <TIM_Base_SetConfig+0xb8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d103      	bne.n	8002a4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	615a      	str	r2, [r3, #20]
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40000400 	.word	0x40000400
 8002a64:	40000800 	.word	0x40000800

08002a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	f023 0201 	bic.w	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f023 030a 	bic.w	r3, r3, #10
 8002aa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	621a      	str	r2, [r3, #32]
}
 8002aba:	bf00      	nop
 8002abc:	371c      	adds	r7, #28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f023 0210 	bic.w	r2, r3, #16
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	031b      	lsls	r3, r3, #12
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b00:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	621a      	str	r2, [r3, #32]
}
 8002b18:	bf00      	nop
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b085      	sub	sp, #20
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f043 0307 	orr.w	r3, r3, #7
 8002b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	609a      	str	r2, [r3, #8]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b087      	sub	sp, #28
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	021a      	lsls	r2, r3, #8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	609a      	str	r2, [r3, #8]
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e046      	b.n	8002c3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf8:	d009      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a10      	ldr	r2, [pc, #64]	; (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d10c      	bne.n	8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000800 	.word	0x40000800

08002c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <__libc_init_array>:
 8002c74:	b570      	push	{r4, r5, r6, lr}
 8002c76:	2600      	movs	r6, #0
 8002c78:	4d0c      	ldr	r5, [pc, #48]	; (8002cac <__libc_init_array+0x38>)
 8002c7a:	4c0d      	ldr	r4, [pc, #52]	; (8002cb0 <__libc_init_array+0x3c>)
 8002c7c:	1b64      	subs	r4, r4, r5
 8002c7e:	10a4      	asrs	r4, r4, #2
 8002c80:	42a6      	cmp	r6, r4
 8002c82:	d109      	bne.n	8002c98 <__libc_init_array+0x24>
 8002c84:	f000 f822 	bl	8002ccc <_init>
 8002c88:	2600      	movs	r6, #0
 8002c8a:	4d0a      	ldr	r5, [pc, #40]	; (8002cb4 <__libc_init_array+0x40>)
 8002c8c:	4c0a      	ldr	r4, [pc, #40]	; (8002cb8 <__libc_init_array+0x44>)
 8002c8e:	1b64      	subs	r4, r4, r5
 8002c90:	10a4      	asrs	r4, r4, #2
 8002c92:	42a6      	cmp	r6, r4
 8002c94:	d105      	bne.n	8002ca2 <__libc_init_array+0x2e>
 8002c96:	bd70      	pop	{r4, r5, r6, pc}
 8002c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9c:	4798      	blx	r3
 8002c9e:	3601      	adds	r6, #1
 8002ca0:	e7ee      	b.n	8002c80 <__libc_init_array+0xc>
 8002ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca6:	4798      	blx	r3
 8002ca8:	3601      	adds	r6, #1
 8002caa:	e7f2      	b.n	8002c92 <__libc_init_array+0x1e>
 8002cac:	08002d08 	.word	0x08002d08
 8002cb0:	08002d08 	.word	0x08002d08
 8002cb4:	08002d08 	.word	0x08002d08
 8002cb8:	08002d0c 	.word	0x08002d0c

08002cbc <memset>:
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4402      	add	r2, r0
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d100      	bne.n	8002cc6 <memset+0xa>
 8002cc4:	4770      	bx	lr
 8002cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cca:	e7f9      	b.n	8002cc0 <memset+0x4>

08002ccc <_init>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	bf00      	nop
 8002cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd2:	bc08      	pop	{r3}
 8002cd4:	469e      	mov	lr, r3
 8002cd6:	4770      	bx	lr

08002cd8 <_fini>:
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cda:	bf00      	nop
 8002cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cde:	bc08      	pop	{r3}
 8002ce0:	469e      	mov	lr, r3
 8002ce2:	4770      	bx	lr
