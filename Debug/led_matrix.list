
led_matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002934  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a40  08002a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a64  08002a64  0002016c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a64  08002a64  0002016c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a64  08002a64  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a64  08002a64  00012a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a68  08002a68  00012a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08002a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000016c  08002bd8  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08002bd8  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094a6  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a79  00000000  00000000  0002963b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002b0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002bb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fde  00000000  00000000  0002c468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b671  00000000  00000000  00043446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084b3d  00000000  00000000  0004eab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d35f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e4  00000000  00000000  000d3648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000016c 	.word	0x2000016c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a28 	.word	0x08002a28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000170 	.word	0x20000170
 8000148:	08002a28 	.word	0x08002a28

0800014c <blink_led_mode>:
 *  Created on: Oct 29, 2023
 *      Author: ASUS TUF GAMING
 */
#include "blink_led_mode.h"

void blink_led_mode(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status) {
 8000150:	4b56      	ldr	r3, [pc, #344]	; (80002ac <blink_led_mode+0x160>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b05      	cmp	r3, #5
 8000156:	f200 809e 	bhi.w	8000296 <blink_led_mode+0x14a>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <blink_led_mode+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000179 	.word	0x08000179
 8000164:	08000297 	.word	0x08000297
 8000168:	080001a7 	.word	0x080001a7
 800016c:	080001e3 	.word	0x080001e3
 8000170:	0800021f 	.word	0x0800021f
 8000174:	0800025b 	.word	0x0800025b
		case INIT:
			HAL_GPIO_WritePin(LED_NORMAL_MODE_GPIO_Port, LED_NORMAL_MODE_Pin, SET);
 8000178:	2201      	movs	r2, #1
 800017a:	2140      	movs	r1, #64	; 0x40
 800017c:	484c      	ldr	r0, [pc, #304]	; (80002b0 <blink_led_mode+0x164>)
 800017e:	f001 fc1c 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_CHAR_MODE_GPIO_Port, LED_CHAR_MODE_Pin, SET);
 8000182:	2201      	movs	r2, #1
 8000184:	2180      	movs	r1, #128	; 0x80
 8000186:	484a      	ldr	r0, [pc, #296]	; (80002b0 <blink_led_mode+0x164>)
 8000188:	f001 fc17 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_ANI_MODE_GPIO_Port, LED_ANI_MODE_Pin, SET);
 800018c:	2201      	movs	r2, #1
 800018e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000192:	4847      	ldr	r0, [pc, #284]	; (80002b0 <blink_led_mode+0x164>)
 8000194:	f001 fc11 	bl	80019ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_COLOR_MODE_GPIO_Port, LED_COLOR_MODE_Pin, SET);
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800019e:	4844      	ldr	r0, [pc, #272]	; (80002b0 <blink_led_mode+0x164>)
 80001a0:	f001 fc0b 	bl	80019ba <HAL_GPIO_WritePin>

			break;
 80001a4:	e080      	b.n	80002a8 <blink_led_mode+0x15c>
		case NORMAL_MODE:
			if(timer3_flag == 1){
 80001a6:	4b43      	ldr	r3, [pc, #268]	; (80002b4 <blink_led_mode+0x168>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	2b01      	cmp	r3, #1
 80001ac:	d175      	bne.n	800029a <blink_led_mode+0x14e>
				setTimer3(500);//0.5s
 80001ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001b2:	f000 ffe7 	bl	8001184 <setTimer3>
				HAL_GPIO_TogglePin(LED_NORMAL_MODE_GPIO_Port, LED_NORMAL_MODE_Pin);
 80001b6:	2140      	movs	r1, #64	; 0x40
 80001b8:	483d      	ldr	r0, [pc, #244]	; (80002b0 <blink_led_mode+0x164>)
 80001ba:	f001 fc16 	bl	80019ea <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(LED_CHAR_MODE_GPIO_Port, LED_CHAR_MODE_Pin, SET);
 80001be:	2201      	movs	r2, #1
 80001c0:	2180      	movs	r1, #128	; 0x80
 80001c2:	483b      	ldr	r0, [pc, #236]	; (80002b0 <blink_led_mode+0x164>)
 80001c4:	f001 fbf9 	bl	80019ba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_ANI_MODE_GPIO_Port, LED_ANI_MODE_Pin, SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ce:	4838      	ldr	r0, [pc, #224]	; (80002b0 <blink_led_mode+0x164>)
 80001d0:	f001 fbf3 	bl	80019ba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_COLOR_MODE_GPIO_Port, LED_COLOR_MODE_Pin, SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001da:	4835      	ldr	r0, [pc, #212]	; (80002b0 <blink_led_mode+0x164>)
 80001dc:	f001 fbed 	bl	80019ba <HAL_GPIO_WritePin>
			}
			  break;
 80001e0:	e05b      	b.n	800029a <blink_led_mode+0x14e>
		case SET_CHAR:
			if(timer3_flag == 1){
 80001e2:	4b34      	ldr	r3, [pc, #208]	; (80002b4 <blink_led_mode+0x168>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d159      	bne.n	800029e <blink_led_mode+0x152>
				setTimer3(500);//0.5s
 80001ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001ee:	f000 ffc9 	bl	8001184 <setTimer3>
				HAL_GPIO_WritePin(LED_NORMAL_MODE_GPIO_Port, LED_NORMAL_MODE_Pin, SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2140      	movs	r1, #64	; 0x40
 80001f6:	482e      	ldr	r0, [pc, #184]	; (80002b0 <blink_led_mode+0x164>)
 80001f8:	f001 fbdf 	bl	80019ba <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(LED_CHAR_MODE_GPIO_Port, LED_CHAR_MODE_Pin);
 80001fc:	2180      	movs	r1, #128	; 0x80
 80001fe:	482c      	ldr	r0, [pc, #176]	; (80002b0 <blink_led_mode+0x164>)
 8000200:	f001 fbf3 	bl	80019ea <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(LED_ANI_MODE_GPIO_Port, LED_ANI_MODE_Pin, SET);
 8000204:	2201      	movs	r2, #1
 8000206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800020a:	4829      	ldr	r0, [pc, #164]	; (80002b0 <blink_led_mode+0x164>)
 800020c:	f001 fbd5 	bl	80019ba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_COLOR_MODE_GPIO_Port, LED_COLOR_MODE_Pin, SET);
 8000210:	2201      	movs	r2, #1
 8000212:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000216:	4826      	ldr	r0, [pc, #152]	; (80002b0 <blink_led_mode+0x164>)
 8000218:	f001 fbcf 	bl	80019ba <HAL_GPIO_WritePin>
			}
			  break;
 800021c:	e03f      	b.n	800029e <blink_led_mode+0x152>
		case SET_ANIMATION:
			if(timer3_flag == 1){
 800021e:	4b25      	ldr	r3, [pc, #148]	; (80002b4 <blink_led_mode+0x168>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d13d      	bne.n	80002a2 <blink_led_mode+0x156>
				setTimer3(500);//0.5s
 8000226:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800022a:	f000 ffab 	bl	8001184 <setTimer3>
				HAL_GPIO_WritePin(LED_NORMAL_MODE_GPIO_Port, LED_NORMAL_MODE_Pin, SET);
 800022e:	2201      	movs	r2, #1
 8000230:	2140      	movs	r1, #64	; 0x40
 8000232:	481f      	ldr	r0, [pc, #124]	; (80002b0 <blink_led_mode+0x164>)
 8000234:	f001 fbc1 	bl	80019ba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_CHAR_MODE_GPIO_Port, LED_CHAR_MODE_Pin, SET);
 8000238:	2201      	movs	r2, #1
 800023a:	2180      	movs	r1, #128	; 0x80
 800023c:	481c      	ldr	r0, [pc, #112]	; (80002b0 <blink_led_mode+0x164>)
 800023e:	f001 fbbc 	bl	80019ba <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(LED_ANI_MODE_GPIO_Port, LED_ANI_MODE_Pin);
 8000242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000246:	481a      	ldr	r0, [pc, #104]	; (80002b0 <blink_led_mode+0x164>)
 8000248:	f001 fbcf 	bl	80019ea <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(LED_COLOR_MODE_GPIO_Port, LED_COLOR_MODE_Pin, SET);
 800024c:	2201      	movs	r2, #1
 800024e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000252:	4817      	ldr	r0, [pc, #92]	; (80002b0 <blink_led_mode+0x164>)
 8000254:	f001 fbb1 	bl	80019ba <HAL_GPIO_WritePin>
			}
			break;
 8000258:	e023      	b.n	80002a2 <blink_led_mode+0x156>
		case SET_COLOR:
			if(timer3_flag == 1){
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <blink_led_mode+0x168>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d121      	bne.n	80002a6 <blink_led_mode+0x15a>
				setTimer3(500);//0.5s
 8000262:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000266:	f000 ff8d 	bl	8001184 <setTimer3>
				HAL_GPIO_WritePin(LED_NORMAL_MODE_GPIO_Port, LED_NORMAL_MODE_Pin, SET);
 800026a:	2201      	movs	r2, #1
 800026c:	2140      	movs	r1, #64	; 0x40
 800026e:	4810      	ldr	r0, [pc, #64]	; (80002b0 <blink_led_mode+0x164>)
 8000270:	f001 fba3 	bl	80019ba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_CHAR_MODE_GPIO_Port, LED_CHAR_MODE_Pin, SET);
 8000274:	2201      	movs	r2, #1
 8000276:	2180      	movs	r1, #128	; 0x80
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <blink_led_mode+0x164>)
 800027a:	f001 fb9e 	bl	80019ba <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_ANI_MODE_GPIO_Port, LED_ANI_MODE_Pin, SET);
 800027e:	2201      	movs	r2, #1
 8000280:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000284:	480a      	ldr	r0, [pc, #40]	; (80002b0 <blink_led_mode+0x164>)
 8000286:	f001 fb98 	bl	80019ba <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(LED_COLOR_MODE_GPIO_Port, LED_COLOR_MODE_Pin);
 800028a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800028e:	4808      	ldr	r0, [pc, #32]	; (80002b0 <blink_led_mode+0x164>)
 8000290:	f001 fbab 	bl	80019ea <HAL_GPIO_TogglePin>
			}
			  break;
 8000294:	e007      	b.n	80002a6 <blink_led_mode+0x15a>
		default:
			break;
 8000296:	bf00      	nop
 8000298:	e006      	b.n	80002a8 <blink_led_mode+0x15c>
			  break;
 800029a:	bf00      	nop
 800029c:	e004      	b.n	80002a8 <blink_led_mode+0x15c>
			  break;
 800029e:	bf00      	nop
 80002a0:	e002      	b.n	80002a8 <blink_led_mode+0x15c>
			break;
 80002a2:	bf00      	nop
 80002a4:	e000      	b.n	80002a8 <blink_led_mode+0x15c>
			  break;
 80002a6:	bf00      	nop
	}
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	200001b8 	.word	0x200001b8
 80002b0:	40011000 	.word	0x40011000
 80002b4:	200001dc 	.word	0x200001dc

080002b8 <reset_all_button>:
int keyReg2[num_buttons] =  	{NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int keyReg3[num_buttons] =  	{NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int time_for_key_press[num_buttons] = {2000, 2000, 2000};

void reset_all_button(){
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
	for(int i=0; i< num_buttons; i++){
 80002be:	2300      	movs	r3, #0
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	e00c      	b.n	80002de <reset_all_button+0x26>
		button_flag_pressed_once[i] = 0;
 80002c4:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <reset_all_button+0x38>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2100      	movs	r1, #0
 80002ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		button_flag_pressed_hold[i] = 0;
 80002ce:	4a09      	ldr	r2, [pc, #36]	; (80002f4 <reset_all_button+0x3c>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2100      	movs	r1, #0
 80002d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i< num_buttons; i++){
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	3301      	adds	r3, #1
 80002dc:	607b      	str	r3, [r7, #4]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2b02      	cmp	r3, #2
 80002e2:	ddef      	ble.n	80002c4 <reset_all_button+0xc>
	}
}
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	20000188 	.word	0x20000188
 80002f4:	20000194 	.word	0x20000194

080002f8 <key_n_process_pressed_once>:

void key_n_process_pressed_once(int n){
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	button_flag_pressed_once[n] = 1;
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <key_n_process_pressed_once+0x1c>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2101      	movs	r1, #1
 8000306:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	20000188 	.word	0x20000188

08000318 <key_n_process_pressed_hold>:
void key_n_process_pressed_hold(int n){
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	button_flag_pressed_hold[n] = 1;
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <key_n_process_pressed_hold+0x1c>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2101      	movs	r1, #1
 8000326:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	20000194 	.word	0x20000194

08000338 <is_button_pressed_once>:

int is_button_pressed_once(int n){
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	if(button_flag_pressed_once[n] == 1){
 8000340:	4a09      	ldr	r2, [pc, #36]	; (8000368 <is_button_pressed_once+0x30>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d106      	bne.n	800035a <is_button_pressed_once+0x22>
		button_flag_pressed_once[n] = 0;
 800034c:	4a06      	ldr	r2, [pc, #24]	; (8000368 <is_button_pressed_once+0x30>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2100      	movs	r1, #0
 8000352:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000356:	2301      	movs	r3, #1
 8000358:	e000      	b.n	800035c <is_button_pressed_once+0x24>
	}
	else {
		return 0;
 800035a:	2300      	movs	r3, #0
	}
}
 800035c:	4618      	mov	r0, r3
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	20000188 	.word	0x20000188

0800036c <is_button_pressed_hold>:
int is_button_pressed_hold(int n){
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	if(button_flag_pressed_hold[n] == 1){
 8000374:	4a09      	ldr	r2, [pc, #36]	; (800039c <is_button_pressed_hold+0x30>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d106      	bne.n	800038e <is_button_pressed_hold+0x22>
		button_flag_pressed_hold[n] = 0;
 8000380:	4a06      	ldr	r2, [pc, #24]	; (800039c <is_button_pressed_hold+0x30>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2100      	movs	r1, #0
 8000386:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800038a:	2301      	movs	r3, #1
 800038c:	e000      	b.n	8000390 <is_button_pressed_hold+0x24>
	}
	else {
		return 0;
 800038e:	2300      	movs	r3, #0
	}
}
 8000390:	4618      	mov	r0, r3
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	20000194 	.word	0x20000194

080003a0 <get_key_input>:



void get_key_input(int n){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	keyReg0[n] = keyReg1[n];
 80003a8:	4a56      	ldr	r2, [pc, #344]	; (8000504 <get_key_input+0x164>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003b0:	4955      	ldr	r1, [pc, #340]	; (8000508 <get_key_input+0x168>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[n] = keyReg2[n];
 80003b8:	4a54      	ldr	r2, [pc, #336]	; (800050c <get_key_input+0x16c>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003c0:	4950      	ldr	r1, [pc, #320]	; (8000504 <get_key_input+0x164>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// set up button n here
	switch(n){
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	d01d      	beq.n	800040a <get_key_input+0x6a>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2b02      	cmp	r3, #2
 80003d2:	dc24      	bgt.n	800041e <get_key_input+0x7e>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d003      	beq.n	80003e2 <get_key_input+0x42>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d00a      	beq.n	80003f6 <get_key_input+0x56>
		break;
	case 2:
		 keyReg2[2] = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, BUTTON_MODE_Pin);
		break;
	default:
		break;
 80003e0:	e01d      	b.n	800041e <get_key_input+0x7e>
		 keyReg2[0] = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, BUTTON_MODE_Pin);
 80003e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e6:	484a      	ldr	r0, [pc, #296]	; (8000510 <get_key_input+0x170>)
 80003e8:	f001 fad0 	bl	800198c <HAL_GPIO_ReadPin>
 80003ec:	4603      	mov	r3, r0
 80003ee:	461a      	mov	r2, r3
 80003f0:	4b46      	ldr	r3, [pc, #280]	; (800050c <get_key_input+0x16c>)
 80003f2:	601a      	str	r2, [r3, #0]
		break;
 80003f4:	e014      	b.n	8000420 <get_key_input+0x80>
		 keyReg2[1] = HAL_GPIO_ReadPin(BUTTON_CHANGE_GPIO_Port, BUTTON_CHANGE_Pin);
 80003f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003fa:	4845      	ldr	r0, [pc, #276]	; (8000510 <get_key_input+0x170>)
 80003fc:	f001 fac6 	bl	800198c <HAL_GPIO_ReadPin>
 8000400:	4603      	mov	r3, r0
 8000402:	461a      	mov	r2, r3
 8000404:	4b41      	ldr	r3, [pc, #260]	; (800050c <get_key_input+0x16c>)
 8000406:	605a      	str	r2, [r3, #4]
		break;
 8000408:	e00a      	b.n	8000420 <get_key_input+0x80>
		 keyReg2[2] = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, BUTTON_MODE_Pin);
 800040a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800040e:	4840      	ldr	r0, [pc, #256]	; (8000510 <get_key_input+0x170>)
 8000410:	f001 fabc 	bl	800198c <HAL_GPIO_ReadPin>
 8000414:	4603      	mov	r3, r0
 8000416:	461a      	mov	r2, r3
 8000418:	4b3c      	ldr	r3, [pc, #240]	; (800050c <get_key_input+0x16c>)
 800041a:	609a      	str	r2, [r3, #8]
		break;
 800041c:	e000      	b.n	8000420 <get_key_input+0x80>
		break;
 800041e:	bf00      	nop
	}
	/////////
	if((keyReg0[n] == keyReg1[n]) && (keyReg1[n] == keyReg2[n]) ){
 8000420:	4a39      	ldr	r2, [pc, #228]	; (8000508 <get_key_input+0x168>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000428:	4936      	ldr	r1, [pc, #216]	; (8000504 <get_key_input+0x164>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000430:	429a      	cmp	r2, r3
 8000432:	d162      	bne.n	80004fa <get_key_input+0x15a>
 8000434:	4a33      	ldr	r2, [pc, #204]	; (8000504 <get_key_input+0x164>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800043c:	4933      	ldr	r1, [pc, #204]	; (800050c <get_key_input+0x16c>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000444:	429a      	cmp	r2, r3
 8000446:	d158      	bne.n	80004fa <get_key_input+0x15a>
		if(keyReg2[n] != keyReg3[n]){
 8000448:	4a30      	ldr	r2, [pc, #192]	; (800050c <get_key_input+0x16c>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000450:	4930      	ldr	r1, [pc, #192]	; (8000514 <get_key_input+0x174>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000458:	429a      	cmp	r2, r3
 800045a:	d02c      	beq.n	80004b6 <get_key_input+0x116>
			keyReg3[n] = keyReg2[n];
 800045c:	4a2b      	ldr	r2, [pc, #172]	; (800050c <get_key_input+0x16c>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000464:	492b      	ldr	r1, [pc, #172]	; (8000514 <get_key_input+0x174>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[n] == NORMAL_STATE && en_pressed_once[n] == 1){
 800046c:	4a27      	ldr	r2, [pc, #156]	; (800050c <get_key_input+0x16c>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d10d      	bne.n	8000494 <get_key_input+0xf4>
 8000478:	4a27      	ldr	r2, [pc, #156]	; (8000518 <get_key_input+0x178>)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d107      	bne.n	8000494 <get_key_input+0xf4>
				//TODO when pressed once
				en_pressed_once[n] = 0;
 8000484:	4a24      	ldr	r2, [pc, #144]	; (8000518 <get_key_input+0x178>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2100      	movs	r1, #0
 800048a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				key_n_process_pressed_once(n);
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	f7ff ff32 	bl	80002f8 <key_n_process_pressed_once>
			}
			if(keyReg2[n] == PRESSED_STATE){
 8000494:	4a1d      	ldr	r2, [pc, #116]	; (800050c <get_key_input+0x16c>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d104      	bne.n	80004aa <get_key_input+0x10a>
				en_pressed_once[n] = 1;
 80004a0:	4a1d      	ldr	r2, [pc, #116]	; (8000518 <get_key_input+0x178>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2101      	movs	r1, #1
 80004a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			time_for_key_press[n] = 200;
 80004aa:	4a1c      	ldr	r2, [pc, #112]	; (800051c <get_key_input+0x17c>)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	21c8      	movs	r1, #200	; 0xc8
 80004b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				time_for_key_press[n] = 200;
			}
		}
	}
}
 80004b4:	e021      	b.n	80004fa <get_key_input+0x15a>
			time_for_key_press[n]--;
 80004b6:	4a19      	ldr	r2, [pc, #100]	; (800051c <get_key_input+0x17c>)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004be:	1e5a      	subs	r2, r3, #1
 80004c0:	4916      	ldr	r1, [pc, #88]	; (800051c <get_key_input+0x17c>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(time_for_key_press[n] == 0){
 80004c8:	4a14      	ldr	r2, [pc, #80]	; (800051c <get_key_input+0x17c>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d112      	bne.n	80004fa <get_key_input+0x15a>
				if(keyReg2[n] == PRESSED_STATE){
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <get_key_input+0x16c>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d107      	bne.n	80004f0 <get_key_input+0x150>
					en_pressed_once[n] = 0;
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <get_key_input+0x178>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2100      	movs	r1, #0
 80004e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					key_n_process_pressed_hold(n);
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f7ff ff14 	bl	8000318 <key_n_process_pressed_hold>
				time_for_key_press[n] = 200;
 80004f0:	4a0a      	ldr	r2, [pc, #40]	; (800051c <get_key_input+0x17c>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	21c8      	movs	r1, #200	; 0xc8
 80004f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000000c 	.word	0x2000000c
 8000508:	20000000 	.word	0x20000000
 800050c:	20000018 	.word	0x20000018
 8000510:	40010800 	.word	0x40010800
 8000514:	20000024 	.word	0x20000024
 8000518:	200001a0 	.word	0x200001a0
 800051c:	20000030 	.word	0x20000030

08000520 <get_key_input_all>:

void get_key_input_all(){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0


	for(int i = 0; i < num_buttons ;i++){
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	e005      	b.n	8000538 <get_key_input_all+0x18>
		get_key_input(i);
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ff37 	bl	80003a0 <get_key_input>
	for(int i = 0; i < num_buttons ;i++){
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3301      	adds	r3, #1
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b02      	cmp	r3, #2
 800053c:	ddf6      	ble.n	800052c <get_key_input_all+0xc>
	}
}
 800053e:	bf00      	nop
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <scan_matrix>:

#include "control_led_matrix.h"
int index_led = 0;
int trans = 0;

void scan_matrix(){
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	  if (index_led >= 8){
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <scan_matrix+0x68>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b07      	cmp	r3, #7
 8000552:	dd02      	ble.n	800055a <scan_matrix+0x12>
		  index_led = 0;
 8000554:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <scan_matrix+0x68>)
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
	  }
	  if (timer1_flag == 1){
 800055a:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <scan_matrix+0x6c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d10f      	bne.n	8000582 <scan_matrix+0x3a>
		  setTimer1(2); //10ms
 8000562:	2002      	movs	r0, #2
 8000564:	f000 fdda 	bl	800111c <setTimer1>
		  displayLedMatrix(trans, index_led);
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <scan_matrix+0x70>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a10      	ldr	r2, [pc, #64]	; (80005b0 <scan_matrix+0x68>)
 800056e:	6812      	ldr	r2, [r2, #0]
 8000570:	4611      	mov	r1, r2
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fc20 	bl	8000db8 <displayLedMatrix>
		  index_led++;
 8000578:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <scan_matrix+0x68>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <scan_matrix+0x68>)
 8000580:	6013      	str	r3, [r2, #0]
	  }
	  if(timer2_flag == 1){
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <scan_matrix+0x74>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d10f      	bne.n	80005aa <scan_matrix+0x62>
		  trans++;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <scan_matrix+0x70>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <scan_matrix+0x70>)
 8000592:	6013      	str	r3, [r2, #0]
		  setTimer2(500);//500ms
 8000594:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000598:	f000 fdda 	bl	8001150 <setTimer2>
		  if(trans >= 14){
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <scan_matrix+0x70>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b0d      	cmp	r3, #13
 80005a2:	dd02      	ble.n	80005aa <scan_matrix+0x62>
			  trans = 0;
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <scan_matrix+0x70>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
		  }
	  }
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200001ac 	.word	0x200001ac
 80005b4:	200001cc 	.word	0x200001cc
 80005b8:	200001b0 	.word	0x200001b0
 80005bc:	200001d4 	.word	0x200001d4

080005c0 <set_state>:

void set_state(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	  index_led = 0;
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <set_state+0x24>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
	  trans = 0;
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <set_state+0x28>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
	  setTimer1(2);//10ms
 80005d0:	2002      	movs	r0, #2
 80005d2:	f000 fda3 	bl	800111c <setTimer1>
	  setTimer2(500);//500ms
 80005d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005da:	f000 fdb9 	bl	8001150 <setTimer2>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200001ac 	.word	0x200001ac
 80005e8:	200001b0 	.word	0x200001b0

080005ec <controlLedMatrix>:

void controlLedMatrix(){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	switch (status) {
 80005f0:	4b75      	ldr	r3, [pc, #468]	; (80007c8 <controlLedMatrix+0x1dc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b05      	cmp	r3, #5
 80005f6:	f200 80db 	bhi.w	80007b0 <controlLedMatrix+0x1c4>
 80005fa:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <controlLedMatrix+0x14>)
 80005fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000600:	08000619 	.word	0x08000619
 8000604:	080007b1 	.word	0x080007b1
 8000608:	0800063f 	.word	0x0800063f
 800060c:	08000679 	.word	0x08000679
 8000610:	080006e1 	.word	0x080006e1
 8000614:	08000749 	.word	0x08000749
		case INIT:
			status = NORMAL_MODE;
 8000618:	4b6b      	ldr	r3, [pc, #428]	; (80007c8 <controlLedMatrix+0x1dc>)
 800061a:	2202      	movs	r2, #2
 800061c:	601a      	str	r2, [r3, #0]
			set_state();
 800061e:	f7ff ffcf 	bl	80005c0 <set_state>
			setTimer3(500);//0.5s
 8000622:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000626:	f000 fdad 	bl	8001184 <setTimer3>
			mode_char = A;
 800062a:	4b68      	ldr	r3, [pc, #416]	; (80007cc <controlLedMatrix+0x1e0>)
 800062c:	220f      	movs	r2, #15
 800062e:	601a      	str	r2, [r3, #0]
			mode_animation = stable;
 8000630:	4b67      	ldr	r3, [pc, #412]	; (80007d0 <controlLedMatrix+0x1e4>)
 8000632:	220d      	movs	r2, #13
 8000634:	601a      	str	r2, [r3, #0]
			mode_color = red;
 8000636:	4b67      	ldr	r3, [pc, #412]	; (80007d4 <controlLedMatrix+0x1e8>)
 8000638:	220a      	movs	r2, #10
 800063a:	601a      	str	r2, [r3, #0]
			break;
 800063c:	e0c1      	b.n	80007c2 <controlLedMatrix+0x1d6>
		case NORMAL_MODE:
			 scan_matrix();
 800063e:	f7ff ff83 	bl	8000548 <scan_matrix>
			 blink_led_mode();
 8000642:	f7ff fd83 	bl	800014c <blink_led_mode>
			  if(is_button_pressed_once(0) || is_button_pressed_hold(0)){
 8000646:	2000      	movs	r0, #0
 8000648:	f7ff fe76 	bl	8000338 <is_button_pressed_once>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d106      	bne.n	8000660 <controlLedMatrix+0x74>
 8000652:	2000      	movs	r0, #0
 8000654:	f7ff fe8a 	bl	800036c <is_button_pressed_hold>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	f000 80aa 	beq.w	80007b4 <controlLedMatrix+0x1c8>
				  status = SET_CHAR;
 8000660:	4b59      	ldr	r3, [pc, #356]	; (80007c8 <controlLedMatrix+0x1dc>)
 8000662:	2203      	movs	r2, #3
 8000664:	601a      	str	r2, [r3, #0]
				  set_state();
 8000666:	f7ff ffab 	bl	80005c0 <set_state>
				  setTimer3(500);//0.5s
 800066a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800066e:	f000 fd89 	bl	8001184 <setTimer3>
				  reset_all_button();
 8000672:	f7ff fe21 	bl	80002b8 <reset_all_button>
			  }
			  break;
 8000676:	e09d      	b.n	80007b4 <controlLedMatrix+0x1c8>
		case SET_CHAR:
			 scan_matrix();
 8000678:	f7ff ff66 	bl	8000548 <scan_matrix>
			 blink_led_mode();
 800067c:	f7ff fd66 	bl	800014c <blink_led_mode>
			  if(is_button_pressed_once(0) || is_button_pressed_hold(0)){
 8000680:	2000      	movs	r0, #0
 8000682:	f7ff fe59 	bl	8000338 <is_button_pressed_once>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d105      	bne.n	8000698 <controlLedMatrix+0xac>
 800068c:	2000      	movs	r0, #0
 800068e:	f7ff fe6d 	bl	800036c <is_button_pressed_hold>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d008      	beq.n	80006aa <controlLedMatrix+0xbe>
				  status = SET_ANIMATION;
 8000698:	4b4b      	ldr	r3, [pc, #300]	; (80007c8 <controlLedMatrix+0x1dc>)
 800069a:	2204      	movs	r2, #4
 800069c:	601a      	str	r2, [r3, #0]
				  set_state();
 800069e:	f7ff ff8f 	bl	80005c0 <set_state>
				  setTimer3(500);//0.5s
 80006a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a6:	f000 fd6d 	bl	8001184 <setTimer3>
			  }
			  if(is_button_pressed_once(1) || is_button_pressed_hold(1)){
 80006aa:	2001      	movs	r0, #1
 80006ac:	f7ff fe44 	bl	8000338 <is_button_pressed_once>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d105      	bne.n	80006c2 <controlLedMatrix+0xd6>
 80006b6:	2001      	movs	r0, #1
 80006b8:	f7ff fe58 	bl	800036c <is_button_pressed_hold>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d07a      	beq.n	80007b8 <controlLedMatrix+0x1cc>
				  mode_char++;
 80006c2:	4b42      	ldr	r3, [pc, #264]	; (80007cc <controlLedMatrix+0x1e0>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	4a40      	ldr	r2, [pc, #256]	; (80007cc <controlLedMatrix+0x1e0>)
 80006ca:	6013      	str	r3, [r2, #0]
				  if(mode_char > last_char) mode_char = first_char;
 80006cc:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <controlLedMatrix+0x1e0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b10      	cmp	r3, #16
 80006d2:	dd02      	ble.n	80006da <controlLedMatrix+0xee>
 80006d4:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <controlLedMatrix+0x1e0>)
 80006d6:	220f      	movs	r2, #15
 80006d8:	601a      	str	r2, [r3, #0]
				  set_state();
 80006da:	f7ff ff71 	bl	80005c0 <set_state>
			  }
			  break;
 80006de:	e06b      	b.n	80007b8 <controlLedMatrix+0x1cc>
		case SET_ANIMATION:
			 scan_matrix();
 80006e0:	f7ff ff32 	bl	8000548 <scan_matrix>
			 blink_led_mode();
 80006e4:	f7ff fd32 	bl	800014c <blink_led_mode>
			  if(is_button_pressed_once(0) || is_button_pressed_hold(0)){
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff fe25 	bl	8000338 <is_button_pressed_once>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d105      	bne.n	8000700 <controlLedMatrix+0x114>
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff fe39 	bl	800036c <is_button_pressed_hold>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d008      	beq.n	8000712 <controlLedMatrix+0x126>
				  status = SET_COLOR;
 8000700:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <controlLedMatrix+0x1dc>)
 8000702:	2205      	movs	r2, #5
 8000704:	601a      	str	r2, [r3, #0]
				  set_state();
 8000706:	f7ff ff5b 	bl	80005c0 <set_state>
				  setTimer3(500);//0.5s
 800070a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800070e:	f000 fd39 	bl	8001184 <setTimer3>
			  }
			  if(is_button_pressed_once(1) || is_button_pressed_hold(1)){
 8000712:	2001      	movs	r0, #1
 8000714:	f7ff fe10 	bl	8000338 <is_button_pressed_once>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d105      	bne.n	800072a <controlLedMatrix+0x13e>
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff fe24 	bl	800036c <is_button_pressed_hold>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d048      	beq.n	80007bc <controlLedMatrix+0x1d0>
				  mode_animation++;
 800072a:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <controlLedMatrix+0x1e4>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	4a27      	ldr	r2, [pc, #156]	; (80007d0 <controlLedMatrix+0x1e4>)
 8000732:	6013      	str	r3, [r2, #0]
				  if(mode_animation > last_ani) mode_animation = first_ani;
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <controlLedMatrix+0x1e4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b0e      	cmp	r3, #14
 800073a:	dd02      	ble.n	8000742 <controlLedMatrix+0x156>
 800073c:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <controlLedMatrix+0x1e4>)
 800073e:	220d      	movs	r2, #13
 8000740:	601a      	str	r2, [r3, #0]
				  set_state();
 8000742:	f7ff ff3d 	bl	80005c0 <set_state>
			  }
			break;
 8000746:	e039      	b.n	80007bc <controlLedMatrix+0x1d0>
		case SET_COLOR:
			 scan_matrix();
 8000748:	f7ff fefe 	bl	8000548 <scan_matrix>
			 blink_led_mode();
 800074c:	f7ff fcfe 	bl	800014c <blink_led_mode>
			  if(is_button_pressed_once(0) || is_button_pressed_hold(0)){
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff fdf1 	bl	8000338 <is_button_pressed_once>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d105      	bne.n	8000768 <controlLedMatrix+0x17c>
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff fe05 	bl	800036c <is_button_pressed_hold>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d008      	beq.n	800077a <controlLedMatrix+0x18e>
				  status = NORMAL_MODE;
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <controlLedMatrix+0x1dc>)
 800076a:	2202      	movs	r2, #2
 800076c:	601a      	str	r2, [r3, #0]
				  set_state();
 800076e:	f7ff ff27 	bl	80005c0 <set_state>
				  setTimer3(500);//0.5s
 8000772:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000776:	f000 fd05 	bl	8001184 <setTimer3>
			  }
			  if(is_button_pressed_once(1) || is_button_pressed_hold(1)){
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff fddc 	bl	8000338 <is_button_pressed_once>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d105      	bne.n	8000792 <controlLedMatrix+0x1a6>
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff fdf0 	bl	800036c <is_button_pressed_hold>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d016      	beq.n	80007c0 <controlLedMatrix+0x1d4>
				  mode_color++;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <controlLedMatrix+0x1e8>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <controlLedMatrix+0x1e8>)
 800079a:	6013      	str	r3, [r2, #0]
				  if(mode_color > last_color) mode_color = first_color;
 800079c:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <controlLedMatrix+0x1e8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b0b      	cmp	r3, #11
 80007a2:	dd02      	ble.n	80007aa <controlLedMatrix+0x1be>
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <controlLedMatrix+0x1e8>)
 80007a6:	220a      	movs	r2, #10
 80007a8:	601a      	str	r2, [r3, #0]
				  set_state();
 80007aa:	f7ff ff09 	bl	80005c0 <set_state>
			  }
			  break;
 80007ae:	e007      	b.n	80007c0 <controlLedMatrix+0x1d4>
		default:
			break;
 80007b0:	bf00      	nop
 80007b2:	e006      	b.n	80007c2 <controlLedMatrix+0x1d6>
			  break;
 80007b4:	bf00      	nop
 80007b6:	e004      	b.n	80007c2 <controlLedMatrix+0x1d6>
			  break;
 80007b8:	bf00      	nop
 80007ba:	e002      	b.n	80007c2 <controlLedMatrix+0x1d6>
			break;
 80007bc:	bf00      	nop
 80007be:	e000      	b.n	80007c2 <controlLedMatrix+0x1d6>
			  break;
 80007c0:	bf00      	nop
	}
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200001b8 	.word	0x200001b8
 80007cc:	200001bc 	.word	0x200001bc
 80007d0:	200001c0 	.word	0x200001c0
 80007d4:	200001c4 	.word	0x200001c4

080007d8 <writeByte>:
										{ 0x00,0x07,0x06,0x06,0x07,0x06,0x06,0x07},//0007060607060607
										{ 0x00,0x0F,0x0C,0x0C,0x0F,0x0C,0x0C,0x0F},//000f0c0c0f0c0c0f
										{ 0x00,0x1F,0x19,0x19,0x1F,0x19,0x19,0x1F},//001f19191f19191f
										{ 0x00,0x3E,0x33,0x33,0x3E,0x33,0x33,0x3E}//003e33333e33333e
};
void writeByte(GPIO_TypeDef* port, uint16_t* pins, uint8_t byte){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	4613      	mov	r3, r2
 80007e4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port, pins[0], byte & 0x01);
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	8819      	ldrh	r1, [r3, #0]
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	461a      	mov	r2, r3
 80007f4:	68f8      	ldr	r0, [r7, #12]
 80007f6:	f001 f8e0 	bl	80019ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(port, pins[1], byte & 0x02);
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	3302      	adds	r3, #2
 80007fe:	8819      	ldrh	r1, [r3, #0]
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	68f8      	ldr	r0, [r7, #12]
 800080c:	f001 f8d5 	bl	80019ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(port, pins[2], byte & 0x04);
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	3304      	adds	r3, #4
 8000814:	8819      	ldrh	r1, [r3, #0]
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	b2db      	uxtb	r3, r3
 800081e:	461a      	mov	r2, r3
 8000820:	68f8      	ldr	r0, [r7, #12]
 8000822:	f001 f8ca 	bl	80019ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(port, pins[3], byte & 0x08);
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	3306      	adds	r3, #6
 800082a:	8819      	ldrh	r1, [r3, #0]
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	b2db      	uxtb	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f001 f8bf 	bl	80019ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(port, pins[4], byte & 0x10);
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	3308      	adds	r3, #8
 8000840:	8819      	ldrh	r1, [r3, #0]
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f003 0310 	and.w	r3, r3, #16
 8000848:	b2db      	uxtb	r3, r3
 800084a:	461a      	mov	r2, r3
 800084c:	68f8      	ldr	r0, [r7, #12]
 800084e:	f001 f8b4 	bl	80019ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(port, pins[5], byte & 0x20);
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	330a      	adds	r3, #10
 8000856:	8819      	ldrh	r1, [r3, #0]
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f003 0320 	and.w	r3, r3, #32
 800085e:	b2db      	uxtb	r3, r3
 8000860:	461a      	mov	r2, r3
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f001 f8a9 	bl	80019ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(port, pins[6], byte & 0x40);
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	330c      	adds	r3, #12
 800086c:	8819      	ldrh	r1, [r3, #0]
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000874:	b2db      	uxtb	r3, r3
 8000876:	461a      	mov	r2, r3
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f001 f89e 	bl	80019ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(port, pins[7], byte & 0x80);
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	330e      	adds	r3, #14
 8000882:	8819      	ldrh	r1, [r3, #0]
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800088a:	b2db      	uxtb	r3, r3
 800088c:	461a      	mov	r2, r3
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f001 f893 	bl	80019ba <HAL_GPIO_WritePin>
}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <displayLedMatrix_red>:


void displayLedMatrix_red(int index1, int index2, uint8_t buffer[][8]){
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	2b07      	cmp	r3, #7
 80008ac:	f200 80cc 	bhi.w	8000a48 <displayLedMatrix_red+0x1ac>
 80008b0:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <displayLedMatrix_red+0x1c>)
 80008b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b6:	bf00      	nop
 80008b8:	080008d9 	.word	0x080008d9
 80008bc:	08000907 	.word	0x08000907
 80008c0:	08000935 	.word	0x08000935
 80008c4:	08000963 	.word	0x08000963
 80008c8:	08000991 	.word	0x08000991
 80008cc:	080009bf 	.word	0x080009bf
 80008d0:	080009ed 	.word	0x080009ed
 80008d4:	08000a1b 	.word	0x08000a1b
	switch (index2){
	case 0:
		writeByte(ENM0_GPIO_Port, cot_red, 0X01);
 80008d8:	2201      	movs	r2, #1
 80008da:	495e      	ldr	r1, [pc, #376]	; (8000a54 <displayLedMatrix_red+0x1b8>)
 80008dc:	485e      	ldr	r0, [pc, #376]	; (8000a58 <displayLedMatrix_red+0x1bc>)
 80008de:	f7ff ff7b 	bl	80007d8 <writeByte>
		writeByte(gENM0_GPIO_Port, cot_green, 0X00);
 80008e2:	2200      	movs	r2, #0
 80008e4:	495d      	ldr	r1, [pc, #372]	; (8000a5c <displayLedMatrix_red+0x1c0>)
 80008e6:	485e      	ldr	r0, [pc, #376]	; (8000a60 <displayLedMatrix_red+0x1c4>)
 80008e8:	f7ff ff76 	bl	80007d8 <writeByte>
		writeByte(ROW0_GPIO_Port, hang, buffer[index1][index2]);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	441a      	add	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4413      	add	r3, r2
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	461a      	mov	r2, r3
 80008fc:	4959      	ldr	r1, [pc, #356]	; (8000a64 <displayLedMatrix_red+0x1c8>)
 80008fe:	4858      	ldr	r0, [pc, #352]	; (8000a60 <displayLedMatrix_red+0x1c4>)
 8000900:	f7ff ff6a 	bl	80007d8 <writeByte>
		break;
 8000904:	e0a1      	b.n	8000a4a <displayLedMatrix_red+0x1ae>
	case 1:
		writeByte(ENM1_GPIO_Port, cot_red, 0X02);
 8000906:	2202      	movs	r2, #2
 8000908:	4952      	ldr	r1, [pc, #328]	; (8000a54 <displayLedMatrix_red+0x1b8>)
 800090a:	4853      	ldr	r0, [pc, #332]	; (8000a58 <displayLedMatrix_red+0x1bc>)
 800090c:	f7ff ff64 	bl	80007d8 <writeByte>
		writeByte(gENM0_GPIO_Port, cot_green, 0X00);
 8000910:	2200      	movs	r2, #0
 8000912:	4952      	ldr	r1, [pc, #328]	; (8000a5c <displayLedMatrix_red+0x1c0>)
 8000914:	4852      	ldr	r0, [pc, #328]	; (8000a60 <displayLedMatrix_red+0x1c4>)
 8000916:	f7ff ff5f 	bl	80007d8 <writeByte>
		writeByte(ROW1_GPIO_Port, hang, buffer[index1][index2]);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	441a      	add	r2, r3
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	494e      	ldr	r1, [pc, #312]	; (8000a64 <displayLedMatrix_red+0x1c8>)
 800092c:	484c      	ldr	r0, [pc, #304]	; (8000a60 <displayLedMatrix_red+0x1c4>)
 800092e:	f7ff ff53 	bl	80007d8 <writeByte>
		break;
 8000932:	e08a      	b.n	8000a4a <displayLedMatrix_red+0x1ae>
	case 2:
		writeByte(ENM2_GPIO_Port, cot_red, 0X04);
 8000934:	2204      	movs	r2, #4
 8000936:	4947      	ldr	r1, [pc, #284]	; (8000a54 <displayLedMatrix_red+0x1b8>)
 8000938:	4847      	ldr	r0, [pc, #284]	; (8000a58 <displayLedMatrix_red+0x1bc>)
 800093a:	f7ff ff4d 	bl	80007d8 <writeByte>
		writeByte(gENM0_GPIO_Port, cot_green, 0X00);
 800093e:	2200      	movs	r2, #0
 8000940:	4946      	ldr	r1, [pc, #280]	; (8000a5c <displayLedMatrix_red+0x1c0>)
 8000942:	4847      	ldr	r0, [pc, #284]	; (8000a60 <displayLedMatrix_red+0x1c4>)
 8000944:	f7ff ff48 	bl	80007d8 <writeByte>
		writeByte(ROW2_GPIO_Port, hang, buffer[index1][index2]);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	00db      	lsls	r3, r3, #3
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	441a      	add	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	4413      	add	r3, r2
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	4942      	ldr	r1, [pc, #264]	; (8000a64 <displayLedMatrix_red+0x1c8>)
 800095a:	4841      	ldr	r0, [pc, #260]	; (8000a60 <displayLedMatrix_red+0x1c4>)
 800095c:	f7ff ff3c 	bl	80007d8 <writeByte>
		break;
 8000960:	e073      	b.n	8000a4a <displayLedMatrix_red+0x1ae>
	case 3:
		writeByte(ENM3_GPIO_Port, cot_red, 0X08);
 8000962:	2208      	movs	r2, #8
 8000964:	493b      	ldr	r1, [pc, #236]	; (8000a54 <displayLedMatrix_red+0x1b8>)
 8000966:	483c      	ldr	r0, [pc, #240]	; (8000a58 <displayLedMatrix_red+0x1bc>)
 8000968:	f7ff ff36 	bl	80007d8 <writeByte>
		writeByte(gENM0_GPIO_Port, cot_green, 0X00);
 800096c:	2200      	movs	r2, #0
 800096e:	493b      	ldr	r1, [pc, #236]	; (8000a5c <displayLedMatrix_red+0x1c0>)
 8000970:	483b      	ldr	r0, [pc, #236]	; (8000a60 <displayLedMatrix_red+0x1c4>)
 8000972:	f7ff ff31 	bl	80007d8 <writeByte>
		writeByte(ROW3_GPIO_Port, hang, buffer[index1][index2]);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	441a      	add	r2, r3
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	4413      	add	r3, r2
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4937      	ldr	r1, [pc, #220]	; (8000a64 <displayLedMatrix_red+0x1c8>)
 8000988:	4835      	ldr	r0, [pc, #212]	; (8000a60 <displayLedMatrix_red+0x1c4>)
 800098a:	f7ff ff25 	bl	80007d8 <writeByte>
		break;
 800098e:	e05c      	b.n	8000a4a <displayLedMatrix_red+0x1ae>
	case 4:
		writeByte(ENM4_GPIO_Port, cot_red, 0X10);
 8000990:	2210      	movs	r2, #16
 8000992:	4930      	ldr	r1, [pc, #192]	; (8000a54 <displayLedMatrix_red+0x1b8>)
 8000994:	4830      	ldr	r0, [pc, #192]	; (8000a58 <displayLedMatrix_red+0x1bc>)
 8000996:	f7ff ff1f 	bl	80007d8 <writeByte>
		writeByte(gENM0_GPIO_Port, cot_green, 0X00);
 800099a:	2200      	movs	r2, #0
 800099c:	492f      	ldr	r1, [pc, #188]	; (8000a5c <displayLedMatrix_red+0x1c0>)
 800099e:	4830      	ldr	r0, [pc, #192]	; (8000a60 <displayLedMatrix_red+0x1c4>)
 80009a0:	f7ff ff1a 	bl	80007d8 <writeByte>
		writeByte(ROW4_GPIO_Port, hang, buffer[index1][index2]);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	441a      	add	r2, r3
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	4413      	add	r3, r2
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	492b      	ldr	r1, [pc, #172]	; (8000a64 <displayLedMatrix_red+0x1c8>)
 80009b6:	482a      	ldr	r0, [pc, #168]	; (8000a60 <displayLedMatrix_red+0x1c4>)
 80009b8:	f7ff ff0e 	bl	80007d8 <writeByte>
		break;
 80009bc:	e045      	b.n	8000a4a <displayLedMatrix_red+0x1ae>
	case 5:
		writeByte(ENM5_GPIO_Port, cot_red, 0X20);
 80009be:	2220      	movs	r2, #32
 80009c0:	4924      	ldr	r1, [pc, #144]	; (8000a54 <displayLedMatrix_red+0x1b8>)
 80009c2:	4825      	ldr	r0, [pc, #148]	; (8000a58 <displayLedMatrix_red+0x1bc>)
 80009c4:	f7ff ff08 	bl	80007d8 <writeByte>
		writeByte(gENM0_GPIO_Port, cot_green, 0X00);
 80009c8:	2200      	movs	r2, #0
 80009ca:	4924      	ldr	r1, [pc, #144]	; (8000a5c <displayLedMatrix_red+0x1c0>)
 80009cc:	4824      	ldr	r0, [pc, #144]	; (8000a60 <displayLedMatrix_red+0x1c4>)
 80009ce:	f7ff ff03 	bl	80007d8 <writeByte>
		writeByte(ROW5_GPIO_Port, hang, buffer[index1][index2]);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	441a      	add	r2, r3
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	4413      	add	r3, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4920      	ldr	r1, [pc, #128]	; (8000a64 <displayLedMatrix_red+0x1c8>)
 80009e4:	481e      	ldr	r0, [pc, #120]	; (8000a60 <displayLedMatrix_red+0x1c4>)
 80009e6:	f7ff fef7 	bl	80007d8 <writeByte>
		break;
 80009ea:	e02e      	b.n	8000a4a <displayLedMatrix_red+0x1ae>
	case 6:
		writeByte(ENM6_GPIO_Port, cot_red, 0X40);
 80009ec:	2240      	movs	r2, #64	; 0x40
 80009ee:	4919      	ldr	r1, [pc, #100]	; (8000a54 <displayLedMatrix_red+0x1b8>)
 80009f0:	4819      	ldr	r0, [pc, #100]	; (8000a58 <displayLedMatrix_red+0x1bc>)
 80009f2:	f7ff fef1 	bl	80007d8 <writeByte>
		writeByte(gENM0_GPIO_Port, cot_green, 0X00);
 80009f6:	2200      	movs	r2, #0
 80009f8:	4918      	ldr	r1, [pc, #96]	; (8000a5c <displayLedMatrix_red+0x1c0>)
 80009fa:	4819      	ldr	r0, [pc, #100]	; (8000a60 <displayLedMatrix_red+0x1c4>)
 80009fc:	f7ff feec 	bl	80007d8 <writeByte>
		writeByte(ROW6_GPIO_Port, hang, buffer[index1][index2]);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	441a      	add	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4914      	ldr	r1, [pc, #80]	; (8000a64 <displayLedMatrix_red+0x1c8>)
 8000a12:	4813      	ldr	r0, [pc, #76]	; (8000a60 <displayLedMatrix_red+0x1c4>)
 8000a14:	f7ff fee0 	bl	80007d8 <writeByte>
		break;
 8000a18:	e017      	b.n	8000a4a <displayLedMatrix_red+0x1ae>
	case 7:
		writeByte(ENM0_GPIO_Port, cot_red, 0X80);
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	490d      	ldr	r1, [pc, #52]	; (8000a54 <displayLedMatrix_red+0x1b8>)
 8000a1e:	480e      	ldr	r0, [pc, #56]	; (8000a58 <displayLedMatrix_red+0x1bc>)
 8000a20:	f7ff feda 	bl	80007d8 <writeByte>
		writeByte(gENM0_GPIO_Port, cot_green, 0X00);
 8000a24:	2200      	movs	r2, #0
 8000a26:	490d      	ldr	r1, [pc, #52]	; (8000a5c <displayLedMatrix_red+0x1c0>)
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <displayLedMatrix_red+0x1c4>)
 8000a2a:	f7ff fed5 	bl	80007d8 <writeByte>
		writeByte(ROW0_GPIO_Port, hang, buffer[index1][index2]);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	441a      	add	r2, r3
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	4413      	add	r3, r2
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4909      	ldr	r1, [pc, #36]	; (8000a64 <displayLedMatrix_red+0x1c8>)
 8000a40:	4807      	ldr	r0, [pc, #28]	; (8000a60 <displayLedMatrix_red+0x1c4>)
 8000a42:	f7ff fec9 	bl	80007d8 <writeByte>
		break;
 8000a46:	e000      	b.n	8000a4a <displayLedMatrix_red+0x1ae>
	default:
		break;
 8000a48:	bf00      	nop
	}
}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000003c 	.word	0x2000003c
 8000a58:	40010800 	.word	0x40010800
 8000a5c:	2000004c 	.word	0x2000004c
 8000a60:	40010c00 	.word	0x40010c00
 8000a64:	2000005c 	.word	0x2000005c

08000a68 <displayLedMatrix_green>:
void displayLedMatrix_green(int index1, int index2, uint8_t buffer[][8]){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	2b07      	cmp	r3, #7
 8000a78:	f200 80cc 	bhi.w	8000c14 <displayLedMatrix_green+0x1ac>
 8000a7c:	a201      	add	r2, pc, #4	; (adr r2, 8000a84 <displayLedMatrix_green+0x1c>)
 8000a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a82:	bf00      	nop
 8000a84:	08000aa5 	.word	0x08000aa5
 8000a88:	08000ad3 	.word	0x08000ad3
 8000a8c:	08000b01 	.word	0x08000b01
 8000a90:	08000b2f 	.word	0x08000b2f
 8000a94:	08000b5d 	.word	0x08000b5d
 8000a98:	08000b8b 	.word	0x08000b8b
 8000a9c:	08000bb9 	.word	0x08000bb9
 8000aa0:	08000be7 	.word	0x08000be7
	switch (index2){
	case 0:
		writeByte(ENM0_GPIO_Port, cot_red, 0X00);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	495e      	ldr	r1, [pc, #376]	; (8000c20 <displayLedMatrix_green+0x1b8>)
 8000aa8:	485e      	ldr	r0, [pc, #376]	; (8000c24 <displayLedMatrix_green+0x1bc>)
 8000aaa:	f7ff fe95 	bl	80007d8 <writeByte>
		writeByte(gENM0_GPIO_Port, cot_green, 0X00);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	495d      	ldr	r1, [pc, #372]	; (8000c28 <displayLedMatrix_green+0x1c0>)
 8000ab2:	485e      	ldr	r0, [pc, #376]	; (8000c2c <displayLedMatrix_green+0x1c4>)
 8000ab4:	f7ff fe90 	bl	80007d8 <writeByte>
		writeByte(ROW0_GPIO_Port, hang, buffer[index1][index2]);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	441a      	add	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4959      	ldr	r1, [pc, #356]	; (8000c30 <displayLedMatrix_green+0x1c8>)
 8000aca:	4858      	ldr	r0, [pc, #352]	; (8000c2c <displayLedMatrix_green+0x1c4>)
 8000acc:	f7ff fe84 	bl	80007d8 <writeByte>
		break;
 8000ad0:	e0a1      	b.n	8000c16 <displayLedMatrix_green+0x1ae>
	case 1:
		writeByte(ENM1_GPIO_Port, cot_red, 0X00);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4952      	ldr	r1, [pc, #328]	; (8000c20 <displayLedMatrix_green+0x1b8>)
 8000ad6:	4853      	ldr	r0, [pc, #332]	; (8000c24 <displayLedMatrix_green+0x1bc>)
 8000ad8:	f7ff fe7e 	bl	80007d8 <writeByte>
		writeByte(gENM0_GPIO_Port, cot_green, 0X02);
 8000adc:	2202      	movs	r2, #2
 8000ade:	4952      	ldr	r1, [pc, #328]	; (8000c28 <displayLedMatrix_green+0x1c0>)
 8000ae0:	4852      	ldr	r0, [pc, #328]	; (8000c2c <displayLedMatrix_green+0x1c4>)
 8000ae2:	f7ff fe79 	bl	80007d8 <writeByte>
		writeByte(ROW1_GPIO_Port, hang, buffer[index1][index2]);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	441a      	add	r2, r3
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	4413      	add	r3, r2
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	494e      	ldr	r1, [pc, #312]	; (8000c30 <displayLedMatrix_green+0x1c8>)
 8000af8:	484c      	ldr	r0, [pc, #304]	; (8000c2c <displayLedMatrix_green+0x1c4>)
 8000afa:	f7ff fe6d 	bl	80007d8 <writeByte>
		break;
 8000afe:	e08a      	b.n	8000c16 <displayLedMatrix_green+0x1ae>
	case 2:
		writeByte(ENM2_GPIO_Port, cot_red, 0X00);
 8000b00:	2200      	movs	r2, #0
 8000b02:	4947      	ldr	r1, [pc, #284]	; (8000c20 <displayLedMatrix_green+0x1b8>)
 8000b04:	4847      	ldr	r0, [pc, #284]	; (8000c24 <displayLedMatrix_green+0x1bc>)
 8000b06:	f7ff fe67 	bl	80007d8 <writeByte>
		writeByte(gENM0_GPIO_Port, cot_green, 0X04);
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	4946      	ldr	r1, [pc, #280]	; (8000c28 <displayLedMatrix_green+0x1c0>)
 8000b0e:	4847      	ldr	r0, [pc, #284]	; (8000c2c <displayLedMatrix_green+0x1c4>)
 8000b10:	f7ff fe62 	bl	80007d8 <writeByte>
		writeByte(ROW2_GPIO_Port, hang, buffer[index1][index2]);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	441a      	add	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4413      	add	r3, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	4942      	ldr	r1, [pc, #264]	; (8000c30 <displayLedMatrix_green+0x1c8>)
 8000b26:	4841      	ldr	r0, [pc, #260]	; (8000c2c <displayLedMatrix_green+0x1c4>)
 8000b28:	f7ff fe56 	bl	80007d8 <writeByte>
		break;
 8000b2c:	e073      	b.n	8000c16 <displayLedMatrix_green+0x1ae>
	case 3:
		writeByte(ENM3_GPIO_Port, cot_red, 0X00);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	493b      	ldr	r1, [pc, #236]	; (8000c20 <displayLedMatrix_green+0x1b8>)
 8000b32:	483c      	ldr	r0, [pc, #240]	; (8000c24 <displayLedMatrix_green+0x1bc>)
 8000b34:	f7ff fe50 	bl	80007d8 <writeByte>
		writeByte(gENM0_GPIO_Port, cot_green, 0X08);
 8000b38:	2208      	movs	r2, #8
 8000b3a:	493b      	ldr	r1, [pc, #236]	; (8000c28 <displayLedMatrix_green+0x1c0>)
 8000b3c:	483b      	ldr	r0, [pc, #236]	; (8000c2c <displayLedMatrix_green+0x1c4>)
 8000b3e:	f7ff fe4b 	bl	80007d8 <writeByte>
		writeByte(ROW3_GPIO_Port, hang, buffer[index1][index2]);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	441a      	add	r2, r3
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4937      	ldr	r1, [pc, #220]	; (8000c30 <displayLedMatrix_green+0x1c8>)
 8000b54:	4835      	ldr	r0, [pc, #212]	; (8000c2c <displayLedMatrix_green+0x1c4>)
 8000b56:	f7ff fe3f 	bl	80007d8 <writeByte>
		break;
 8000b5a:	e05c      	b.n	8000c16 <displayLedMatrix_green+0x1ae>
	case 4:
		writeByte(ENM4_GPIO_Port, cot_red, 0X00);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	4930      	ldr	r1, [pc, #192]	; (8000c20 <displayLedMatrix_green+0x1b8>)
 8000b60:	4830      	ldr	r0, [pc, #192]	; (8000c24 <displayLedMatrix_green+0x1bc>)
 8000b62:	f7ff fe39 	bl	80007d8 <writeByte>
		writeByte(gENM0_GPIO_Port, cot_green, 0X10);
 8000b66:	2210      	movs	r2, #16
 8000b68:	492f      	ldr	r1, [pc, #188]	; (8000c28 <displayLedMatrix_green+0x1c0>)
 8000b6a:	4830      	ldr	r0, [pc, #192]	; (8000c2c <displayLedMatrix_green+0x1c4>)
 8000b6c:	f7ff fe34 	bl	80007d8 <writeByte>
		writeByte(ROW4_GPIO_Port, hang, buffer[index1][index2]);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	441a      	add	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	492b      	ldr	r1, [pc, #172]	; (8000c30 <displayLedMatrix_green+0x1c8>)
 8000b82:	482a      	ldr	r0, [pc, #168]	; (8000c2c <displayLedMatrix_green+0x1c4>)
 8000b84:	f7ff fe28 	bl	80007d8 <writeByte>
		break;
 8000b88:	e045      	b.n	8000c16 <displayLedMatrix_green+0x1ae>
	case 5:
		writeByte(ENM5_GPIO_Port, cot_red, 0X00);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	4924      	ldr	r1, [pc, #144]	; (8000c20 <displayLedMatrix_green+0x1b8>)
 8000b8e:	4825      	ldr	r0, [pc, #148]	; (8000c24 <displayLedMatrix_green+0x1bc>)
 8000b90:	f7ff fe22 	bl	80007d8 <writeByte>
		writeByte(gENM0_GPIO_Port, cot_green, 0X20);
 8000b94:	2220      	movs	r2, #32
 8000b96:	4924      	ldr	r1, [pc, #144]	; (8000c28 <displayLedMatrix_green+0x1c0>)
 8000b98:	4824      	ldr	r0, [pc, #144]	; (8000c2c <displayLedMatrix_green+0x1c4>)
 8000b9a:	f7ff fe1d 	bl	80007d8 <writeByte>
		writeByte(ROW5_GPIO_Port, hang, buffer[index1][index2]);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	441a      	add	r2, r3
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	4413      	add	r3, r2
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4920      	ldr	r1, [pc, #128]	; (8000c30 <displayLedMatrix_green+0x1c8>)
 8000bb0:	481e      	ldr	r0, [pc, #120]	; (8000c2c <displayLedMatrix_green+0x1c4>)
 8000bb2:	f7ff fe11 	bl	80007d8 <writeByte>
		break;
 8000bb6:	e02e      	b.n	8000c16 <displayLedMatrix_green+0x1ae>
	case 6:
		writeByte(ENM6_GPIO_Port, cot_red, 0X00);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4919      	ldr	r1, [pc, #100]	; (8000c20 <displayLedMatrix_green+0x1b8>)
 8000bbc:	4819      	ldr	r0, [pc, #100]	; (8000c24 <displayLedMatrix_green+0x1bc>)
 8000bbe:	f7ff fe0b 	bl	80007d8 <writeByte>
		writeByte(gENM0_GPIO_Port, cot_green, 0X40);
 8000bc2:	2240      	movs	r2, #64	; 0x40
 8000bc4:	4918      	ldr	r1, [pc, #96]	; (8000c28 <displayLedMatrix_green+0x1c0>)
 8000bc6:	4819      	ldr	r0, [pc, #100]	; (8000c2c <displayLedMatrix_green+0x1c4>)
 8000bc8:	f7ff fe06 	bl	80007d8 <writeByte>
		writeByte(ROW6_GPIO_Port, hang, buffer[index1][index2]);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	441a      	add	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4914      	ldr	r1, [pc, #80]	; (8000c30 <displayLedMatrix_green+0x1c8>)
 8000bde:	4813      	ldr	r0, [pc, #76]	; (8000c2c <displayLedMatrix_green+0x1c4>)
 8000be0:	f7ff fdfa 	bl	80007d8 <writeByte>
		break;
 8000be4:	e017      	b.n	8000c16 <displayLedMatrix_green+0x1ae>
	case 7:
		writeByte(ENM0_GPIO_Port, cot_red, 0X00);
 8000be6:	2200      	movs	r2, #0
 8000be8:	490d      	ldr	r1, [pc, #52]	; (8000c20 <displayLedMatrix_green+0x1b8>)
 8000bea:	480e      	ldr	r0, [pc, #56]	; (8000c24 <displayLedMatrix_green+0x1bc>)
 8000bec:	f7ff fdf4 	bl	80007d8 <writeByte>
		writeByte(gENM0_GPIO_Port, cot_green, 0X80);
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	490d      	ldr	r1, [pc, #52]	; (8000c28 <displayLedMatrix_green+0x1c0>)
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <displayLedMatrix_green+0x1c4>)
 8000bf6:	f7ff fdef 	bl	80007d8 <writeByte>
		writeByte(ROW0_GPIO_Port, hang, buffer[index1][index2]);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	441a      	add	r2, r3
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	4413      	add	r3, r2
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4909      	ldr	r1, [pc, #36]	; (8000c30 <displayLedMatrix_green+0x1c8>)
 8000c0c:	4807      	ldr	r0, [pc, #28]	; (8000c2c <displayLedMatrix_green+0x1c4>)
 8000c0e:	f7ff fde3 	bl	80007d8 <writeByte>
		break;
 8000c12:	e000      	b.n	8000c16 <displayLedMatrix_green+0x1ae>
	default:
		break;
 8000c14:	bf00      	nop
	}
}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2000003c 	.word	0x2000003c
 8000c24:	40010800 	.word	0x40010800
 8000c28:	2000004c 	.word	0x2000004c
 8000c2c:	40010c00 	.word	0x40010c00
 8000c30:	2000005c 	.word	0x2000005c

08000c34 <set_state_matrix>:


void set_state_matrix(){
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
	if(mode_char == A && mode_animation == stable && mode_color == red) state_led_matrix = A_stable_red;
 8000c38:	4b5b      	ldr	r3, [pc, #364]	; (8000da8 <set_state_matrix+0x174>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d10a      	bne.n	8000c56 <set_state_matrix+0x22>
 8000c40:	4b5a      	ldr	r3, [pc, #360]	; (8000dac <set_state_matrix+0x178>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b0d      	cmp	r3, #13
 8000c46:	d106      	bne.n	8000c56 <set_state_matrix+0x22>
 8000c48:	4b59      	ldr	r3, [pc, #356]	; (8000db0 <set_state_matrix+0x17c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b0a      	cmp	r3, #10
 8000c4e:	d102      	bne.n	8000c56 <set_state_matrix+0x22>
 8000c50:	4b58      	ldr	r3, [pc, #352]	; (8000db4 <set_state_matrix+0x180>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	601a      	str	r2, [r3, #0]
	if(mode_char == A && mode_animation == stable && mode_color == green) state_led_matrix = A_stable_green;
 8000c56:	4b54      	ldr	r3, [pc, #336]	; (8000da8 <set_state_matrix+0x174>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b0f      	cmp	r3, #15
 8000c5c:	d10a      	bne.n	8000c74 <set_state_matrix+0x40>
 8000c5e:	4b53      	ldr	r3, [pc, #332]	; (8000dac <set_state_matrix+0x178>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b0d      	cmp	r3, #13
 8000c64:	d106      	bne.n	8000c74 <set_state_matrix+0x40>
 8000c66:	4b52      	ldr	r3, [pc, #328]	; (8000db0 <set_state_matrix+0x17c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b0b      	cmp	r3, #11
 8000c6c:	d102      	bne.n	8000c74 <set_state_matrix+0x40>
 8000c6e:	4b51      	ldr	r3, [pc, #324]	; (8000db4 <set_state_matrix+0x180>)
 8000c70:	2202      	movs	r2, #2
 8000c72:	601a      	str	r2, [r3, #0]
	if(mode_char == A && mode_animation == stable && mode_color == yellow) state_led_matrix = A_stable_yellow;
 8000c74:	4b4c      	ldr	r3, [pc, #304]	; (8000da8 <set_state_matrix+0x174>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d10a      	bne.n	8000c92 <set_state_matrix+0x5e>
 8000c7c:	4b4b      	ldr	r3, [pc, #300]	; (8000dac <set_state_matrix+0x178>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b0d      	cmp	r3, #13
 8000c82:	d106      	bne.n	8000c92 <set_state_matrix+0x5e>
 8000c84:	4b4a      	ldr	r3, [pc, #296]	; (8000db0 <set_state_matrix+0x17c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b0c      	cmp	r3, #12
 8000c8a:	d102      	bne.n	8000c92 <set_state_matrix+0x5e>
 8000c8c:	4b49      	ldr	r3, [pc, #292]	; (8000db4 <set_state_matrix+0x180>)
 8000c8e:	2203      	movs	r2, #3
 8000c90:	601a      	str	r2, [r3, #0]
	if(mode_char == A && mode_animation == run && mode_color == red) state_led_matrix = A_run_red;
 8000c92:	4b45      	ldr	r3, [pc, #276]	; (8000da8 <set_state_matrix+0x174>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b0f      	cmp	r3, #15
 8000c98:	d10a      	bne.n	8000cb0 <set_state_matrix+0x7c>
 8000c9a:	4b44      	ldr	r3, [pc, #272]	; (8000dac <set_state_matrix+0x178>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b0e      	cmp	r3, #14
 8000ca0:	d106      	bne.n	8000cb0 <set_state_matrix+0x7c>
 8000ca2:	4b43      	ldr	r3, [pc, #268]	; (8000db0 <set_state_matrix+0x17c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b0a      	cmp	r3, #10
 8000ca8:	d102      	bne.n	8000cb0 <set_state_matrix+0x7c>
 8000caa:	4b42      	ldr	r3, [pc, #264]	; (8000db4 <set_state_matrix+0x180>)
 8000cac:	2204      	movs	r2, #4
 8000cae:	601a      	str	r2, [r3, #0]
	if(mode_char == A && mode_animation == run && mode_color == green) state_led_matrix = A_run_green;
 8000cb0:	4b3d      	ldr	r3, [pc, #244]	; (8000da8 <set_state_matrix+0x174>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d10a      	bne.n	8000cce <set_state_matrix+0x9a>
 8000cb8:	4b3c      	ldr	r3, [pc, #240]	; (8000dac <set_state_matrix+0x178>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b0e      	cmp	r3, #14
 8000cbe:	d106      	bne.n	8000cce <set_state_matrix+0x9a>
 8000cc0:	4b3b      	ldr	r3, [pc, #236]	; (8000db0 <set_state_matrix+0x17c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b0b      	cmp	r3, #11
 8000cc6:	d102      	bne.n	8000cce <set_state_matrix+0x9a>
 8000cc8:	4b3a      	ldr	r3, [pc, #232]	; (8000db4 <set_state_matrix+0x180>)
 8000cca:	2205      	movs	r2, #5
 8000ccc:	601a      	str	r2, [r3, #0]
	if(mode_char == A && mode_animation == run && mode_color == yellow) state_led_matrix = A_run_yellow;
 8000cce:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <set_state_matrix+0x174>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b0f      	cmp	r3, #15
 8000cd4:	d10a      	bne.n	8000cec <set_state_matrix+0xb8>
 8000cd6:	4b35      	ldr	r3, [pc, #212]	; (8000dac <set_state_matrix+0x178>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b0e      	cmp	r3, #14
 8000cdc:	d106      	bne.n	8000cec <set_state_matrix+0xb8>
 8000cde:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <set_state_matrix+0x17c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b0c      	cmp	r3, #12
 8000ce4:	d102      	bne.n	8000cec <set_state_matrix+0xb8>
 8000ce6:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <set_state_matrix+0x180>)
 8000ce8:	2206      	movs	r2, #6
 8000cea:	601a      	str	r2, [r3, #0]

	if(mode_char == B && mode_animation == stable && mode_color == red) state_led_matrix = B_stable_red;
 8000cec:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <set_state_matrix+0x174>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b10      	cmp	r3, #16
 8000cf2:	d10a      	bne.n	8000d0a <set_state_matrix+0xd6>
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <set_state_matrix+0x178>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b0d      	cmp	r3, #13
 8000cfa:	d106      	bne.n	8000d0a <set_state_matrix+0xd6>
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <set_state_matrix+0x17c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b0a      	cmp	r3, #10
 8000d02:	d102      	bne.n	8000d0a <set_state_matrix+0xd6>
 8000d04:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <set_state_matrix+0x180>)
 8000d06:	2207      	movs	r2, #7
 8000d08:	601a      	str	r2, [r3, #0]
	if(mode_char == B && mode_animation == stable && mode_color == green) state_led_matrix = B_stable_green;
 8000d0a:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <set_state_matrix+0x174>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b10      	cmp	r3, #16
 8000d10:	d10a      	bne.n	8000d28 <set_state_matrix+0xf4>
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <set_state_matrix+0x178>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b0d      	cmp	r3, #13
 8000d18:	d106      	bne.n	8000d28 <set_state_matrix+0xf4>
 8000d1a:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <set_state_matrix+0x17c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b0b      	cmp	r3, #11
 8000d20:	d102      	bne.n	8000d28 <set_state_matrix+0xf4>
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <set_state_matrix+0x180>)
 8000d24:	2208      	movs	r2, #8
 8000d26:	601a      	str	r2, [r3, #0]
	if(mode_char == B && mode_animation == stable && mode_color == yellow) state_led_matrix = B_stable_yellow;
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <set_state_matrix+0x174>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b10      	cmp	r3, #16
 8000d2e:	d10a      	bne.n	8000d46 <set_state_matrix+0x112>
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <set_state_matrix+0x178>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b0d      	cmp	r3, #13
 8000d36:	d106      	bne.n	8000d46 <set_state_matrix+0x112>
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <set_state_matrix+0x17c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b0c      	cmp	r3, #12
 8000d3e:	d102      	bne.n	8000d46 <set_state_matrix+0x112>
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <set_state_matrix+0x180>)
 8000d42:	2209      	movs	r2, #9
 8000d44:	601a      	str	r2, [r3, #0]
	if(mode_char == B && mode_animation == run && mode_color == red) state_led_matrix = B_run_red;
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <set_state_matrix+0x174>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b10      	cmp	r3, #16
 8000d4c:	d10a      	bne.n	8000d64 <set_state_matrix+0x130>
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <set_state_matrix+0x178>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b0e      	cmp	r3, #14
 8000d54:	d106      	bne.n	8000d64 <set_state_matrix+0x130>
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <set_state_matrix+0x17c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b0a      	cmp	r3, #10
 8000d5c:	d102      	bne.n	8000d64 <set_state_matrix+0x130>
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <set_state_matrix+0x180>)
 8000d60:	220a      	movs	r2, #10
 8000d62:	601a      	str	r2, [r3, #0]
	if(mode_char == B && mode_animation == run && mode_color == green) state_led_matrix = B_run_green;
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <set_state_matrix+0x174>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b10      	cmp	r3, #16
 8000d6a:	d10a      	bne.n	8000d82 <set_state_matrix+0x14e>
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <set_state_matrix+0x178>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b0e      	cmp	r3, #14
 8000d72:	d106      	bne.n	8000d82 <set_state_matrix+0x14e>
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <set_state_matrix+0x17c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b0b      	cmp	r3, #11
 8000d7a:	d102      	bne.n	8000d82 <set_state_matrix+0x14e>
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <set_state_matrix+0x180>)
 8000d7e:	220b      	movs	r2, #11
 8000d80:	601a      	str	r2, [r3, #0]
	if(mode_char == B && mode_animation == run && mode_color == yellow) state_led_matrix = B_run_yellow;
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <set_state_matrix+0x174>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b10      	cmp	r3, #16
 8000d88:	d10a      	bne.n	8000da0 <set_state_matrix+0x16c>
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <set_state_matrix+0x178>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b0e      	cmp	r3, #14
 8000d90:	d106      	bne.n	8000da0 <set_state_matrix+0x16c>
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <set_state_matrix+0x17c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b0c      	cmp	r3, #12
 8000d98:	d102      	bne.n	8000da0 <set_state_matrix+0x16c>
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <set_state_matrix+0x180>)
 8000d9c:	220c      	movs	r2, #12
 8000d9e:	601a      	str	r2, [r3, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	200001bc 	.word	0x200001bc
 8000dac:	200001c0 	.word	0x200001c0
 8000db0:	200001c4 	.word	0x200001c4
 8000db4:	200001b4 	.word	0x200001b4

08000db8 <displayLedMatrix>:

// mat co chu cam day 1 - 12, ben phai la row1, ben canh la red1
void displayLedMatrix(int index1, int index2){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
	set_state_matrix();
 8000dc2:	f7ff ff37 	bl	8000c34 <set_state_matrix>
	switch(state_led_matrix){
 8000dc6:	4b37      	ldr	r3, [pc, #220]	; (8000ea4 <displayLedMatrix+0xec>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	2b0b      	cmp	r3, #11
 8000dce:	d863      	bhi.n	8000e98 <displayLedMatrix+0xe0>
 8000dd0:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <displayLedMatrix+0x20>)
 8000dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd6:	bf00      	nop
 8000dd8:	08000e09 	.word	0x08000e09
 8000ddc:	08000e15 	.word	0x08000e15
 8000de0:	08000e21 	.word	0x08000e21
 8000de4:	08000e2d 	.word	0x08000e2d
 8000de8:	08000e39 	.word	0x08000e39
 8000dec:	08000e45 	.word	0x08000e45
 8000df0:	08000e51 	.word	0x08000e51
 8000df4:	08000e5d 	.word	0x08000e5d
 8000df8:	08000e69 	.word	0x08000e69
 8000dfc:	08000e75 	.word	0x08000e75
 8000e00:	08000e81 	.word	0x08000e81
 8000e04:	08000e8d 	.word	0x08000e8d

	case A_stable_red:
		displayLedMatrix_red(0, index2, a_stay);
 8000e08:	4a27      	ldr	r2, [pc, #156]	; (8000ea8 <displayLedMatrix+0xf0>)
 8000e0a:	6839      	ldr	r1, [r7, #0]
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff fd45 	bl	800089c <displayLedMatrix_red>
		break;
 8000e12:	e042      	b.n	8000e9a <displayLedMatrix+0xe2>
	case A_stable_green:
		displayLedMatrix_green(0, index2, a_stay);
 8000e14:	4a24      	ldr	r2, [pc, #144]	; (8000ea8 <displayLedMatrix+0xf0>)
 8000e16:	6839      	ldr	r1, [r7, #0]
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f7ff fe25 	bl	8000a68 <displayLedMatrix_green>
		break;
 8000e1e:	e03c      	b.n	8000e9a <displayLedMatrix+0xe2>
	case A_stable_yellow:
		displayLedMatrix_red(0, index2, a_stay);
 8000e20:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <displayLedMatrix+0xf0>)
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff fd39 	bl	800089c <displayLedMatrix_red>
		break;
 8000e2a:	e036      	b.n	8000e9a <displayLedMatrix+0xe2>
	case A_run_red:
		displayLedMatrix_red(index1, index2, a_run);
 8000e2c:	4a1f      	ldr	r2, [pc, #124]	; (8000eac <displayLedMatrix+0xf4>)
 8000e2e:	6839      	ldr	r1, [r7, #0]
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fd33 	bl	800089c <displayLedMatrix_red>
		break;
 8000e36:	e030      	b.n	8000e9a <displayLedMatrix+0xe2>
	case A_run_green:
		displayLedMatrix_green(index1, index2, a_run);
 8000e38:	4a1c      	ldr	r2, [pc, #112]	; (8000eac <displayLedMatrix+0xf4>)
 8000e3a:	6839      	ldr	r1, [r7, #0]
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff fe13 	bl	8000a68 <displayLedMatrix_green>
		break;
 8000e42:	e02a      	b.n	8000e9a <displayLedMatrix+0xe2>
	case A_run_yellow:
		displayLedMatrix_red(index1, index2, a_run);
 8000e44:	4a19      	ldr	r2, [pc, #100]	; (8000eac <displayLedMatrix+0xf4>)
 8000e46:	6839      	ldr	r1, [r7, #0]
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff fd27 	bl	800089c <displayLedMatrix_red>
		break;
 8000e4e:	e024      	b.n	8000e9a <displayLedMatrix+0xe2>

	case B_stable_red:
		displayLedMatrix_red(0, index2, b_stay);
 8000e50:	4a17      	ldr	r2, [pc, #92]	; (8000eb0 <displayLedMatrix+0xf8>)
 8000e52:	6839      	ldr	r1, [r7, #0]
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff fd21 	bl	800089c <displayLedMatrix_red>
		break;
 8000e5a:	e01e      	b.n	8000e9a <displayLedMatrix+0xe2>
	case B_stable_green:
		displayLedMatrix_green(0, index2, b_stay);
 8000e5c:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <displayLedMatrix+0xf8>)
 8000e5e:	6839      	ldr	r1, [r7, #0]
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff fe01 	bl	8000a68 <displayLedMatrix_green>
		break;
 8000e66:	e018      	b.n	8000e9a <displayLedMatrix+0xe2>
	case B_stable_yellow:
		displayLedMatrix_red(0, index2, b_stay);
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <displayLedMatrix+0xf8>)
 8000e6a:	6839      	ldr	r1, [r7, #0]
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fd15 	bl	800089c <displayLedMatrix_red>
		break;
 8000e72:	e012      	b.n	8000e9a <displayLedMatrix+0xe2>
	case B_run_red:
		displayLedMatrix_red(index1, index2, b_run);
 8000e74:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <displayLedMatrix+0xfc>)
 8000e76:	6839      	ldr	r1, [r7, #0]
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff fd0f 	bl	800089c <displayLedMatrix_red>
		break;
 8000e7e:	e00c      	b.n	8000e9a <displayLedMatrix+0xe2>
	case B_run_green:
		displayLedMatrix_green(index1, index2, b_run);
 8000e80:	4a0c      	ldr	r2, [pc, #48]	; (8000eb4 <displayLedMatrix+0xfc>)
 8000e82:	6839      	ldr	r1, [r7, #0]
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff fdef 	bl	8000a68 <displayLedMatrix_green>
		break;
 8000e8a:	e006      	b.n	8000e9a <displayLedMatrix+0xe2>
	case B_run_yellow:
		displayLedMatrix_red(index1, index2, b_run);
 8000e8c:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <displayLedMatrix+0xfc>)
 8000e8e:	6839      	ldr	r1, [r7, #0]
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff fd03 	bl	800089c <displayLedMatrix_red>
		break;
 8000e96:	e000      	b.n	8000e9a <displayLedMatrix+0xe2>
	default:
		break;
 8000e98:	bf00      	nop
	}
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200001b4 	.word	0x200001b4
 8000ea8:	2000006c 	.word	0x2000006c
 8000eac:	20000074 	.word	0x20000074
 8000eb0:	200000e4 	.word	0x200000e4
 8000eb4:	200000ec 	.word	0x200000ec

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebc:	f000 fa72 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec0:	f000 f80c 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec4:	f000 f892 	bl	8000fec <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ec8:	f000 f844 	bl	8000f54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <main+0x20>)
 8000ece:	f001 f9d1 	bl	8002274 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  controlLedMatrix();
 8000ed2:	f7ff fb8b 	bl	80005ec <controlLedMatrix>
 8000ed6:	e7fc      	b.n	8000ed2 <main+0x1a>
 8000ed8:	200001e0 	.word	0x200001e0

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b090      	sub	sp, #64	; 0x40
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	2228      	movs	r2, #40	; 0x28
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 fd94 	bl	8002a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f02:	2301      	movs	r3, #1
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f06:	2310      	movs	r3, #16
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0e:	f107 0318 	add.w	r3, r7, #24
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fd82 	bl	8001a1c <HAL_RCC_OscConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f1e:	f000 f8f7 	bl	8001110 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f22:	230f      	movs	r3, #15
 8000f24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 ffee 	bl	8001f1c <HAL_RCC_ClockConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f46:	f000 f8e3 	bl	8001110 <Error_Handler>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3740      	adds	r7, #64	; 0x40
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f7a:	f240 321f 	movw	r2, #799	; 0x31f
 8000f7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f88:	2209      	movs	r2, #9
 8000f8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f98:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f9a:	f001 f91b 	bl	80021d4 <HAL_TIM_Base_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fa4:	f000 f8b4 	bl	8001110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000fb6:	f001 fab7 	bl	8002528 <HAL_TIM_ConfigClockSource>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fc0:	f000 f8a6 	bl	8001110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000fd2:	f001 fc8d 	bl	80028f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fdc:	f000 f898 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200001e0 	.word	0x200001e0

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <MX_GPIO_Init+0xfc>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a38      	ldr	r2, [pc, #224]	; (80010e8 <MX_GPIO_Init+0xfc>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <MX_GPIO_Init+0xfc>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <MX_GPIO_Init+0xfc>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a32      	ldr	r2, [pc, #200]	; (80010e8 <MX_GPIO_Init+0xfc>)
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <MX_GPIO_Init+0xfc>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_GPIO_Init+0xfc>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a2c      	ldr	r2, [pc, #176]	; (80010e8 <MX_GPIO_Init+0xfc>)
 8001036:	f043 0310 	orr.w	r3, r3, #16
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <MX_GPIO_Init+0xfc>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|ENM2_Pin|ENM3_Pin
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800104e:	4827      	ldr	r0, [pc, #156]	; (80010ec <MX_GPIO_Init+0x100>)
 8001050:	f000 fcb3 	bl	80019ba <HAL_GPIO_WritePin>
                          |ENM4_Pin|ENM5_Pin|ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROW0_Pin|ROW1_Pin|ROW2_Pin|gENM2_Pin
 8001054:	2200      	movs	r2, #0
 8001056:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800105a:	4825      	ldr	r0, [pc, #148]	; (80010f0 <MX_GPIO_Init+0x104>)
 800105c:	f000 fcad 	bl	80019ba <HAL_GPIO_WritePin>
                          |gENM3_Pin|gENM4_Pin|gENM5_Pin|gENM6_Pin
                          |gENM7_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin
                          |ROW6_Pin|ROW7_Pin|gENM0_Pin|gENM1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_NORMAL_MODE_Pin|LED_CHAR_MODE_Pin|LED_ANI_MODE_Pin|LED_COLOR_MODE_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001066:	4823      	ldr	r0, [pc, #140]	; (80010f4 <MX_GPIO_Init+0x108>)
 8001068:	f000 fca7 	bl	80019ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin ENM2_Pin ENM3_Pin
                           ENM4_Pin ENM5_Pin ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|ENM2_Pin|ENM3_Pin
 800106c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001070:	613b      	str	r3, [r7, #16]
                          |ENM4_Pin|ENM5_Pin|ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2302      	movs	r3, #2
 800107c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	4619      	mov	r1, r3
 8001084:	4819      	ldr	r0, [pc, #100]	; (80010ec <MX_GPIO_Init+0x100>)
 8001086:	f000 fafd 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin gENM2_Pin
                           gENM3_Pin gENM4_Pin gENM5_Pin gENM6_Pin
                           gENM7_Pin ROW3_Pin ROW4_Pin ROW5_Pin
                           ROW6_Pin ROW7_Pin gENM0_Pin gENM1_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|gENM2_Pin
 800108a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800108e:	613b      	str	r3, [r7, #16]
                          |gENM3_Pin|gENM4_Pin|gENM5_Pin|gENM6_Pin
                          |gENM7_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin
                          |ROW6_Pin|ROW7_Pin|gENM0_Pin|gENM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2302      	movs	r3, #2
 800109a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	4619      	mov	r1, r3
 80010a2:	4813      	ldr	r0, [pc, #76]	; (80010f0 <MX_GPIO_Init+0x104>)
 80010a4:	f000 faee 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_NORMAL_MODE_Pin LED_CHAR_MODE_Pin LED_ANI_MODE_Pin LED_COLOR_MODE_Pin */
  GPIO_InitStruct.Pin = LED_NORMAL_MODE_Pin|LED_CHAR_MODE_Pin|LED_ANI_MODE_Pin|LED_COLOR_MODE_Pin;
 80010a8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80010ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <MX_GPIO_Init+0x108>)
 80010c2:	f000 fadf 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_MODE_Pin BUTTON_CHANGE_Pin */
  GPIO_InitStruct.Pin = BUTTON_MODE_Pin|BUTTON_CHANGE_Pin;
 80010c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4619      	mov	r1, r3
 80010da:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_GPIO_Init+0x100>)
 80010dc:	f000 fad2 	bl	8001684 <HAL_GPIO_Init>

}
 80010e0:	bf00      	nop
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010800 	.word	0x40010800
 80010f0:	40010c00 	.word	0x40010c00
 80010f4:	40011000 	.word	0x40011000

080010f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	timerRun();
 8001100:	f000 f85a 	bl	80011b8 <timerRun>
	get_key_input_all();
 8001104:	f7ff fa0c 	bl	8000520 <get_key_input_all>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	e7fe      	b.n	8001118 <Error_Handler+0x8>
	...

0800111c <setTimer1>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration){
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/DURATION_DIVIDE;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <setTimer1+0x28>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	fb92 f3f3 	sdiv	r3, r2, r3
 800112e:	4a06      	ldr	r2, [pc, #24]	; (8001148 <setTimer1+0x2c>)
 8001130:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <setTimer1+0x30>)
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000015c 	.word	0x2000015c
 8001148:	200001c8 	.word	0x200001c8
 800114c:	200001cc 	.word	0x200001cc

08001150 <setTimer2>:
void setTimer2(int duration){
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/DURATION_DIVIDE;
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <setTimer2+0x28>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001162:	4a06      	ldr	r2, [pc, #24]	; (800117c <setTimer2+0x2c>)
 8001164:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <setTimer2+0x30>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2000015c 	.word	0x2000015c
 800117c:	200001d0 	.word	0x200001d0
 8001180:	200001d4 	.word	0x200001d4

08001184 <setTimer3>:
void setTimer3(int duration){
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/DURATION_DIVIDE;
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <setTimer3+0x28>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	fb92 f3f3 	sdiv	r3, r2, r3
 8001196:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <setTimer3+0x2c>)
 8001198:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <setTimer3+0x30>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2000015c 	.word	0x2000015c
 80011b0:	200001d8 	.word	0x200001d8
 80011b4:	200001dc 	.word	0x200001dc

080011b8 <timerRun>:

void timerRun(){
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <timerRun+0x6c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	dd0b      	ble.n	80011dc <timerRun+0x24>
		timer1_counter--;
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <timerRun+0x6c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	4a16      	ldr	r2, [pc, #88]	; (8001224 <timerRun+0x6c>)
 80011cc:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <timerRun+0x6c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	dc02      	bgt.n	80011dc <timerRun+0x24>
			timer1_flag = 1;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <timerRun+0x70>)
 80011d8:	2201      	movs	r2, #1
 80011da:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <timerRun+0x74>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	dd0b      	ble.n	80011fc <timerRun+0x44>
		timer2_counter--;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <timerRun+0x74>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	4a10      	ldr	r2, [pc, #64]	; (800122c <timerRun+0x74>)
 80011ec:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <timerRun+0x74>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	dc02      	bgt.n	80011fc <timerRun+0x44>
			timer2_flag = 1;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <timerRun+0x78>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <timerRun+0x7c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	dd0b      	ble.n	800121c <timerRun+0x64>
		timer3_counter--;
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <timerRun+0x7c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3b01      	subs	r3, #1
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <timerRun+0x7c>)
 800120c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <timerRun+0x7c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	dc02      	bgt.n	800121c <timerRun+0x64>
			timer3_flag = 1;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <timerRun+0x80>)
 8001218:	2201      	movs	r2, #1
 800121a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	200001c8 	.word	0x200001c8
 8001228:	200001cc 	.word	0x200001cc
 800122c:	200001d0 	.word	0x200001d0
 8001230:	200001d4 	.word	0x200001d4
 8001234:	200001d8 	.word	0x200001d8
 8001238:	200001dc 	.word	0x200001dc

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_MspInit+0x5c>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	4a14      	ldr	r2, [pc, #80]	; (8001298 <HAL_MspInit+0x5c>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6193      	str	r3, [r2, #24]
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_MspInit+0x5c>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_MspInit+0x5c>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_MspInit+0x5c>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <HAL_MspInit+0x5c>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_MspInit+0x60>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_MspInit+0x60>)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000

080012a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b0:	d113      	bne.n	80012da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_TIM_Base_MspInit+0x44>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <HAL_TIM_Base_MspInit+0x44>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_TIM_Base_MspInit+0x44>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	201c      	movs	r0, #28
 80012d0:	f000 f9a1 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012d4:	201c      	movs	r0, #28
 80012d6:	f000 f9ba 	bl	800164e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <NMI_Handler+0x4>

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132e:	f000 f87f 	bl	8001430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <TIM2_IRQHandler+0x10>)
 800133e:	f000 ffeb 	bl	8002318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200001e0 	.word	0x200001e0

0800134c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001358:	f7ff fff8 	bl	800134c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800135c:	480b      	ldr	r0, [pc, #44]	; (800138c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800135e:	490c      	ldr	r1, [pc, #48]	; (8001390 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001360:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001374:	4c09      	ldr	r4, [pc, #36]	; (800139c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001382:	f001 fb25 	bl	80029d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001386:	f7ff fd97 	bl	8000eb8 <main>
  bx lr
 800138a:	4770      	bx	lr
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001394:	08002a6c 	.word	0x08002a6c
  ldr r2, =_sbss
 8001398:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 800139c:	2000022c 	.word	0x2000022c

080013a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC1_2_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_Init+0x28>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_Init+0x28>)
 80013ae:	f043 0310 	orr.w	r3, r3, #16
 80013b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 f923 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ba:	200f      	movs	r0, #15
 80013bc:	f000 f808 	bl	80013d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c0:	f7ff ff3c 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40022000 	.word	0x40022000

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x54>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x58>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f93b 	bl	800166a <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00e      	b.n	800141c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d80a      	bhi.n	800141a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f000 f903 	bl	8001616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_InitTick+0x5c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000160 	.word	0x20000160
 8001428:	20000168 	.word	0x20000168
 800142c:	20000164 	.word	0x20000164

08001430 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_IncTick+0x1c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_IncTick+0x20>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a03      	ldr	r2, [pc, #12]	; (8001450 <HAL_IncTick+0x20>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	20000168 	.word	0x20000168
 8001450:	20000228 	.word	0x20000228

08001454 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return uwTick;
 8001458:	4b02      	ldr	r3, [pc, #8]	; (8001464 <HAL_GetTick+0x10>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000228 	.word	0x20000228

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db0b      	blt.n	80014f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 021f 	and.w	r2, r3, #31
 80014e4:	4906      	ldr	r1, [pc, #24]	; (8001500 <__NVIC_EnableIRQ+0x34>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f202 	lsl.w	r2, r0, r2
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	; (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015cc:	d301      	bcc.n	80015d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00f      	b.n	80015f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <SysTick_Config+0x40>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015da:	210f      	movs	r1, #15
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f7ff ff90 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <SysTick_Config+0x40>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <SysTick_Config+0x40>)
 80015ec:	2207      	movs	r2, #7
 80015ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	e000e010 	.word	0xe000e010

08001600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff2d 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001628:	f7ff ff42 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 800162c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff ff90 	bl	8001558 <NVIC_EncodePriority>
 8001638:	4602      	mov	r2, r0
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff5f 	bl	8001504 <__NVIC_SetPriority>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff35 	bl	80014cc <__NVIC_EnableIRQ>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffa2 	bl	80015bc <SysTick_Config>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001684:	b480      	push	{r7}
 8001686:	b08b      	sub	sp, #44	; 0x2c
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001696:	e169      	b.n	800196c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001698:	2201      	movs	r2, #1
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	f040 8158 	bne.w	8001966 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4a9a      	ldr	r2, [pc, #616]	; (8001924 <HAL_GPIO_Init+0x2a0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d05e      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016c0:	4a98      	ldr	r2, [pc, #608]	; (8001924 <HAL_GPIO_Init+0x2a0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d875      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016c6:	4a98      	ldr	r2, [pc, #608]	; (8001928 <HAL_GPIO_Init+0x2a4>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d058      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016cc:	4a96      	ldr	r2, [pc, #600]	; (8001928 <HAL_GPIO_Init+0x2a4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d86f      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016d2:	4a96      	ldr	r2, [pc, #600]	; (800192c <HAL_GPIO_Init+0x2a8>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d052      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016d8:	4a94      	ldr	r2, [pc, #592]	; (800192c <HAL_GPIO_Init+0x2a8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d869      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016de:	4a94      	ldr	r2, [pc, #592]	; (8001930 <HAL_GPIO_Init+0x2ac>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d04c      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016e4:	4a92      	ldr	r2, [pc, #584]	; (8001930 <HAL_GPIO_Init+0x2ac>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d863      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016ea:	4a92      	ldr	r2, [pc, #584]	; (8001934 <HAL_GPIO_Init+0x2b0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d046      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016f0:	4a90      	ldr	r2, [pc, #576]	; (8001934 <HAL_GPIO_Init+0x2b0>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d85d      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016f6:	2b12      	cmp	r3, #18
 80016f8:	d82a      	bhi.n	8001750 <HAL_GPIO_Init+0xcc>
 80016fa:	2b12      	cmp	r3, #18
 80016fc:	d859      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016fe:	a201      	add	r2, pc, #4	; (adr r2, 8001704 <HAL_GPIO_Init+0x80>)
 8001700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001704:	0800177f 	.word	0x0800177f
 8001708:	08001759 	.word	0x08001759
 800170c:	0800176b 	.word	0x0800176b
 8001710:	080017ad 	.word	0x080017ad
 8001714:	080017b3 	.word	0x080017b3
 8001718:	080017b3 	.word	0x080017b3
 800171c:	080017b3 	.word	0x080017b3
 8001720:	080017b3 	.word	0x080017b3
 8001724:	080017b3 	.word	0x080017b3
 8001728:	080017b3 	.word	0x080017b3
 800172c:	080017b3 	.word	0x080017b3
 8001730:	080017b3 	.word	0x080017b3
 8001734:	080017b3 	.word	0x080017b3
 8001738:	080017b3 	.word	0x080017b3
 800173c:	080017b3 	.word	0x080017b3
 8001740:	080017b3 	.word	0x080017b3
 8001744:	080017b3 	.word	0x080017b3
 8001748:	08001761 	.word	0x08001761
 800174c:	08001775 	.word	0x08001775
 8001750:	4a79      	ldr	r2, [pc, #484]	; (8001938 <HAL_GPIO_Init+0x2b4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d013      	beq.n	800177e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001756:	e02c      	b.n	80017b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	623b      	str	r3, [r7, #32]
          break;
 800175e:	e029      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	3304      	adds	r3, #4
 8001766:	623b      	str	r3, [r7, #32]
          break;
 8001768:	e024      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	3308      	adds	r3, #8
 8001770:	623b      	str	r3, [r7, #32]
          break;
 8001772:	e01f      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	330c      	adds	r3, #12
 800177a:	623b      	str	r3, [r7, #32]
          break;
 800177c:	e01a      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001786:	2304      	movs	r3, #4
 8001788:	623b      	str	r3, [r7, #32]
          break;
 800178a:	e013      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001794:	2308      	movs	r3, #8
 8001796:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	611a      	str	r2, [r3, #16]
          break;
 800179e:	e009      	b.n	80017b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a0:	2308      	movs	r3, #8
 80017a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	615a      	str	r2, [r3, #20]
          break;
 80017aa:	e003      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
          break;
 80017b0:	e000      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          break;
 80017b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2bff      	cmp	r3, #255	; 0xff
 80017b8:	d801      	bhi.n	80017be <HAL_GPIO_Init+0x13a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	e001      	b.n	80017c2 <HAL_GPIO_Init+0x13e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3304      	adds	r3, #4
 80017c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2bff      	cmp	r3, #255	; 0xff
 80017c8:	d802      	bhi.n	80017d0 <HAL_GPIO_Init+0x14c>
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	e002      	b.n	80017d6 <HAL_GPIO_Init+0x152>
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	3b08      	subs	r3, #8
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	210f      	movs	r1, #15
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	401a      	ands	r2, r3
 80017e8:	6a39      	ldr	r1, [r7, #32]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	431a      	orrs	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80b1 	beq.w	8001966 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001804:	4b4d      	ldr	r3, [pc, #308]	; (800193c <HAL_GPIO_Init+0x2b8>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a4c      	ldr	r2, [pc, #304]	; (800193c <HAL_GPIO_Init+0x2b8>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b4a      	ldr	r3, [pc, #296]	; (800193c <HAL_GPIO_Init+0x2b8>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800181c:	4a48      	ldr	r2, [pc, #288]	; (8001940 <HAL_GPIO_Init+0x2bc>)
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a40      	ldr	r2, [pc, #256]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d013      	beq.n	8001870 <HAL_GPIO_Init+0x1ec>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a3f      	ldr	r2, [pc, #252]	; (8001948 <HAL_GPIO_Init+0x2c4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d00d      	beq.n	800186c <HAL_GPIO_Init+0x1e8>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a3e      	ldr	r2, [pc, #248]	; (800194c <HAL_GPIO_Init+0x2c8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d007      	beq.n	8001868 <HAL_GPIO_Init+0x1e4>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a3d      	ldr	r2, [pc, #244]	; (8001950 <HAL_GPIO_Init+0x2cc>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d101      	bne.n	8001864 <HAL_GPIO_Init+0x1e0>
 8001860:	2303      	movs	r3, #3
 8001862:	e006      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 8001864:	2304      	movs	r3, #4
 8001866:	e004      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 8001868:	2302      	movs	r3, #2
 800186a:	e002      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 8001870:	2300      	movs	r3, #0
 8001872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001874:	f002 0203 	and.w	r2, r2, #3
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	4093      	lsls	r3, r2
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001882:	492f      	ldr	r1, [pc, #188]	; (8001940 <HAL_GPIO_Init+0x2bc>)
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	492c      	ldr	r1, [pc, #176]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	4928      	ldr	r1, [pc, #160]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018c4:	4b23      	ldr	r3, [pc, #140]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	4922      	ldr	r1, [pc, #136]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60cb      	str	r3, [r1, #12]
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	43db      	mvns	r3, r3
 80018da:	491e      	ldr	r1, [pc, #120]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018dc:	4013      	ands	r3, r2
 80018de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	4918      	ldr	r1, [pc, #96]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018fa:	4b16      	ldr	r3, [pc, #88]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	43db      	mvns	r3, r3
 8001902:	4914      	ldr	r1, [pc, #80]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 8001904:	4013      	ands	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d021      	beq.n	8001958 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	490e      	ldr	r1, [pc, #56]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	600b      	str	r3, [r1, #0]
 8001920:	e021      	b.n	8001966 <HAL_GPIO_Init+0x2e2>
 8001922:	bf00      	nop
 8001924:	10320000 	.word	0x10320000
 8001928:	10310000 	.word	0x10310000
 800192c:	10220000 	.word	0x10220000
 8001930:	10210000 	.word	0x10210000
 8001934:	10120000 	.word	0x10120000
 8001938:	10110000 	.word	0x10110000
 800193c:	40021000 	.word	0x40021000
 8001940:	40010000 	.word	0x40010000
 8001944:	40010800 	.word	0x40010800
 8001948:	40010c00 	.word	0x40010c00
 800194c:	40011000 	.word	0x40011000
 8001950:	40011400 	.word	0x40011400
 8001954:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_GPIO_Init+0x304>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	43db      	mvns	r3, r3
 8001960:	4909      	ldr	r1, [pc, #36]	; (8001988 <HAL_GPIO_Init+0x304>)
 8001962:	4013      	ands	r3, r2
 8001964:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	3301      	adds	r3, #1
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	f47f ae8e 	bne.w	8001698 <HAL_GPIO_Init+0x14>
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	372c      	adds	r7, #44	; 0x2c
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	40010400 	.word	0x40010400

0800198c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	887b      	ldrh	r3, [r7, #2]
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
 80019a8:	e001      	b.n	80019ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	807b      	strh	r3, [r7, #2]
 80019c6:	4613      	mov	r3, r2
 80019c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ca:	787b      	ldrb	r3, [r7, #1]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019d0:	887a      	ldrh	r2, [r7, #2]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019d6:	e003      	b.n	80019e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	041a      	lsls	r2, r3, #16
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	611a      	str	r2, [r3, #16]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b085      	sub	sp, #20
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019fc:	887a      	ldrh	r2, [r7, #2]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4013      	ands	r3, r2
 8001a02:	041a      	lsls	r2, r3, #16
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	887b      	ldrh	r3, [r7, #2]
 8001a0a:	400b      	ands	r3, r1
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	611a      	str	r2, [r3, #16]
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e26c      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8087 	beq.w	8001b4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a3c:	4b92      	ldr	r3, [pc, #584]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d00c      	beq.n	8001a62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a48:	4b8f      	ldr	r3, [pc, #572]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d112      	bne.n	8001a7a <HAL_RCC_OscConfig+0x5e>
 8001a54:	4b8c      	ldr	r3, [pc, #560]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a60:	d10b      	bne.n	8001a7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a62:	4b89      	ldr	r3, [pc, #548]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d06c      	beq.n	8001b48 <HAL_RCC_OscConfig+0x12c>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d168      	bne.n	8001b48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e246      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a82:	d106      	bne.n	8001a92 <HAL_RCC_OscConfig+0x76>
 8001a84:	4b80      	ldr	r3, [pc, #512]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a7f      	ldr	r2, [pc, #508]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	e02e      	b.n	8001af0 <HAL_RCC_OscConfig+0xd4>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x98>
 8001a9a:	4b7b      	ldr	r3, [pc, #492]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a7a      	ldr	r2, [pc, #488]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b78      	ldr	r3, [pc, #480]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a77      	ldr	r2, [pc, #476]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	e01d      	b.n	8001af0 <HAL_RCC_OscConfig+0xd4>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xbc>
 8001abe:	4b72      	ldr	r3, [pc, #456]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a71      	ldr	r2, [pc, #452]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b6f      	ldr	r3, [pc, #444]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a6e      	ldr	r2, [pc, #440]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e00b      	b.n	8001af0 <HAL_RCC_OscConfig+0xd4>
 8001ad8:	4b6b      	ldr	r3, [pc, #428]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a6a      	ldr	r2, [pc, #424]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b68      	ldr	r3, [pc, #416]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a67      	ldr	r2, [pc, #412]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff fcac 	bl	8001454 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff fca8 	bl	8001454 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e1fa      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	4b5d      	ldr	r3, [pc, #372]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0xe4>
 8001b1e:	e014      	b.n	8001b4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fc98 	bl	8001454 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fc94 	bl	8001454 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e1e6      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3a:	4b53      	ldr	r3, [pc, #332]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x10c>
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d063      	beq.n	8001c1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b56:	4b4c      	ldr	r3, [pc, #304]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00b      	beq.n	8001b7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b62:	4b49      	ldr	r3, [pc, #292]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d11c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x18c>
 8001b6e:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d116      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7a:	4b43      	ldr	r3, [pc, #268]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <HAL_RCC_OscConfig+0x176>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d001      	beq.n	8001b92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e1ba      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b92:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4939      	ldr	r1, [pc, #228]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba6:	e03a      	b.n	8001c1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d020      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb0:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fc4d 	bl	8001454 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7ff fc49 	bl	8001454 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e19b      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd0:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	4b2a      	ldr	r3, [pc, #168]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4927      	ldr	r1, [pc, #156]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]
 8001bf0:	e015      	b.n	8001c1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fc2c 	bl	8001454 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c00:	f7ff fc28 	bl	8001454 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e17a      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c12:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d03a      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d019      	beq.n	8001c66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c38:	f7ff fc0c 	bl	8001454 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c40:	f7ff fc08 	bl	8001454 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e15a      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c52:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f000 fa9a 	bl	8002198 <RCC_Delay>
 8001c64:	e01c      	b.n	8001ca0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6c:	f7ff fbf2 	bl	8001454 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c72:	e00f      	b.n	8001c94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c74:	f7ff fbee 	bl	8001454 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d908      	bls.n	8001c94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e140      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	42420000 	.word	0x42420000
 8001c90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c94:	4b9e      	ldr	r3, [pc, #632]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1e9      	bne.n	8001c74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80a6 	beq.w	8001dfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb2:	4b97      	ldr	r3, [pc, #604]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10d      	bne.n	8001cda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	4b94      	ldr	r3, [pc, #592]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4a93      	ldr	r2, [pc, #588]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	61d3      	str	r3, [r2, #28]
 8001cca:	4b91      	ldr	r3, [pc, #580]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cda:	4b8e      	ldr	r3, [pc, #568]	; (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d118      	bne.n	8001d18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce6:	4b8b      	ldr	r3, [pc, #556]	; (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a8a      	ldr	r2, [pc, #552]	; (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fbaf 	bl	8001454 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfa:	f7ff fbab 	bl	8001454 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b64      	cmp	r3, #100	; 0x64
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e0fd      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0c:	4b81      	ldr	r3, [pc, #516]	; (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d106      	bne.n	8001d2e <HAL_RCC_OscConfig+0x312>
 8001d20:	4b7b      	ldr	r3, [pc, #492]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4a7a      	ldr	r2, [pc, #488]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6213      	str	r3, [r2, #32]
 8001d2c:	e02d      	b.n	8001d8a <HAL_RCC_OscConfig+0x36e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x334>
 8001d36:	4b76      	ldr	r3, [pc, #472]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	4a75      	ldr	r2, [pc, #468]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6213      	str	r3, [r2, #32]
 8001d42:	4b73      	ldr	r3, [pc, #460]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	4a72      	ldr	r2, [pc, #456]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	f023 0304 	bic.w	r3, r3, #4
 8001d4c:	6213      	str	r3, [r2, #32]
 8001d4e:	e01c      	b.n	8001d8a <HAL_RCC_OscConfig+0x36e>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b05      	cmp	r3, #5
 8001d56:	d10c      	bne.n	8001d72 <HAL_RCC_OscConfig+0x356>
 8001d58:	4b6d      	ldr	r3, [pc, #436]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4a6c      	ldr	r2, [pc, #432]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	6213      	str	r3, [r2, #32]
 8001d64:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4a69      	ldr	r2, [pc, #420]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6213      	str	r3, [r2, #32]
 8001d70:	e00b      	b.n	8001d8a <HAL_RCC_OscConfig+0x36e>
 8001d72:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	4a66      	ldr	r2, [pc, #408]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	6213      	str	r3, [r2, #32]
 8001d7e:	4b64      	ldr	r3, [pc, #400]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a63      	ldr	r2, [pc, #396]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	f023 0304 	bic.w	r3, r3, #4
 8001d88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d015      	beq.n	8001dbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d92:	f7ff fb5f 	bl	8001454 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d98:	e00a      	b.n	8001db0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9a:	f7ff fb5b 	bl	8001454 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0ab      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db0:	4b57      	ldr	r3, [pc, #348]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0ee      	beq.n	8001d9a <HAL_RCC_OscConfig+0x37e>
 8001dbc:	e014      	b.n	8001de8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fb49 	bl	8001454 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc6:	f7ff fb45 	bl	8001454 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e095      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ddc:	4b4c      	ldr	r3, [pc, #304]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1ee      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d105      	bne.n	8001dfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dee:	4b48      	ldr	r3, [pc, #288]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	4a47      	ldr	r2, [pc, #284]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8081 	beq.w	8001f06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e04:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d061      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d146      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e18:	4b3f      	ldr	r3, [pc, #252]	; (8001f18 <HAL_RCC_OscConfig+0x4fc>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7ff fb19 	bl	8001454 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e26:	f7ff fb15 	bl	8001454 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e067      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e38:	4b35      	ldr	r3, [pc, #212]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f0      	bne.n	8001e26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4c:	d108      	bne.n	8001e60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e4e:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	492d      	ldr	r1, [pc, #180]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a19      	ldr	r1, [r3, #32]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	430b      	orrs	r3, r1
 8001e72:	4927      	ldr	r1, [pc, #156]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e78:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <HAL_RCC_OscConfig+0x4fc>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fae9 	bl	8001454 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e86:	f7ff fae5 	bl	8001454 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e037      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x46a>
 8001ea4:	e02f      	b.n	8001f06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <HAL_RCC_OscConfig+0x4fc>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fad2 	bl	8001454 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7ff face 	bl	8001454 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e020      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x498>
 8001ed2:	e018      	b.n	8001f06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e013      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d106      	bne.n	8001f02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d001      	beq.n	8001f06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40007000 	.word	0x40007000
 8001f18:	42420060 	.word	0x42420060

08001f1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0d0      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f30:	4b6a      	ldr	r3, [pc, #424]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d910      	bls.n	8001f60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b67      	ldr	r3, [pc, #412]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 0207 	bic.w	r2, r3, #7
 8001f46:	4965      	ldr	r1, [pc, #404]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	4b63      	ldr	r3, [pc, #396]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0b8      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d020      	beq.n	8001fae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f78:	4b59      	ldr	r3, [pc, #356]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a58      	ldr	r2, [pc, #352]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f90:	4b53      	ldr	r3, [pc, #332]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a52      	ldr	r2, [pc, #328]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f9c:	4b50      	ldr	r3, [pc, #320]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	494d      	ldr	r1, [pc, #308]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d040      	beq.n	800203c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	4b47      	ldr	r3, [pc, #284]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d115      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e07f      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d107      	bne.n	8001fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fda:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e073      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fea:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e06b      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffa:	4b39      	ldr	r3, [pc, #228]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f023 0203 	bic.w	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4936      	ldr	r1, [pc, #216]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800200c:	f7ff fa22 	bl	8001454 <HAL_GetTick>
 8002010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	e00a      	b.n	800202a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002014:	f7ff fa1e 	bl	8001454 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e053      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 020c 	and.w	r2, r3, #12
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	429a      	cmp	r2, r3
 800203a:	d1eb      	bne.n	8002014 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800203c:	4b27      	ldr	r3, [pc, #156]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d210      	bcs.n	800206c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 0207 	bic.w	r2, r3, #7
 8002052:	4922      	ldr	r1, [pc, #136]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b20      	ldr	r3, [pc, #128]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e032      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4916      	ldr	r1, [pc, #88]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	490e      	ldr	r1, [pc, #56]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020aa:	f000 f821 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80020ae:	4602      	mov	r2, r0
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	490a      	ldr	r1, [pc, #40]	; (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020bc:	5ccb      	ldrb	r3, [r1, r3]
 80020be:	fa22 f303 	lsr.w	r3, r2, r3
 80020c2:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <HAL_RCC_ClockConfig+0x1cc>)
 80020c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_RCC_ClockConfig+0x1d0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff f980 	bl	80013d0 <HAL_InitTick>

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40022000 	.word	0x40022000
 80020e0:	40021000 	.word	0x40021000
 80020e4:	08002a40 	.word	0x08002a40
 80020e8:	20000160 	.word	0x20000160
 80020ec:	20000164 	.word	0x20000164

080020f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <HAL_RCC_GetSysClockFreq+0x94>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b04      	cmp	r3, #4
 8002118:	d002      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x30>
 800211a:	2b08      	cmp	r3, #8
 800211c:	d003      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x36>
 800211e:	e027      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_RCC_GetSysClockFreq+0x98>)
 8002122:	613b      	str	r3, [r7, #16]
      break;
 8002124:	e027      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	0c9b      	lsrs	r3, r3, #18
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	4a17      	ldr	r2, [pc, #92]	; (800218c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002130:	5cd3      	ldrb	r3, [r2, r3]
 8002132:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d010      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_RCC_GetSysClockFreq+0x94>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	0c5b      	lsrs	r3, r3, #17
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	4a11      	ldr	r2, [pc, #68]	; (8002190 <HAL_RCC_GetSysClockFreq+0xa0>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <HAL_RCC_GetSysClockFreq+0x98>)
 8002152:	fb02 f203 	mul.w	r2, r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e004      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	613b      	str	r3, [r7, #16]
      break;
 800216e:	e002      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetSysClockFreq+0x98>)
 8002172:	613b      	str	r3, [r7, #16]
      break;
 8002174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002176:	693b      	ldr	r3, [r7, #16]
}
 8002178:	4618      	mov	r0, r3
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	007a1200 	.word	0x007a1200
 800218c:	08002a50 	.word	0x08002a50
 8002190:	08002a60 	.word	0x08002a60
 8002194:	003d0900 	.word	0x003d0900

08002198 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <RCC_Delay+0x34>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <RCC_Delay+0x38>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	0a5b      	lsrs	r3, r3, #9
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021b4:	bf00      	nop
  }
  while (Delay --);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1e5a      	subs	r2, r3, #1
 80021ba:	60fa      	str	r2, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f9      	bne.n	80021b4 <RCC_Delay+0x1c>
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	20000160 	.word	0x20000160
 80021d0:	10624dd3 	.word	0x10624dd3

080021d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e041      	b.n	800226a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff f850 	bl	80012a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3304      	adds	r3, #4
 8002210:	4619      	mov	r1, r3
 8002212:	4610      	mov	r0, r2
 8002214:	f000 fa74 	bl	8002700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d001      	beq.n	800228c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e03a      	b.n	8002302 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a18      	ldr	r2, [pc, #96]	; (800230c <HAL_TIM_Base_Start_IT+0x98>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00e      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x58>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b6:	d009      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x58>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a14      	ldr	r2, [pc, #80]	; (8002310 <HAL_TIM_Base_Start_IT+0x9c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d004      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x58>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <HAL_TIM_Base_Start_IT+0xa0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d111      	bne.n	80022f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d010      	beq.n	8002300 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0201 	orr.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ee:	e007      	b.n	8002300 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	40012c00 	.word	0x40012c00
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800

08002318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b02      	cmp	r3, #2
 800232c:	d122      	bne.n	8002374 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b02      	cmp	r3, #2
 800233a:	d11b      	bne.n	8002374 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0202 	mvn.w	r2, #2
 8002344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f9b4 	bl	80026c8 <HAL_TIM_IC_CaptureCallback>
 8002360:	e005      	b.n	800236e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f9a7 	bl	80026b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f9b6 	bl	80026da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b04      	cmp	r3, #4
 8002380:	d122      	bne.n	80023c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b04      	cmp	r3, #4
 800238e:	d11b      	bne.n	80023c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0204 	mvn.w	r2, #4
 8002398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2202      	movs	r2, #2
 800239e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f98a 	bl	80026c8 <HAL_TIM_IC_CaptureCallback>
 80023b4:	e005      	b.n	80023c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f97d 	bl	80026b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f98c 	bl	80026da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d122      	bne.n	800241c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d11b      	bne.n	800241c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0208 	mvn.w	r2, #8
 80023ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2204      	movs	r2, #4
 80023f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f960 	bl	80026c8 <HAL_TIM_IC_CaptureCallback>
 8002408:	e005      	b.n	8002416 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f953 	bl	80026b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f962 	bl	80026da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b10      	cmp	r3, #16
 8002428:	d122      	bne.n	8002470 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b10      	cmp	r3, #16
 8002436:	d11b      	bne.n	8002470 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0210 	mvn.w	r2, #16
 8002440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2208      	movs	r2, #8
 8002446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f936 	bl	80026c8 <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f929 	bl	80026b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f938 	bl	80026da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b01      	cmp	r3, #1
 800247c:	d10e      	bne.n	800249c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d107      	bne.n	800249c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0201 	mvn.w	r2, #1
 8002494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe fe2e 	bl	80010f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b80      	cmp	r3, #128	; 0x80
 80024a8:	d10e      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b4:	2b80      	cmp	r3, #128	; 0x80
 80024b6:	d107      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fa7b 	bl	80029be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b40      	cmp	r3, #64	; 0x40
 80024d4:	d10e      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e0:	2b40      	cmp	r3, #64	; 0x40
 80024e2:	d107      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f8fc 	bl	80026ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b20      	cmp	r3, #32
 800250e:	d107      	bne.n	8002520 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0220 	mvn.w	r2, #32
 8002518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fa46 	bl	80029ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_TIM_ConfigClockSource+0x1c>
 8002540:	2302      	movs	r3, #2
 8002542:	e0b4      	b.n	80026ae <HAL_TIM_ConfigClockSource+0x186>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800256a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257c:	d03e      	beq.n	80025fc <HAL_TIM_ConfigClockSource+0xd4>
 800257e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002582:	f200 8087 	bhi.w	8002694 <HAL_TIM_ConfigClockSource+0x16c>
 8002586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258a:	f000 8086 	beq.w	800269a <HAL_TIM_ConfigClockSource+0x172>
 800258e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002592:	d87f      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x16c>
 8002594:	2b70      	cmp	r3, #112	; 0x70
 8002596:	d01a      	beq.n	80025ce <HAL_TIM_ConfigClockSource+0xa6>
 8002598:	2b70      	cmp	r3, #112	; 0x70
 800259a:	d87b      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x16c>
 800259c:	2b60      	cmp	r3, #96	; 0x60
 800259e:	d050      	beq.n	8002642 <HAL_TIM_ConfigClockSource+0x11a>
 80025a0:	2b60      	cmp	r3, #96	; 0x60
 80025a2:	d877      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x16c>
 80025a4:	2b50      	cmp	r3, #80	; 0x50
 80025a6:	d03c      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0xfa>
 80025a8:	2b50      	cmp	r3, #80	; 0x50
 80025aa:	d873      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x16c>
 80025ac:	2b40      	cmp	r3, #64	; 0x40
 80025ae:	d058      	beq.n	8002662 <HAL_TIM_ConfigClockSource+0x13a>
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d86f      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x16c>
 80025b4:	2b30      	cmp	r3, #48	; 0x30
 80025b6:	d064      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x15a>
 80025b8:	2b30      	cmp	r3, #48	; 0x30
 80025ba:	d86b      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x16c>
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d060      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x15a>
 80025c0:	2b20      	cmp	r3, #32
 80025c2:	d867      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x16c>
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d05c      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x15a>
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d05a      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x15a>
 80025cc:	e062      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6899      	ldr	r1, [r3, #8]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f000 f968 	bl	80028b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	609a      	str	r2, [r3, #8]
      break;
 80025fa:	e04f      	b.n	800269c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6899      	ldr	r1, [r3, #8]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f000 f951 	bl	80028b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800261e:	609a      	str	r2, [r3, #8]
      break;
 8002620:	e03c      	b.n	800269c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6859      	ldr	r1, [r3, #4]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	461a      	mov	r2, r3
 8002630:	f000 f8c8 	bl	80027c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2150      	movs	r1, #80	; 0x50
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f91f 	bl	800287e <TIM_ITRx_SetConfig>
      break;
 8002640:	e02c      	b.n	800269c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6859      	ldr	r1, [r3, #4]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	461a      	mov	r2, r3
 8002650:	f000 f8e6 	bl	8002820 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2160      	movs	r1, #96	; 0x60
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f90f 	bl	800287e <TIM_ITRx_SetConfig>
      break;
 8002660:	e01c      	b.n	800269c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	461a      	mov	r2, r3
 8002670:	f000 f8a8 	bl	80027c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2140      	movs	r1, #64	; 0x40
 800267a:	4618      	mov	r0, r3
 800267c:	f000 f8ff 	bl	800287e <TIM_ITRx_SetConfig>
      break;
 8002680:	e00c      	b.n	800269c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4619      	mov	r1, r3
 800268c:	4610      	mov	r0, r2
 800268e:	f000 f8f6 	bl	800287e <TIM_ITRx_SetConfig>
      break;
 8002692:	e003      	b.n	800269c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
      break;
 8002698:	e000      	b.n	800269c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800269a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
	...

08002700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a29      	ldr	r2, [pc, #164]	; (80027b8 <TIM_Base_SetConfig+0xb8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00b      	beq.n	8002730 <TIM_Base_SetConfig+0x30>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271e:	d007      	beq.n	8002730 <TIM_Base_SetConfig+0x30>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a26      	ldr	r2, [pc, #152]	; (80027bc <TIM_Base_SetConfig+0xbc>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d003      	beq.n	8002730 <TIM_Base_SetConfig+0x30>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a25      	ldr	r2, [pc, #148]	; (80027c0 <TIM_Base_SetConfig+0xc0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d108      	bne.n	8002742 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <TIM_Base_SetConfig+0xb8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00b      	beq.n	8002762 <TIM_Base_SetConfig+0x62>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002750:	d007      	beq.n	8002762 <TIM_Base_SetConfig+0x62>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a19      	ldr	r2, [pc, #100]	; (80027bc <TIM_Base_SetConfig+0xbc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d003      	beq.n	8002762 <TIM_Base_SetConfig+0x62>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a18      	ldr	r2, [pc, #96]	; (80027c0 <TIM_Base_SetConfig+0xc0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d108      	bne.n	8002774 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4313      	orrs	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <TIM_Base_SetConfig+0xb8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d103      	bne.n	80027a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	615a      	str	r2, [r3, #20]
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	40012c00 	.word	0x40012c00
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40000800 	.word	0x40000800

080027c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f023 0201 	bic.w	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f023 030a 	bic.w	r3, r3, #10
 8002800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	621a      	str	r2, [r3, #32]
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	f023 0210 	bic.w	r2, r3, #16
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800284a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	031b      	lsls	r3, r3, #12
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800285c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	621a      	str	r2, [r3, #32]
}
 8002874:	bf00      	nop
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	f043 0307 	orr.w	r3, r3, #7
 80028a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	609a      	str	r2, [r3, #8]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b087      	sub	sp, #28
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	021a      	lsls	r2, r3, #8
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	431a      	orrs	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4313      	orrs	r3, r2
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	609a      	str	r2, [r3, #8]
}
 80028e6:	bf00      	nop
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002904:	2302      	movs	r3, #2
 8002906:	e046      	b.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00e      	beq.n	800296a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002954:	d009      	beq.n	800296a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d004      	beq.n	800296a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a10      	ldr	r2, [pc, #64]	; (80029a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10c      	bne.n	8002984 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	4313      	orrs	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40000800 	.word	0x40000800

080029ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr

080029be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <__libc_init_array>:
 80029d0:	b570      	push	{r4, r5, r6, lr}
 80029d2:	2600      	movs	r6, #0
 80029d4:	4d0c      	ldr	r5, [pc, #48]	; (8002a08 <__libc_init_array+0x38>)
 80029d6:	4c0d      	ldr	r4, [pc, #52]	; (8002a0c <__libc_init_array+0x3c>)
 80029d8:	1b64      	subs	r4, r4, r5
 80029da:	10a4      	asrs	r4, r4, #2
 80029dc:	42a6      	cmp	r6, r4
 80029de:	d109      	bne.n	80029f4 <__libc_init_array+0x24>
 80029e0:	f000 f822 	bl	8002a28 <_init>
 80029e4:	2600      	movs	r6, #0
 80029e6:	4d0a      	ldr	r5, [pc, #40]	; (8002a10 <__libc_init_array+0x40>)
 80029e8:	4c0a      	ldr	r4, [pc, #40]	; (8002a14 <__libc_init_array+0x44>)
 80029ea:	1b64      	subs	r4, r4, r5
 80029ec:	10a4      	asrs	r4, r4, #2
 80029ee:	42a6      	cmp	r6, r4
 80029f0:	d105      	bne.n	80029fe <__libc_init_array+0x2e>
 80029f2:	bd70      	pop	{r4, r5, r6, pc}
 80029f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f8:	4798      	blx	r3
 80029fa:	3601      	adds	r6, #1
 80029fc:	e7ee      	b.n	80029dc <__libc_init_array+0xc>
 80029fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a02:	4798      	blx	r3
 8002a04:	3601      	adds	r6, #1
 8002a06:	e7f2      	b.n	80029ee <__libc_init_array+0x1e>
 8002a08:	08002a64 	.word	0x08002a64
 8002a0c:	08002a64 	.word	0x08002a64
 8002a10:	08002a64 	.word	0x08002a64
 8002a14:	08002a68 	.word	0x08002a68

08002a18 <memset>:
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4402      	add	r2, r0
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d100      	bne.n	8002a22 <memset+0xa>
 8002a20:	4770      	bx	lr
 8002a22:	f803 1b01 	strb.w	r1, [r3], #1
 8002a26:	e7f9      	b.n	8002a1c <memset+0x4>

08002a28 <_init>:
 8002a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2a:	bf00      	nop
 8002a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a2e:	bc08      	pop	{r3}
 8002a30:	469e      	mov	lr, r3
 8002a32:	4770      	bx	lr

08002a34 <_fini>:
 8002a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a36:	bf00      	nop
 8002a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a3a:	bc08      	pop	{r3}
 8002a3c:	469e      	mov	lr, r3
 8002a3e:	4770      	bx	lr
